<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[《图解TCP/IP》之TCP/IP基础知识]]></title>
    <url>%2F2019%2FMyLearn-ComputerNetwork-2%2F</url>
    <content type="text"><![CDATA[TCP/IP基础知识TCP/IP的具体含义 根据不同的使用范围，可以分为两种含义。 仅TCP和IP两种协议。 利用IP进行通信时所必须用到的协议群的统称。如IP/ICMP、 TCP/UDP、 TELNET/FTP等等。 TCP/IP协议分层模型 书本第一章介绍了OSI参考模型（博客也记录了），而TCP/IP也有一个对应的参考模型。 可以简单的理解为，TCP/IP参考模型将OSI参考模型的顶上三层，即应用层、 表示层、 会话层概括为应用层，其余层不变。也就从原来的7层变为5层模型。 这里不多介绍数据链路层和物理层了，直接从网络层的协议讲起。 网络层 让主机与主机之间通信。 IP协议 IP是跨越网络传输数据包，使整个互联网都能收到数据的协议。IP协议使数据能够发送到对方，在发送的期间，以IP地址作为主机的标识符。 IP包含数据链路层的功能，通过IP可以经过任意的底层数据链路去实现通信。 IP是分组交换的一种协议，但是不具有重发机制，所以是非可靠性传输协议。 ICMP协议 ICMP用于在IP数据包发送异常时，向发送端发送一个err，可以用来诊断网络的健康状况。 ARP协议 可以从IP地址 解析出MAC地址。 传输层 让应用和应用之间通信。 TCP协议 面向连接的传输层协议。 可靠的传输，能保证两个主机之间的通信可达。 能够正确处理传输过程的丢包、 传输顺序错乱的异常情况。 可以有效利用带宽，缓解网络拥堵。 为了实现可靠性，定义了很多规范，因此在传输上的数据量就不是很大，因此不适合一些数据量大且频繁传输，例如视频通话。 UDP协议 面向无连接的传输层协议。 不可靠的传输，它不会关心对方是否能收到数据。 如果需要检查，只能在应用中实现而不是协议中。 性质与TCP大部分相反，因此它适合用于多播、 广播以及视频通信。 应用层 如上面所述，TCP/IP将OSI中的表示层、 会话层、 应用层一起概括为应用层，所以在TCP/IP的应用层中，它要实现OSI三层的功能。 传输层的 UDP 报文和 TCP 报文段的数据部分就是应用层交付的数据。 网络管理(SNMP)在这里不介绍，因为本人不是很了解。 WWW功能 即万维网，简称web。一般由web客户端(如浏览器)和web服务器组成。而它们之间传输的数据格式主要是HTML，即超文本标记语言，通信使用的协议是HTTP协议，即超文本传输协议。 注意：HTTP属于OSI应用层协议，HTML属于表示层协议。 电子邮件功能(E-Mail) 就是发送电子邮件，使用到的协议叫做STMP，即简单邮件传输协议，在上一篇博客举例中提到过。 原来只可以发送文本格式的邮件，在MIME协议出现后，允许发送音频、图像等。甚至能对邮件的文字格式进行更改。 STMP是传输邮件的协议(还有POP3)，而MIME是邮件格式的协议，不用弄混了。 文件传输功能(FTP) 允许两个计算机之间相互传输文件，可以选择传输过程是二进制还是文本方式。 在传输过程中，需要创建两个TCP连接，分别是发出传输请求的控制连接，以及实际的数据连接。 远程登录功能(TELNET|SSH) 远程登录的作用就不多介绍了，其中telnet是明文发送的数据，而ssh支持加密，所以普遍来说ssh更安全。 TCP/IP分层模型与通信示例 跟着书上的内容，在这里介绍应用层到物理媒介的数据处理流程。 如上图，我们从下往上看，传输层在上层包装好的数据中添加了自己的TCP首部信息，传递给下一层网络层，网络层也添加了自己的IP首部。 如同在上一篇博客的发邮件例子的过程中，发送方的邮件数据从表示层开始每一层都为数据添加一个首部信息，代表了它们在这一层的操作规定。 我们在这里依然和书上一样，使用发邮件的例子介绍它们的封装流程。 邮件样例 当发送方输入好内容，点击发送的时候。 TCP/IP的应用层开始对邮件进行编码处理，将它变成网络的通用码。(这一步在OSI中是表示层的功能)。邮件开始发送的那一刻，开始建立TCP连接，即从应用层将数据发给下一层传输层的TCP中。 TCP为了实现可靠性传输的功能，在应用层数据的前端加上了一个TCP首部，上面记录了源端口号和目的端口号，以及数据的序列号和校验和，处理好这些，它将数据发到网络层的IP中。 ​ 上图的数据即应用层数据。 网络层接受到了数据，对于网络层，它把接受到的数据当作一个整体处理，它直接在这些数据的头部上加入IP首部，上面注明了源地址和目的地址。 ​ 上图的数据部分即(应用层数据加上TCP头部信息)的数据。 这个时候，开始把数据发送给数据链路层(如路由器)，这时候我们需要知道接受方的MAC地址(如网卡地址)，我们可以通过ARP协议解析出MAC地址。 书上的图，该图对包首做了简化 数据包接收处理 数据链路层 接收到数据之后，数据链路层先查看接收端MAC地址是不是自己，如果不是则丢弃。 确定是自己的包以后，开始查找以太网包首部的类型域，以确定传过来的数据类型。当前的例子是IP包，所以我们会把数据传输给网络层的IP模块中，如果是ARP则给ARP。 网络层 例子中的网络层的IP模块接受到下一层(数据链路层)的数据，首先判断目的ip地址是不是自己，如果不是则丢弃。 确定是自己的包以后，开始查找IP包首部的协议，如果是TCP则给传输层的TCP模块，如果是UDP则给传输层的UDP模块。 传输层 例子中的传输层TCP模块接受到下一层(网络层)的数据，这个时候已经确定信息就是发送给自己了，因此不需要再确认。但是需要检验一下校验和，避免数据错误，之后查看端口号，将数据传给对应端口号的进程。同时发送一个ACK，代表接受到数据。 如果校验和不对，也会向发送方要求重发一次数据，或者是没有向发送方发送ACK，发送方也会反复发送。 应用层 我们接受到了传输层的数据，这个时候开始解析(对应OSI的表示层)数据，如果数据正常，并且磁盘有空间能正常保存，那么会发送一个处理正常的信息给发送方。 否则： 如果数据实际上并不是指向接受方，比如邮件的收件人地址并不是接受方，那么会发送一个err给发送方。 如果接收到了，但是无法正常存储，也会发送一个err。 最后接受方打开邮件，看到了发送方发来的信息。 总结 书上第二章主要就是介绍TCP/IP参考模型以及几个层中相对重要的协议，依然通过发送邮件的例子让读者了解在TCP/IP参考模型中的数据传输流程。 在发送过程中，传输层，网络层，数据链路层都会在应用层的数据包上加上一层对应的首包，分别标记端口、ip地址、mac地址。 而接收过程，则逆序解析，一一对正，只要不符合就丢弃。 最后的解析出原本的数据在应用层上被正确的使用，在这个过程中还回确保信息无误，与发送方确认。 书上第三章是数据链路层，个人仅去了解，不会专门总结一篇知识，所以下一次会跳到网络层的ip协议。]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>知识总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[处理器调度]]></title>
    <url>%2F2019%2FMyLearn-OS-2%2F</url>
    <content type="text"><![CDATA[处理器调度层次 本篇基于进程和线程，进程和线程的相关知识可以参考另一篇文章。 1.高级调度作用 可称为作业调度、长程调度 ，简单来说，就是从后备作业(可以理解为待安排的程序)中按照一定的调度策略选择若干个作业进入内存，开始为他们创建进程和分配资源。 同时在作业完成时做好善后工作，比如回收资源。 调用时机 当CPU空闲时间超过一定阀值，此时系统便调用高级调度，开始安排新作业。 2.中级调度作用 可称为平衡调度、中程调度，简单来说会把暂时不能运行的进程挂起，将它占用的资源释放，当资源充足的时候，解除这个进程的挂起状态，为它恢复资源。 调用时机 当内存吃紧时调用中级调度。 3.低级调度作用 可称为进程调度、线程调度、短程调度，简单来说，它会根据某种原则决定在内存中所有进程使用cpu的顺序，可以说它是操作系统最核心的调度，几乎每时每刻都在被执行。 调用时机 当cpu空闲时，说明这个时候cpu还可以被利用。 如果有某个进程的优先级别比当前使用cpu的进程还高，而且调度算法允许被抢占时，优先的那个进程将会抢占cpu。 调度性能指标资源利用率公式​ CPU利用率=CPU有效工作时间/CPU总的运行时间​ CPU总的运行时间=CPU有效工作时间+CPU空闲等待时间​ 即CPU利用率=CPU有效工作时间/(CPU有效工作时间+CPU空闲等待时间) 吞吐率 单位时间内cpu处理作业的个数。 如果处理的作业中，长作业比较多，那么相对来说，单位时间内它能处理的作业就很少，因为长作业一直做不完。此时吞吐率低。 如果处理的作业中，短作业比较多，那么相对来说，单位时间内它能处理的作业就很多，因为短作业很容易做完。此时吞吐率高。 作业长短指的是执行这个作业的必要时间的长短。 是批处理系统的重要衡量指标之一。 公平性 确保每个进程都能得到合理的CPU份额和资源份额。否则会产生进程饥饿。 进程饥饿：某个进程从创建开始到某个时间，就一直没有使用cpu的权限，那么这个进程是没有存在的意义，也就是进程饥饿。 响应时间 从交互式进程提交一个请求到获得响应之间的时间间隔。 是分时、实时系统的重要衡量指标之一。 周转时间 从系统提交作业开始到作业完成为止的时间间隔。 公式 第i个作业的周转时间ti=作业i的完成时刻f-作业的提交时刻s。 ti=tf-ts; 平均周转时间T=所有作业的周转时间相加之合/作业个数n。 T=($\sum_{i=1}^N$ti)/n 第i个作业的带权周转时间wi=第i个作业的周转时间ti/第i个作业的必要消耗时间tk wi=ti/tk 平均带权周转时间W=所有作业的带权周转时间相加之合/作业个数n。 W=($\sum_{i=1}^N$wi)/n 作业调度和低级调度算法先来先服务算法(FCFS)概述 字如其名，谁先到谁先服务，也类似数据结构中的队列，不按权值，先进先出。 非抢占式。 案例 如下标，有三个作业按1 2 3的顺序进入后备作业，这个时候因为作业1先来，所以运行它，随后是2和3。 作业名 所需CPU时间/ms 作业1 28 作业2 9 作业3 3 0-28s 28-37s 37-40s 作业1 作业2 作业3 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120/*!*************************************************** * @file: FCFS.cpp * @brief: 博客-操作系统调度算法-先来先服务 * @author: ConfuseL * @date: 3,31,2019 * @note: ****************************************************/#include &lt;bits/stdc++.h&gt;using namespace std;//所有作业提交到系统的时间const double beginTime=0;//系统时间double systemTime=0;class Job&#123; private: //作业号 int id; //所需CPU的时间 double workTime; //获得CPU运作权限的时间 double getCount; //结束时间 double finishTime; //进入内存的时间 double pushTime; //到达系统的时间 double arrival; public: Job()&#123;&#125;; Job(int id,double wT) &#123; this-&gt;id=id; workTime=wT; getCount=0; finishTime=0; pushTime=0; arrival=0; &#125; friend ostream&amp; operator&lt;&lt;(ostream&amp; out, Job &amp;j) &#123; j.setFinishTime(systemTime); out&lt;&lt;"作业"&lt;&lt;j.id&lt;&lt;": 所需CPU时间："&lt;&lt;j.workTime&lt;&lt;"ms，进入时间："&lt;&lt;j.pushTime&lt;&lt;"ms，周转时间："&lt;&lt;j.finishTime-j.arrival&lt;&lt;endl; return out; &#125; //是否以完成 bool isDone() &#123; //当获取CPU运作权限时间大于等于工作所需要的时间，即完成。 return getCount&gt;=workTime; &#125; //设置结束时间 void setFinishTime(double finishTime) &#123; this-&gt;finishTime=finishTime; &#125; //获得CPU运作时间，一次1ms void getCPUTime(double&amp; systemTime) &#123; getCount+=1.0; systemTime+=1.0; finishTime+=1.0; &#125; //设置进入内存时间 void setPushTime(double pushTime) &#123; this-&gt;pushTime=pushTime; //结束时间从进入内存时间开始累加 finishTime=pushTime; &#125; //获得结束时间 double getFinishTime() &#123; return finishTime; &#125; //获得工作时间 double getWorkTime() &#123; return workTime; &#125; //获得提交时间 double getArrivalTime() &#123; return arrival; &#125;&#125;;int main()&#123; //平均周转和平均带权周转 double T=0,W=0; //后备作业个数个数 int jobNum=3; //后备作业队列 queue&lt;Job&gt; JobPool; //当前运行的作业 Job curJob; //测试，后备作业中有以下几个作业 JobPool.push(*(new Job(1,28))); JobPool.push(*(new Job(2,9))); JobPool.push(*(new Job(3,3))); //开始取作业，按照先进先出(队列特性) while(!JobPool.empty()) &#123; curJob=JobPool.front(); JobPool.pop(); curJob.setPushTime(systemTime); //如果作业没有完成 while(!curJob.isDone()) &#123; //给它一次运行时间(1ms) curJob.getCPUTime(systemTime); &#125; cout&lt;&lt;curJob; T+=(curJob.getFinishTime()-curJob.getArrivalTime())/jobNum; W+=((curJob.getFinishTime()-curJob.getArrivalTime())/curJob.getWorkTime())/jobNum; &#125; cout&lt;&lt;"平均周转时间："&lt;&lt;T&lt;&lt;"ms,"&lt;&lt;"平均带权周转时间："&lt;&lt;W&lt;&lt;"ms"&lt;&lt;endl; return 0;&#125; 最短作业优先算法概述 每次取所需时间最短的作业，当系统彻底空闲的时候取第一个，随后在第一个执行完毕后，检索等待的作业中所需CPU时间最短的作业，然后执行它。 非抢占式。 会造成进程饥饿，所需时间越多的就需要等待越久。 案例 如下标，有四个作业，它们同时进入后备作业，此时由于作业2所需时间最短，所以先运行作业2。 其次是作业4，1，3。 作业名 所需CPU时间/ms 作业1 9 作业2 4 作业3 10 作业4 8 0-4s 4-12s 12-21s 21-31s 作业2 作业4 作业1 作业3 代码 直接把上面FCFS的队列改成最小优先队列就好了。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122/*!*************************************************** * @file: SJF.cpp * @brief: 博客-操作系统调度算法-最短作业有限 * @author: ConfuseL * @date: 3,31,2019 * @note: ****************************************************/#include &lt;bits/stdc++.h&gt;using namespace std;//系统时间double systemTime=0;class Job&#123; private: //作业号 int id; //所需CPU的时间 double workTime; //获得CPU运作权限的时间 double getCount; //结束时间 double finishTime; //进入内存的时间 double pushTime; //到达系统的时间 double arrival; public: Job()&#123;&#125;; Job(int id,double wT) &#123; this-&gt;id=id; workTime=wT; getCount=0; finishTime=0; pushTime=0; arrival=0; &#125; friend ostream&amp; operator&lt;&lt;(ostream&amp; out, Job &amp;j) &#123; j.setFinishTime(systemTime); out&lt;&lt;"作业"&lt;&lt;j.id&lt;&lt;": 所需CPU时间："&lt;&lt;j.workTime&lt;&lt;"ms，进入时间："&lt;&lt;j.pushTime&lt;&lt;"ms，周转时间："&lt;&lt;j.finishTime-j.arrival&lt;&lt;endl; return out; &#125; //重载小于操作符 让时间小的优先 friend bool operator &lt; (const Job &amp; a,const Job &amp;b) &#123; return a.workTime&gt;b.workTime; &#125; //是否以完成 bool isDone() &#123; //当获取CPU运作权限时间大于等于工作所需要的时间，即完成。 return getCount&gt;=workTime; &#125; //获得CPU运作时间，一次1ms void getCPUTime(double&amp; systemTime) &#123; getCount+=1.0; systemTime+=1.0; &#125; //设置进入内存时间 void setPushTime(double pushTime) &#123; this-&gt;pushTime=pushTime; &#125; //设置结束时间 double setFinishTime(double finishTime) &#123; this-&gt;finishTime=finishTime; &#125; //获得结束时间 double getFinishTime() &#123; return finishTime; &#125; //获得工作时间 double getWorkTime() &#123; return workTime; &#125; //获得提交时间 double getArrivalTime() &#123; return arrival; &#125;&#125;;int main()&#123; //平均周转和平均带权周转 double T=0,W=0; //后备作业个数个数 int jobNum=4; //后备作业队列 priority_queue&lt;Job&gt; JobPool; //当前运行的作业 Job curJob; //测试，后备作业中有以下几个作业 JobPool.push(*(new Job(1,9))); JobPool.push(*(new Job(2,4))); JobPool.push(*(new Job(3,10))); JobPool.push(*(new Job(4,8))); //开始取作业，按照先进先出(队列特性) while(!JobPool.empty()) &#123; curJob=JobPool.top(); JobPool.pop(); curJob.setPushTime(systemTime); //如果作业没有完成 while(!curJob.isDone()) &#123; //给它一次运行时间(1ms) curJob.getCPUTime(systemTime); &#125; cout&lt;&lt;curJob; T+=(curJob.getFinishTime()-curJob.getArrivalTime())/jobNum; W+=((curJob.getFinishTime()-curJob.getArrivalTime())/curJob.getWorkTime())/jobNum; &#125; cout&lt;&lt;"平均周转时间："&lt;&lt;T&lt;&lt;"ms,"&lt;&lt;"平均带权周转时间："&lt;&lt;W&lt;&lt;"ms"&lt;&lt;endl; return 0;&#125; 最短剩余时间优先算法概述 这个算法其实是上面最短作业优先算法的抢占版，最短优先算法规定了每一次执行最短需求的作业，直到它完毕，但是在最短剩余时间优先算法中，每当一个新作业进入到后备内存时，就得比较当前执行的作业和后备作业中谁的需求时间最短了。 案例 如下表，四个作业分时到达。作业1最先到达，执行了1ms，随后被到来的作业2抢占，因为作业2只需要4ms，而作业1还需要7ms。 以此类推。 作业名 到达系统时间 所需CPU时间/ms 作业1 0 8 作业2 1 4 作业3 2 9 作业4 3 5 0-1MS 1-5MS 5-10MS 10-17MS 17-26MS 作业1 作业2 作业4 作业1 作业3 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177/*!*************************************************** * @file: SRTF.cpp * @brief: 博客-操作系统调度算法-最短剩余时间优先 * @author: ConfuseL * @date: 4,1,2019 * @note: ****************************************************/#include &lt;bits/stdc++.h&gt;using namespace std;//系统时间double systemTime=0;class Job&#123; private: //作业号 int id; //所需CPU的时间 double workTime; //获得CPU运作权限的时间 double getCount; //结束时间 double finishTime; //第一次进入内存的时间 double pushTime; //到达系统的时间 double arrival; public: Job()&#123;&#125;; Job(int id,double ar,double wT) &#123; this-&gt;id=id; workTime=wT; arrival=ar; getCount=0; finishTime=0; pushTime=-1; &#125; friend ostream&amp; operator&lt;&lt;(ostream&amp; out, Job &amp;j) &#123; //当它结束的时候输出，这时候设置结束时间。 j.setFinishTime(systemTime); out&lt;&lt;"作业"&lt;&lt;j.id&lt;&lt;": 提交时间："&lt;&lt;j.arrival&lt;&lt;"ms, 所需CPU时间："&lt;&lt;j.workTime&lt;&lt;"ms，进入内存时间："&lt;&lt;j.pushTime&lt;&lt;"ms，周转时间："&lt;&lt;systemTime-j.arrival&lt;&lt;endl; return out; &#125; //重载小于操作符 让剩余时间小的优先 friend bool operator &lt; (const Job &amp; a,const Job &amp;b) &#123; return a.getSurplusTime()&gt;b.getSurplusTime(); &#125; //是否以完成 bool isDone() &#123; //当获取CPU运作权限时间大于等于工作所需要的时间，即完成。 return getCount&gt;=workTime; &#125; //设置结束时间 void setFinishTime(double finishTime) &#123; this-&gt;finishTime=finishTime; &#125; //获得CPU运作时间，一次1ms void getCPUTime(double&amp; systemTime) &#123; getCount+=1.0; systemTime+=1.0; &#125; //设置第一次进入内存时间 void setPushTime(double pushTime) &#123; //如果小于0代表第一次进 if(this-&gt;pushTime&lt;0) this-&gt;pushTime=pushTime; &#125; //获得进入内存时间 double getPushTime() &#123; return pushTime; &#125; //获得结束时间 double getFinishTime() &#123; return finishTime; &#125; //获得提交时间 double getArrivalTime() &#123; return arrival; &#125; //获得工作时间 double getWorkTime() &#123; return workTime; &#125; //获得剩余工作时间 double getSurplusTime() const &#123; return workTime-getCount; &#125;&#125;;//当前运行的作业，在这里用静态指针的原因是因为我们需要对每一次进来的作业和当前的作业进行对比甚至替换，如果在传参中声明并不能更改原来的地址，而引用做为传参却无法指向引用(队列top返回的是引用)。Job *curJob=NULL;void judge(priority_queue&lt;Job&gt; &amp;jobPool,Job &amp;newJob)&#123; //如果为空并且当前没有作业 代表第一个作业 不用推入队列 直接变成当前作业 if(jobPool.empty()&amp;&amp;curJob==NULL) &#123; curJob=&amp;newJob; if(curJob-&gt;getPushTime()&lt;1e8) curJob-&gt;setPushTime(systemTime); return; &#125; //否则推入 else jobPool.push(newJob); //判断当前和队列头部的那个剩余时间最少，然后替换 if(jobPool.top().getSurplusTime()&lt;curJob-&gt;getSurplusTime()) &#123; jobPool.push(*curJob); *(curJob)=jobPool.top(); jobPool.pop(); if(curJob-&gt;getPushTime()&lt;1e8) curJob-&gt;setPushTime(systemTime); &#125;&#125;int main()&#123; //平均周转和平均带权周转 double T=0,W=0; //后备作业个数个数 int jobNum=4; //后备作业队列 priority_queue&lt;Job&gt; JobPool; //开始取作业，按照先进先出(队列特性) do &#123; //因为知道是四个作业 所以直接打表了 如果作业很多 就要另写了 switch((int)systemTime) &#123; case 0: judge(JobPool,*(new Job(1,0,8))); break; case 1: judge(JobPool,*(new Job(2,1,4))); break; case 2: judge(JobPool,*(new Job(3,2,9))); break; case 3: judge(JobPool,*(new Job(4,3,5))); break; &#125; //给它一次运行时间(1ms) curJob-&gt;getCPUTime(systemTime); //如果作业完成 if(curJob-&gt;isDone()) &#123; //输出相关信息 cout&lt;&lt;*curJob; T+=(curJob-&gt;getFinishTime()-curJob-&gt;getArrivalTime())/jobNum; W+=((curJob-&gt;getFinishTime()-curJob-&gt;getArrivalTime())/curJob-&gt;getWorkTime())/jobNum; //读取新作业 if(!JobPool.empty()) &#123; *(curJob)=JobPool.top(); JobPool.pop(); curJob-&gt;setPushTime(systemTime); &#125; &#125; &#125; while(!curJob-&gt;isDone()||!JobPool.empty()); cout&lt;&lt;"平均周转时间："&lt;&lt;T&lt;&lt;"ms,"&lt;&lt;"平均带权周转时间："&lt;&lt;W&lt;&lt;"ms"&lt;&lt;endl; return 0;&#125; 下面的算法后面更新。 最高响应比优先算法概述代码优先级调度算法概述代码轮转调度算法概述代码]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>知识总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《图解TCP/IP》之网络基础知识]]></title>
    <url>%2F2019%2FMyLearn-ComputerNetwork-1%2F</url>
    <content type="text"><![CDATA[计算机中的协议什么是协议 简单来说，协议就是计算机与计算机之间通过网络实现通信时事先达成的一种约定。 书中有一段例子，即： 人们沟通用的语言当作“协议” 聊天当作“通信” 说话的内容当作“数据” 但是计算机并没有人类那么智能 ，人类在聊天(通信)时不需要特别注意就能自然的吐字、发音(写数据)和听懂对方的语言(数据解析)。但是计算机不会，因此需要我们提前指定好这个协议。让计算机根据这个协议，去正确的读取和发送数据。 协议的作用 让不同的设备、CPU以及不同的操作系统组成的计算机之间遵循相同的协议以能够实现通信。可以理解为通信时，两个计算机的语言，只有语言相同，两个计算机太能听懂(此语言只是举例，不指编程语言)。 分组交换技术 分组交换是指把大数据分割成多个小的包裹(packet)，随后再进行传输。 就类似于邮局发货，对于每一个包，都需要标识好发送人的信息和接受人的信息（源地址和目的地址），这样才能保证货物能够在正确的路线上传递。 原文中翻译为分组交换协议，感觉称为技术更合适，因为觉得这个 协议 两字有一点容易让人把后面学习的TCP/IP协议的 协议 混淆，因为TCP/IP使用的正是分组交换技术，所以在这里改为技术。 协议分层与OSI参考模型协议分层 国际标准化组织，根据通信协议中必要的功能分层了7个层次，而这个7个层次组成了一个模型。即OSI模型。 在这个模型中，每一层次都要接受它下一层提供的服务，同时为自己上一层提供服务。 不同层次交互时遵行的约定叫做“接口”，相同层次交互式的约定叫做“协议”。 OSI参考模型 如上所述，国际标准化组织将协议分为了7个层次，从底层到上层，为别是： 物理层-&gt;数据链路层-&gt;网络层层-&gt;传输层-&gt;会话层-&gt;表示层-&gt;应用层。 其中七层的作用如下图。 发送方调用的顺序是从上到下，接受方则相反，从下到上。 以发送邮件简单举例，发送方A想对接受方B发送一封信，那么发送方在写完信，在邮箱网页上点击了发送按钮的那一刻，我们的信件便进入了应用层。 应用层：我们的应用层知道这是一封电子邮件，选择一个适合的应用层协议:SMTP协议(先不用管它，知道它是一个发送邮件的协议就好了)，然后把这封电子邮件变成一个包裹，包的首部写了邮件的信息以及收件人。随后开始调用下一层的接口。 表示层：接受到应用层的调用，表示层先将包裹分析一边，为了保证数据格式一致性，把邮件中的信息转换为网络通用的标准数据格式，同时加上一段首部信息，标识这个数据原来的格式。转换好之后，调用下一层的接口。 会话层：会话层拿到包裹后，开始决定采用哪一种链接方式，对多个邮件是连续发呢还是一次性发完呢。在首部也添加了该层的信息：数据传输的顺序。随后调用下一层的接口。 传输层：这应该就是这本书的重点啦，这一层有TCP和UDP协议，如果选择了TCP协议，我们将建立起双方的可靠链接，反之UDP将不面向连接。此外还要进行传输前的错误检测和流控。随后数据开始经过网络层。 网络层：网络层的主要功能即是提供路由，即选择到达目标主机的最佳路径，并沿该路径传送数据包。除此之外，网络层还要能够消除网络拥挤，具有流量控制和拥挤控制的能力。选择了最佳的线路之后，开始进入数据链路层。 数据链路层：该层的数据传输单位是帧，将经过上面五层操作后的邮件的数据组合成一帧一帧的数据，开始传递给物理层。 物理层：这是最低的一层了，在这里我们把帧数据编程0101的比特，然后经过光纤啊、电缆啊、wifi啊等物理设施传输到对方对应的物理设施中。 在发送方A点击发送后的几秒内，以上操作很可能已经完成了，而接受方B的物理层也开始接受到0101的比特数据，然后从下层到上层逐个分析，在传输层使用了对应的TCP/UDP接受数据，在会话层按顺序排序数据，在表示层解码数据，在应用层把邮件放到接受方B的邮箱中，如果邮箱满了，这时候我们又会发送一条错误给发送方A，这个时候又类似发送了一封邮件，只不过发送者不再是A而是B了。 传输方式的种类面向连接与面向无连接面向连接 即双方的通信要建立在连接上。比如打电话，需要向对方拨号，而对方也必须在接通之后，两个人才能通话，这个过程就是建立连接。如果两个人其中一个人挂了电话，那么就无法在通讯，也就是连接被切断了。 TCP协议就是面向链接。 面向无连接 双方的通信不需要连接。比如寄快递，我只需要将货物给邮寄公司，填写好对方信息就好了，当包裹到对方地址的时候，对方去查收就好。 UDP协议就是面向无连接。 电路交换与分组交换电路交换 从名字上很容易理解，也就是发送方和接受方通过一条电路传递数据，如果停止传递，那么电路断开（不要和上面的面向连接搞混了，这里的电路是单独的物理通路)。 及时通信电路空闲，其他用户无法使用。 举个例子，看过一些记录背景为上时代的电影，会有过打电话的不少镜头，主角打电话给某人，然后某中继接通了电话，主角说，帮我接通B，然后中继将线路搭给了B，这时候两个人才能通话。 分组交换 上面介绍过分组交换，这里不再介绍，在此说一下它的好处。 电路交换缺点很明显，两个人只要通信就占用一条物理道路，多不方便啊。但是分组交换的话，让每个人的通信数据变成一段一段的，大家一起使用一条或者多条物理道路(分组流水线)，这样道路的利用率就大大提高了。 单播，广播，多播，任播单播 一对一的通信，就如上面的固定电话。 广播 一对多的通信，比如电视观看节目，信号源向各家各户发送。 多播 和广播类似，但是接受方是指定的，不是广播距离的看电视一样，想看就能看，在多播中，是被规定好接受方的。比如群内视频，是由群里的成员可以加入。 任播 一台发送方主机从台接受方主机中选择接送方。与多播不同的是，它只能选择一个而不是多个。 看似一对多，其实还是一对一，只不过拥有了选择的对象。 就像老师(发送方)叫同学们(多个主机)回答问题，一般选择睡觉(指定的接受方)的那个。。。 域名解析就是任播，我们解析域名，从ip表中找到它真正对应的ip地址。 地址什么是地址 地址当然是记录某个事物当前处于的位置啦，在通信传输中，地址是具有唯一性的，一个地址只能指明一个事物，这其实和变成里的指针一个性质。 但是指名的事物并不代表只是一个个体，也有可能是一个团体，就像C++中某个指针指向了一个类的对象，而这个对象中又有各个成员变量。这个指针指向了一个对象，尽管这个对象中有多个成员，但这个对象依然是唯一的。 如下图，书上举了一个老师点名的例子。虽然地址指向的都可能是个群体，但是这些群体依然是唯一的。 地址的分类 这里的分类不是编程中的int指针、char指针，而是不同协议的使用的地址。 MAC地址 简单理解为电脑里网卡的唯一标识符。 IP地址 一个网络对应一台主机的地址，一个ip对应一个主机。各运营商有各自的ip范围。 端口号 你的电脑分配给某个进程的通信号，其他电脑可以通过端口号，与你电脑中对应的进程进行通信。 总结 第一章主要是介绍了通信的协议、还有数据传输的几种类型以及地址。 其实还有网关和中继器、交换机等一些偏物理的知识，只不过我就不总结了，因为做软件比较偏向传输层以上，这里仅仅看过当作了解。 这一章只是进入计网世界的预热。下一章的内容是TCP/IP的基础知识，即将进入这本书的正题。]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>知识总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[线程、 协程、 进程的简单理解]]></title>
    <url>%2F2019%2FMyLearn-ProcessAndThreadAndCoroutine%2F</url>
    <content type="text"><![CDATA[理论 ​ 在了解协程之前，我们先了解一下操作系统中的堆、 栈。 ​ 再谈谈进程和线程。其中暂不介绍上下文。 栈 ​ 在数据结构中，栈具有先进后出的特性，也就是说，将1,2,3按顺序添加到栈结构中，再依次取出数据时，数据顺序是这样的：3,2,1。 ​ 而在操作系统中，它是内存分配的一种方式，即动态分配内存。它由编译器自动分配和释放，主要用于存放函数的参数值，局部变量等等，而它的性质也遵循先进后出。 ​ 栈存放在一级缓存中，在被调用结束后会被立即释放。 堆 ​ 在数据结构中，是一种树形结构，即完全二叉树，它的特性是某节点的值都不会比父节点的值大或者小，所以常常用来实现优先队列。 ​ 而在操作系统中，它和栈一样是动态分配内存，不同的是，它由我们分配和释放，如果我们没有主动释放，会在程序结束时被回收。 ​ 重点来了，它与数据结构的堆并不具有同种特性，它的性质更接近于链表。 ​ 堆存放在二级缓存中，调用完毕并不会被系统直接回收。 进程 ​ 进程即可并发执行的程序在某个数据集合上的一切计算活动。 ​ 可以简单的认为，在电脑上打开了一个软件，运行了一款游戏，就是开启了一个进程。 进程性质 有生命周期 拥有系统资源的基本单位 进程之间可以对等的，也可以是父子结构。 进程属性 动态性：拥有生命周期 共享性：多个进程可以执行同个程序 独立性：每个进程都是OS中的一个操作实体，拥有自己的独立栈、 堆 制约性：共享资源的制约关系 并发性：单处理器可并发执行，多处理器可并行执行 进程结构 控制块：英文缩写PCB，每一个进程捆绑一个，用来存储进程的标识、 现场、 控制信息 ，同进程创建、 回收。 程序块：即进程执行的程序 核心栈： 进程在内核模式下运行时使用的堆栈， 中断或系统过程使用； 数据块：进程处理的数据空间， 包括数据、 处理函数的用户栈（用户态）和可修改的程序； 进程的创建过程 ​ 在进程列表中增加一项，然后从PCB池里申请一个空闲的PCB然后为新进程分配唯一的标识符，同时分配地址空间等等各种资源。随后初始化PCB，如标识符、 进程优先级等，然后设置就绪态，加入就绪队列。 进程的撤销过程 ​ 可分为正常和非正常撤销，也就是类似进程运行结束、 执行非法命令、 被中断等 ​ 根据被撤销进程的标识符从相应的队列中查找并移除，并把资源归还给上一级（父进程或者是OS），如果这个进程拥有子进程，那么先对子进程同样的操作，最后将PCB回收。 进程拥有的进程状态三态 七态 线程 ​ 上面介绍了进程，可以看出进程的功能十分强大，那么为什么还需要线程呢？ ​ 首先需要明确一个概念，Linux系统中甚至没有真正的线程。不过，可以认为Linux是系统的线程是内核线程，所以调度是基于线程的。 引入线程的原因 进程切换开销大 进程通信代价大 进程间的并发性力度较粗，并发度不高，并发的本质是在时间上重叠的多个逻辑流，也就是说同时运行的多个逻辑流。并发编程要解决的一个很重要的问题就是对资源的并发访问的问题，也就是共享资源的问题。而两个进程恰恰很难在逻辑上表示共享资源。 不适应并行计算和分部并行的计算需求 不适合C/S计算的要求 线程性质 在引入线程这个概念之后，线程成为了CPU调度和分配的最小单位。 线程是进程的组成部分，是能够并发的实体。 线程不是拥有资源的单位，所以挂起状态对于线程没有任何意义。因此挂起操作不是线程级而是进程级状态。 线程可以创建另一个线程。但都是对等结构不是父子结构。 线程结构 线程控制块：英文缩写TCB，与进程的控制块相似，但是由进程操控。 线程用户栈 线程核心栈 线程与进程的关系 ​ 可以理解为线程是进程的一部分。一个线程只能属于一个进程，而一个进程可以有多个线程。线程是进程的一部分，所以线程有的时候被称为是轻权进程或者轻量级进程。 ​ 线程可以分为两部分：资源集合和线程集合。进程要支持线程的运行，并为线程提供虚拟地址空间和各种资源。 线程与进程的区别 进程之间的通信，只能通过管道、 信号的方式通信。而线程使用的资源来源于进程的共享，通信起来并没有进程这么麻烦。 一个线程只能属于一个进程，但是一个进程可以拥有多个线程。多线程处理就是允许一个进程中在同一时刻执行多个任务。 进程有自己的不共享堆，不共享栈，线程有自己的不共享栈和共享堆。 进程是拥有资源的单位，线程是调度和分配的最小单位。 多线程容易引发的问题线程安全 ​ 我们都知道线程共享使用的是来自进程的资源，那么在多个线程同时访问资源时，同时对某个资源进行操作，就会发生一些错误。 ​ 比如买票，就剩最后一张票了，两个线程同时买票，都发现了最后一张，都买掉了它，那么这个时候，系统还剩-1张票。 ​ 显然这不是我们想看到的情况。 ​ 为了解决这种问题，出现了互斥锁、信号量的等等解决方案。因为介绍这些内容篇幅过长可以自行百度。 死锁 ​ 死锁是指多个线程因竞争资源而造成的一种僵局（互相等待），经典的问题如哲学家就餐问题,因为死锁问题可以另开篇幅，在这里同样不再描述。 协程引入协程的原因 ​ 线程其实并没有提高CPU的运行速率，而只是提高了运行效率，同时会很吃CPU的性能。 涉及到同步、异步、互斥锁。 涉及到线程阻塞状态和可运行状态之间的切换。 涉及到线程上下文的切换。 可见一个进程内多个线程运作的时候进行以上操作会非常消耗性能。 协程性质 如同操作系统拥有多个进程，进程拥有多个线程一样，线程拥有多个协程。 协程不是被操作系统内核所管理，而完全是由程序所控制（也就是在用户态执行）。 协程是在一个线程中，每个协程对CPU进行分时处理。 协程即与多线程情况下的线程比较类似：有自己的堆栈，自己的局部变量，有自己的指令指针，但与其它协同程序共享全局变量等很多信息。 协程造成阻塞是，会影响整个线程。 线程和协程的区别 协程 :同一时间只能执行某个协程。开辟多个协程开销不大。协程适合对某任务进行分时处理。 线程: 同一时间可以同时执行多个线程。开辟多条线程开销很大。线程适合多任务同时处理。 线程和协同程序的主要不同在于：在多处理器情况下，从概念上来讲多线程程序同时运行多个线程；而协同程序是通过协作来完成，在任一指定时刻只有一个协同程序在运行，并且这个正在运行的协同程序只在必要时才会被挂起。 协程需要保证是非堵塞的且没有相互依赖，协程基本上不能同步通讯，多采用一步的消息通讯，效率比较高。 Unity3D中的线程、协程创建的线程无法调用UnityAPI ​ Unity是单线程设计的游戏引擎(很多都是，因为游戏大部分都是主循环结构)，它有一个负责主循环的主线程。基于MonoBehavior，因此游戏脚本拥有严格的生命周期。 ​ 尝试在Unity中创建线程后，很容易发现，在我们创建的线程运行函数中，无法调用Unity引擎提供的各种API，以及它提供的特殊对象。例如组件，但是常用的如int、struct类型是允许使用的。 原因 ​ 为了保证逻辑和画面按照严格的顺序更新。 无法使用UnityAPI，那么创建线程还有什么用 ​ 如果不是画面更新，也不是常规的逻辑更新（指包括AI、物理碰撞、角色控制这些），而是一些其他后台任务，比如网络传输： ​ 正如TCP或者UDP协议的传输，在TCP中，我们需要确保长链接，需要一直接受发送端发送过来的数据，如果我们把它写在主线程下，会发生什么。我们在游戏拥有聊天服务这个功能，假设使用阻塞式TCP协议，那么我们打开与某玩家的聊天窗口，向其发送数据，然后就没有然后了，因为我们必须等待对方的回复。 ​ 而我们使用多线程就可以解决了。新增线程专门用于网络通讯，而主线程根据接受到的信息负责更新逻辑以及画面。 可我想对我的游戏进行调用UnityAPI的并发或者异步操作，怎么办——使用协程 ​ 协程，即协作式程序，其思想是一系列互相依赖的协程间依次使用CPU，每次只有一个协程工作，而其他协程处于休眠状态。协程实际上是在一个线程中，只不过每个协程对CUP进行分时，协程可以访问和使用unity的所有方法和component. ​ 协程一般都是在一次Update之后被使用，协程在每次使用后会被挂起，等待下一次的使用。那么它的作用是什么呢。 ​ 比如，我们需要异步加载场景上的所有预置体，比如制作了一款关卡场景中物体比较多的游戏，我们需要在关卡开始前加载所有预置体(为了更能提现协程的作用，在这里先不考虑缓存池优化)，假设预置体真的很多，把加载都放在Start中执行，那么玩家可能会卡顿一段时间才能进入到游戏循环中，而我们使用协程，协程每次加载部分预置体，在Start中开启协程，那么协程会被执行一次，这个时候加载了部分预置体，再进行一次Update循环后，协程又一次被调用，又加载了部分预置体，而一秒中调用的Update次数足够多，所以并不会产生卡顿的感觉。 总结 进程是操作系统拥有资源的单位，一个操作系统可拥有多个进程，拥有独立的栈和堆。通常对应一个运行的程序。 线程是CPU调度和分配的最小单位，一个进程可以拥有多个线程。拥有独立的栈和共享的堆(来自进程)。通常对应一个程序中的主要功能和并发功能。 协程可以说是用户态的轻量级线程，一个线程可以拥有多个协程。拥有用户栈和共享的堆(来自线程)。通常应用于异步中。 参考文献]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>知识总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[图论]]></title>
    <url>%2F2019%2FMyAlgorithm-edge%2F</url>
    <content type="text"><![CDATA[最短路径问题 从文字上理解，就是求哪到哪儿的路径最短，题目会给多个点，点与点之间是否相连，权值是多少。一般来说需要我们计算一个节点到其他所有节点的最短路径。然后输出源点到某点的最短路径。 Dijkstra算法 能解决的问题：无负边的单源最短路 在带权图 G = (V, E) 中，每条边都有一个权值w[i]。路径的长度为路径上所有边权之和。 求源点 s到图中其余各顶点的最短路径。 概述 解决单源最短路径问题常用 Dijkstra 算法，用于计算一个顶点到其他所有顶点的最短路径。Dijkstra 算法的主要特点是以起点为中心，逐层向外扩展，每次都会取一个最近点继续扩展，直到取完所有点为止。 算法流程 我们定义带权图 G所有顶点的集合为V，接着我们再定义已确定从源点出发的最短路径的顶点集合为 U，初始集合 U 为空，记从源点 s 出发到每个顶点 vv 的距离为 dist_v，初始 dist_s=0。接着执行以下操作： 从 V-U 中找出一个距离源点最近的顶点 v，将 v 加入集合 U，并用 dist_v 和顶点 v 连出的边来更新和 v 相邻的、不在集合 U 中的顶点的 dist； 重复第一步操作，直到 V=U或找不出一个从 s出发有路径到达的顶点，算法结束。如果最后V≠U，说明有顶点无法从源点到达；否则每个 dist_i表示从 出发到顶点i 的最短距离。 算法优化 Dijkstra最简单的版本就是使用一个数组当作上述的集合U，每一次遍历，找出目前最新且最短的边权，以它为新的源点，同时更新与它相关的最短路径的值。 我们可以使用一个优先队列去代替数组承担集合U，这样可以保证每次取出队列头部的边权当前最小的。省去了遍历和对比的时间。 例子 如上图 ，源点为左上角，黄色点内的数字代表源点到他们的距离。初始值都是无穷大99。 先push源点，然后开始探索图，取得队列头，即源点，开始遍历，源点到右边的点边权为2，比之前的99要小，那么更新距离，同时把这个点push进去，同理对其他连接的两个点进行操作。更新后的最新距离分别为9和6，当前优先队列的值为：2,6,9。这个时候发现没有连接其他点了，结束当前循环。此时的图为第一行第二列。 因为是优先队列，我们取得的头部是源点距离为2的点，也是除了源点到自身以外当前最短的点。同样进行上述操作。 因为每一次循环，已经确定过最短路径的点不会再被push到优先队列中，所以在优先队列为空的时候，我们已经获得了源点到各点的最短距离。 如果发现到某点的最短距离为99(无穷大)，说明无法到达这个点。 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465const int maxn=1e4+1;//存储from点,to点,和权值//pair是std中的一种数据结构，存储两个数据，分别用first、second取得。//可以用结构体代替vector&lt;pair&lt;int,int&gt; &gt;Edge[maxn];//存储路径长度。int s[maxn];//根据节点数初始化。void init(int n)&#123; for(int i=0;i&lt;=n;i++) &#123; Edge[i].clear(); //因为求的是最小，所以初始值应该是无穷大，方便对比 s[i]=1e9; &#125;&#125;void dijkstraByQueue()&#123; //点数目，边数目，源点 int n,e,sourse; cin&gt;&gt;n&gt;&gt;e&gt;&gt;sourse; //初始化 init(n); //from,to,worth int x,y,w; for(int i=0;i&lt;e;i++) &#123; cin&gt;&gt;x&gt;&gt;y&gt;&gt;w; //x-&gt;y=w Edge[x].push_back(make_pair(y,w)); //如果是无向图，那么反过来添加一次。 //Edge[y].push_back(make_pair(x,w)); &#125; //源点到自身的路径肯定为0 s[sourse]=0; //优先队列 ，存储边权，目标点(to)，优先队列会默认按照边权从大到小排序 priority_queue&lt;pair&lt;int,int&gt;&gt; Q; //把源点到自身的距离(0)，以及自己的节点push到优先队列中 Q.push(make_pair(0,sourse)); //开始探索地图 while(!Q.empty()) &#123; //获取当前相对最新点，然后从优先队列中弹出 int cur=Q.top().second; Q.pop(); //遍历当前点所连接的点(to)，判断他们之间的边权 for(int i=0;i&lt;Edge[cur].size();i++) &#123; //取得点 int target=Edge[cur][i].first; //判断当前记录的 源点到目标点的距离s[target] 和当前最新点与目标点的距离Edge[cur][i].second+s[cur]长度关系 if(s[target]&gt;Edge[cur][i].second+s[cur]) &#123; //如果发现当前记录并不是最短距离，那么就更新它 s[target]=Edge[cur][i].second+s[cur]; //把到达这个点的边权和点下标push到优先队列中，因为优先队列默认是按大到小排序，我们的需求是小到大，所以推入-1*边权就可以了。 //如果使用自定义的结构体，可以另写一个cmp。 Q.push(make_pair(-1*s[target],target)); &#125; &#125; &#125; //当上面的队列为空的时候，说明我们以及探索完整个图了，此时我们的s[]储存的就是源点到其他点的最短距离了。 for(int i=1;i&lt;=n;i++) cout&lt;&lt;s[i]&lt;&lt;endl;&#125; SPFA算法 能解决的问题：有负边的单源最短路 概述 其实 SPFA 本质是 Bellman-ford 算法的队列优化。由国内段凡丁教授发表，大家可以自行百度查阅相关信息。 如果没有负权边的情况下还是使用堆/优先队列优化的dijkstra吧。 算法流程 在 SPFA 算法中，使用 d_i表示从源点到顶点 i 的最短路，额外用一个队列来保存即将进行拓展的顶点列表，并用 inq_i 来标识顶点 i是不是在队列中。 初始队列中仅包含源点，且源点 s 的 d_s=0。 取出队列头顶点 u，扫描从顶点 u 出发的每条边，设每条边的另一端为 v，边 &lt;u,v&gt; 权值为 w，若 d_u+w&lt;d_v，则 将 d_v修改为 d_u+w 若 vv不在队列中，则将 v入队 重复步骤 2 直到队列为空最终 dd数组就是从源点出发到每个顶点的最短路距离。如果一个顶点从没有入队，则说明没有从源点到该顶点的路径。 负环判断 在进行 SPFA 时，用一个数组 cnt_i 来标记每个顶点入队次数。如果一个顶点入队次数 cnt_i大于顶点总数 n，则表示该图中包含负环。 代码 在这里贴下最简单的spfa实现，至于lll和slf优化在日后了解后再更新。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273vector&lt;pair&lt;int,int&gt; &gt;Edge[maxn];//多出的inQueue是为了判断某点是否在队列中。int s[maxn],inQueue[maxn];//初始化void init(int n)&#123; for(int i=0;i&lt;=n;i++) &#123; Edge[i].clear(); s[i]=1e9; inQueue[i]=0; &#125;&#125;void spfa()&#123; int n,e,source; int x,y,w; //记录被推入队列的次数，如果超过点数目n，说明有负环。 int pushCount[maxn]; cin&gt;&gt;n&gt;&gt;e&gt;&gt;source; init(n); for(int i=0;i&lt;e;i++) &#123; cin&gt;&gt;x&gt;&gt;y&gt;&gt;w; Edge[x].push_back(make_pair(y,w)); //初始化推入次数为0 pushCount[x]=0; &#125; //在这里使用的是队列不是优先队列，lll和slf优化可以使用deque queue&lt;int&gt; Q; //到自身距离为0 s[source]=0; //推入次数更新 pushCount[source]=1; //推入 Q.push(source); //开始探索 while(!Q.empty()) &#123; //取队头 int cur=Q.front(); Q.pop(); //此时队头对应的点已经不在队列里了。 inQueue[cur]=0; //和上面的dijkstra算法一样进行松弛处理 for(int i=0;i&lt;Edge[cur].size();i++) &#123; int target=Edge[cur][i].first; if(s[target]&gt;Edge[cur][i].second+s[cur]) &#123; //更新最短路径 s[target]=Edge[cur][i].second+s[cur]; //如果这个点依然在队列里，那么就不需要推入 if(inQueue[target]) continue; //如果推入此时大于点的数目n，说明有负环 if(++pushCount[target]&gt;=n) &#123; cout&lt;&lt;"-1"&lt;&lt;endl; return; &#125; //再此将它推入 inQueue[target]=1; Q.push(target); &#125; &#125; &#125; //输出最短距离 for(int i=0;i&lt;n;i++) cout&lt;&lt;s[i]&lt;&lt;endl;&#125; Floyd算法 能解决的问题：多源点最短路径 时间复杂度很高，毕竟要求出所有点到其他点的最短距离。 概述 Floyd 算法是一种利用动态规划的思想、计算给定的带权图中任意两个顶点之间最短路径的算法。相比于重复执行多次单源最短路算法，Floyd 具有高效、代码简短的优势，在解决图论最短路题目时比较常用。 算法流程 Floyd 的基本思想是：对于一个顶点个数为 n 的有向图，并有一个n×n 的E[][]，其中矩阵横列下标相等，代表自身到自身，对应的值应为0对于其余任意两个顶点 i,j若它们之间存在有向边，则以此边权上的权值作为E[i][j]=w；若两个顶点i,j 之间不存在有向边，则E[i][j]=INF。对于循环阶段 ，尝试增加一个中继点 k，如果通过中间顶点使得最短路径变短了，就更新结果。累加 k，重复遍历所有可能成为中继的点下标，直到 k=n。算法结束后，矩阵 E[][]中的元素就代表着图中任意两点之间的最短路径长度。 代码1234567891011121314151617181920212223242526272829303132333435363738394041const int inf = 0x3f3f3f3f;const int maxn=1e4+1;//用矩阵存储距离int g[maxn][maxn]; // 初始化void init() &#123; for (int i = 0; i &lt; n; ++i) &#123; for (int j = 0; j &lt; n; ++j) &#123; if (i == j) &#123; //到自身的距离为0 g[i][j] = 0; &#125; else &#123; //初始化为无穷大 g[i][j] = inf; &#125; &#125; &#125;&#125;void floyd() &#123; int n,e; int x,y,w; cin&gt;&gt;n&gt;&gt;e; for(int i=0;i&lt;e;i++) &#123; cin&gt;&gt;x&gt;&gt;y&gt;&gt;w; //x到y的边权为w g[x][y]=w; &#125; //三重循环，分别代表中继点k、当前点i(from)，目标点j(to) for (int k = 0; k &lt; n; ++k) &#123; for (int i = 0; i &lt; n; ++i) &#123; for (int j = 0; j &lt; n; ++j) &#123; //如果i到k+k到j的距离比原来i直接到j的距离还短，就更新 if (g[i][k] + g[k][j] &lt; g[i][j]) &#123; g[i][j] = g[i][k] + g[k][j]; &#125; &#125; &#125; &#125;&#125; 最小生成树问题 一个有 n 个结点的连通图的生成树是原图的极小连通子图，且包含原图中的所有 n 个结点，并且有保持图连通的最少的边。 一般常见题目是求道路如何建设，使得各个位置能够互通，并且花费最少。 prim算法概述 Prim算法求最小生成树的时候和边数无关，和顶点数有关，所以适合求解稠密网的最小生成树。 每一次从已经纳入最小生成树的点出发，找到所连接的未纳入的最短边权点，将其纳入生成树中，直到遍历所有点。 算法流程 将一个图分为两部分，一部分归为点集U，一部分归为点集V，U的初始集合为{V1}，V的初始集合为{ALL-V1}。 针对U开始找U中各节点的所有关联的边的权值最小的那个，然后将关联的节点Vi加入到U中，并且从V中删除（注意不能形成环）。 递归执行步骤2，直到V中的集合为空。 U中所有节点构成的树就是最小生成树。 例子 如上图，我们以点为单位，从V1点出发，找到它连接的点V2、V3、V4，其中最短边权为V1-&gt;V3=1，所以我们将V3纳入最小生成树(算法流程所述的集合U)，此时U为{V1、V3}。 然后从V1、V3这个最小生成树所连接的点继续寻找，找到V3-&gt;V6的边权最小，为4，那么纳入最小生成树，继续以上操作，直到遍历完毕。 如果遍历结束后，发现有些点没被访问，就说明无法构成生成树。 代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364const int maxn = 4e+1;//和前面的算法一样使用vector&lt;pair&lt;int,int&gt; &gt;//pair存储to,value//G[i]的i代表fromvector&lt;pair&lt;int,int&gt; &gt;G[maxn];int vis[maxn];void Prim()&#123; int n,e,x,y,z; //最小生成树的权值 int res=0; //输入点、边的数目 cin&gt;&gt;n&gt;&gt;e; for(int i=0;i&lt;e;i++) &#123; cin&gt;&gt;x&gt;&gt;y&gt;&gt;z; //一般都是求无向图的最小生成树，有向图可以使用最小树形图。 //-1*z 是因为优先队列默认从大到小，我们需要从小到大，随意推入取负的值。 //自己实现结构体可以自己另写cmp G[x].push_back(make_pair(y,-1*z)); G[y].push_back(make_pair(x,-1*z)); &#125; //从第一个点开始，下标为0，或者定义为1，后面也要从1开始。 vis[0]=1; priority_queue&lt;pair&lt;int,int&gt; &gt; Q; for(int i=0;i&lt;G[0].size();i++) &#123; //遍历连接到的点，推入优先队列中，会自动按边权值排序。 Q.push(G[0][i]); &#125; //开始探索 while(!Q.empty()) &#123; //取得队头的点的连接目标点to和权值value int to=Q.top().first; int value=Q.top().second; ///弹出 Q.pop(); //如果已经访问过，也就是说，已经在当前的生成树中/集合U中 if(vis[to]) continue; //否则标记以访问/纳入 vis[to]=1; //加入最小生成树的权值，因为之前我们把每条边的权值当作负数推入，这里减到而不是加上，--得+ res-=value; //遍历当前点可以到达的所有点，推入优先队列。 for(int i=0;i&lt;G[to].size();i++) &#123; Q.push(G[to][i]); &#125; &#125; //如果有点没访问，说明无法构成最小生成树 for(int i=0;i&lt;n;i++) if(vis[i]==0) &#123; cout&lt;&lt;-1&lt;&lt;endl; return; &#125; //输出花费 cout&lt;&lt;res&lt;&lt;endl;&#125; Kruskal算法概述 与prim相反，kruskal算法的注重点是边而不是点，它每次取图中相对权值最小的边，然后将边的两端点纳入集合中。而它基于并查集的思想。（什么是并查集) 算法流程 创建一个数组，为每个节点存储自身的父节点，初始化为自身。也就是刚开始，每个人只指向自己。 我们将边权按从小到大的顺序，排序好边权和对应的两端点。 我们取当前最小边权，把其两端点合并，也就是让他们的存储父节点的数组对应的值指向同一个节点，换句话说，这就是一个两个点组合成的子树了。 一直到所有点都纳入那个子树。 注意的是，合并两个点时，不是简单的赋值点下标，而是应该找到点的最终父节点，再把其赋值给另一端点的数组索引中。 例子 下图是kruskal算法，因为和prim算法用的是同一个原图，所以一起展示。 将边权排序得：1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;5-&gt;5-&gt;6-&gt;6 这里采用按秩合并。 我们取1，它的两端点是V1、V3 ，将他们合并 {V1,V3}，他们此时记录父节点的数组f[V1]=f[V3]=V1; 同理取2，它的两端点是V4、V6， 将他们合并{V4，V6},他们此时记录父节点的数组f[V4]=f[V6]=V4; 同理取3，它的两端点是V2、V5， 将他们合并{V2，V5},他们此时记录父节点的数组f[V2]=f[V5]=V2; 同理取4，它的两端点是V3、V6， 将他们合并{V3，V6},注意，这时候，V3的父节点即f[V3]的值为V1，而V6的父节点即f[V6]的值为V4，将其赋值，得f[V3]=f[V4]=V1,而V6的父节点依然为V4，但是V6的祖父节点f[V4]是V1了。合并的集合也成{V1、V3 、V6、V4} 此时树为：V1-&gt;V3 ​ \-&gt;V4-&gt;V6 同理取5，把端点V3的祖父节点赋值给另一个断点的祖父节点f[V2]，最后得树： V1-&gt;V3-&gt;V2-&gt;V5 ​ \-&gt;V4-&gt;V6 代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788const int maxn=1e5+1;//记录父亲节点int father[maxn];//因为我们需要对边权排序，并且需要获得两端点的下标，那么之前的vector&lt;pair&lt;,&gt;&gt; 在这里就用处不大了。struct Edge&#123; int from, to; long long value; //重写操作符，让它进入优先队列时自动按从小到大排序 friend bool operator &lt;(const Edge x,const Edge y) &#123; return x.value&gt;y.value; &#125;&#125;;void init(int n)&#123; for(int i=0;i&lt;=n;i++) &#123; //初始化，让所有点的父节点为自身 father[i]=i; &#125;&#125;//查找组父节点int findRoot(int target)&#123;//如果父节点是自身，说明已经到头了，也就是找到祖父了。 return father[target]==target ?target:findRoot(father[target]);&#125;//判断两个点x和y是不是指向同一个父亲节点，也就是是否在同一个集合中bool isUnion(int x,int y)&#123; return findRoot(x)==findRoot(y);&#125;//整合void comeTogeter(int x,int y)&#123; if(isUnion(x,y)) return ; //把x的祖父节点的父节点设置为y的祖父节点。 father[findRoot(x)]=findRoot(y);&#125;void kruskal()&#123; //点、边 int n,e; //to from worth int x,y,w; //花费 int res=0; //临时Edge对象 cin&gt;&gt;n&gt;&gt;e; //初始化 init(n); priority_queue&lt;Edge&gt; Q; for(int i=0;i&lt;e;i++) &#123; cin&gt;&gt;x&gt;&gt;y&gt;&gt;w; Edge temp; temp.from=x; temp.to=y; temp.value=w; Q.push(temp); &#125; Edge temp; while(!Q.empty()) &#123; //取队列头，C++提供浅拷贝，直接赋值就好了 temp=Q.top(); Q.pop(); //判断是否在同个集合里，如果在就跳过 if(isUnion(temp.from,temp.to)) continue; //不在，那么整合 comeTogeter(temp.from,temp.to); //加入边权 res+=temp.value; &#125; //判断是不是所有点都在一个集合/生成树中 for(int i=1;i&lt;n;i++) if(!isUnion(0,i)) &#123; res=-1; break; &#125; cout&lt;&lt;res&lt;&lt;endl;&#125; 最大匹配问题 把所有点分成两个左右集合，左右集合里的点可以与对面集合的多个点有边，但不与同集合的点有边。 那么一般会问你求最大匹配和完美匹配。 什么是最大匹配？ ​ 上面谈到一个点可以与对面多个点有边，所以有可能出现左集合中的两点与对面集合的某点都有一条边，那么怎么分配，才能尽量让左右集合里的点一一对应且不重复呢。 ​ 网上很多都是拿男女生牵手的例子，每个男生都对自己心仪的女生们发出牵手请求，如何安排使得尽量满足每个男生都能牵到心仪女生的手，并且不会出现两个男生抢一个女生的 情况。求能牵手成功的最大数量，就是最大匹配。 ​ 什么时完美匹配？ ​ 基于最大匹配，左右集合的所有点都与对面集合有且只有一条边。 ​ 如图Fig.4 ，1-7；2-5；3-6‘4-8；一一对应且不占用同个右边的点。 匈牙利算法概述 发现概述不起来，直接看算法流程吧0 0 算法流程 假设有集合UX、UY，其中UX有多个点连接UY中的n个点，n&gt;=1 从UX的点xi开始遍历，找到它连接的第一个对面点yj，如果这个对面点yj没有被连接，那么我们将该点xi和对面点yi连接。 如果对面点yj被连接了，这时候并不是直接放弃，我们获取对面点yj所连接的点xk,这时候我们对xk进行上述操作，也就是说，我们要找到xk能连接的下一个对面点(抛开yj) ​ 1.如果找不到，说明xk只能连接yj，那么xi只能找它的下一个可连接点。 ​ 2.如果找得到，那么让xk放弃yj，连接其他的点，让xi与yj连接。 OK，这就是主要流程，我们对所有UX中的点按顺序进行上述操作，直到最后一个点，我们就可以找出最大匹配的数量了。 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071//邻接矩阵 值为1 代表i和j可以连接int e[maxn][maxn];//记录当前X集合和Y集合里某点连接的点下标int fromX[maxn],fromY[maxn];//是否访问过int vis[maxn];//X集合的数目和Y的int nX,nY;//尝试搜寻连接 //x：尝试连接的点下标bool line(int x)&#123; //从1到nY遍历，也可以从0到ny-1，看输入情况 for(int y=1;y&lt;=nY;y++) &#123; //如果他们可以连接 并且 Y集合的y点没有被访问过(被连接过) if(e[x][y]&amp;&amp;!vis[y]) &#123; //访问y vis[y]=1; //如果y连接的点=-1，-1代表还没和任何点连接 //或者连接了某点 调用line为这个点递归查找是否可以连接其他点 if(fromY[y]==-1||line(fromY[y])) &#123; //让x和y连接，并在fromX/Y中登记连接对象的下标 fromX[x]=y; fromY[y]=x; //返回可以连接 //注意 如果这个点y是第一次被访问，此时返回true代表它第一次被连接 //如果是被递归调用，则代表它以被允许连接的下一个点连接 return true; &#125; &#125; &#125; //返回不可以连接||不可以被下一个点连接 return false;&#125;//最大匹配int maxMatch()&#123; //连接数n x集合数 y集合数 int n,x,y; //最大匹配的数值 int sum=0; memset(fromX,-1,sizeof(fromX)); memset(fromY,-1,sizeof(fromY)); memset(e,0,sizeof(e)); cin&gt;&gt;n; cin&gt;&gt;nX&gt;&gt;xY; for(int i=0;i&lt;n;i++) &#123; cin&gt;&gt;x&gt;&gt;y; //可以连接 为1 e[x][y]=1; &#125; for(int i=1;i&lt;=nX;i++) &#123; //如果x集合中的i还没有和对面连接 if(fromX[i]==-1) &#123; //格式化访问数组vis 这个是精髓 因为每一次调用line，都可能造成第一次连接的那个点的重新连接，所以vis数组是要被格式化的。 memset(vis,0,sizeof(vis)); //如果可以连接 那么数目加1 if(line(i)) sum++;; &#125; &#125; //如果sum=nX||sum=nY （看题目要求，以X集合为主还是Y集合为主） //如果X/Y集合的所有点都成功连接了唯一的对面集合的点 那么就是完美匹配~ cout&lt;&lt;sum&lt;&lt;endl;&#125; 参考文章]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>算法学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[大整数字符串的加减乘(含负数)]]></title>
    <url>%2F2019%2FMyAlgorithm-bigNum%2F</url>
    <content type="text"><![CDATA[什么是大数 首先计算机的数据类型所能表示的范围都是有限的。 表数据来源于网络 Type Size 数值范围 无值型void 0 byte 无值域 布尔型bool 1 byte true false 有符号短整型short [int] /signed short [int] 2 byte -32768~32767 无符号短整型unsigned short [int] 2 byte 0~65535 有符号整型int /signed [int] 4 byte -2147483648~2147483647 无符号整型unsigned [int] 4 byte 0~4294967295 有符号长整型long [int]/signed long [int] 4 byte -2147483648~2147483647 无符号长整型unsigned long [int] 4 byte 0~4294967295 long long 8 byte 0~18446744073709552000 有符号字符型char/signed char 1 byte -128~127 无符号字符型unsigned char 1 byte 0~255 宽字符型wchar_t (unsigned short.) 2 byte 0~65535 单精度浮点型float 4 byte -3.4E-38~3.4E+38 双精度浮点型double 8 byte 1.7E-308~1.7E+308 long double 8 byte 而比这些数值范围更大、或者是计算之后超出数值范围的数值都可以成为大数，当我们要对位数达到上百位的大整数进行计算，这些数据类型显然不能满足我们的要求，因此我们需要通过算法来实现这些功能。 正数加法大体思路 思想是采用用字符串表示大数。末尾逐位相加，超十进位。 计算前被加数比加数长度短 为了方便计算，我们在接受到两个需要相加的正整数时，应该将更长位数的大数置上，短的置下。 计算过程1.长度不扩充情况197+13计算 面向下面的大数，从末位开始与上置位的每一位对应数值相加。即表中的下标2。 当前游标 a 1 9 7 b 1 3 ​ a[2]+b[2] =&gt; 7+3=10，发现计算点相加后大于等于10而造成了进位，那么我们应该自身减10，通过为上置位的进位点加1，即9+1=10。至于处理后进位点是否也大于10，我们无需处理，因为我们只需要关心当前位的运算，以及对前一位的影响（即表中的计算点和进位点）。 假设进位点同时也大于10，那么我们在它变成当前点时再进行计算进位就好了。 当前游标 进位点 计算点 a 1 9-&gt;10 7-&gt;10-&gt;0 b 1 3 ​ 计算点计算，10+1=11， 计算点自身减10，发现需要进位，进位点加1。得到结果210。 如果进位时，发现进位点不存在，那么意味着相加后，长度发生了变化，这个时候，如果只是相加运算，我们只需要在上置位字符串a前方加一个’1’就好了，为什么就是’1’呢，因为保证计算点的数值是个数位，无论再怎么大也不会产生进位点进2位的情况。 但是，如果需要被大数相乘的函数调用，就不能简单的加1了，因为相乘后可能出现进位点的数值超过1.当然是为了以防万一，但感觉似乎不会产生进位+2以上的情况。。。 当前游标 进位点 计算点 a 1-&gt;2 10-&gt;11-&gt;1 0 b 1 3 2.长度扩充情况99+1计算 当前游标 进位点 计算点 a 9 9 b 1 a[1]+b[1]=&gt;9+1=10，计算点自身减10，进位点进位，9+1=10，10-10=0 当前游标 进位点 计算点 a 9-&gt;10 9-&gt;10-&gt;0 b 1 计算点a[0]+b[0]=&gt; 10+0=0,，计算点自身减10，10-10=0,进位点进位，发现超出长度，此时在字符串首加’1’，得到结果100。 当前游标 进位点 计算点 a 1 10-&gt;0 0 b 1 代码12345678910111213141516171819202122232425262728293031string bigNumAdd(string a,string b)&#123; //把长的字符串上置位，即换成a if(a.length()&lt;b.length()) &#123; //交换 swap(a,b); &#125; //计算点下标从长度-1开始，取两个i、j变量指向计算点，是为了判断是否结束以及是否超出 for(int i=a.length()-1,j=b.length()-1;i&gt;=0;i--,j--) &#123; //j是字符串b的计算点下标，如果依然大于0，说明还在长度内，可以正常计算 //正常计算的时候利用ascii码性质-'0'获得实际上增加的数值 //如果超出了就加0，即不变 a[i]+=(j&gt;=0?b[j]-'0':0); //发现计算点大于10，需要进位 if(a[i]-'0'&gt;=10) &#123; //如果计算点在a中的位置不是首位，那么进位点正常加上进位数 if(i) a[i-1]+=((a[i]-'0')/10); //如果是首位，也就是说，进位点超出了原本的长度，那么我们在a字符串这里加上进位的值就好了 else a=(char)(((a[i]-'0')/10)+'0')+a; //自身余10 a[i]=((a[i]-'0')%10)+'0'; &#125; &#125; return a;&#125; 减法大体思路 关键思路和加法差别不大，只需要在对应的操作更改以下就好了，当然，在这之前需要对被减数和减数。 计算前1.被减数为负数 由 -a-b = -(a+b) ，其中a&gt;0 得 我们将被减数的负号去掉，然后把被减数和减数当作两个正整数相加，得到的结果加上符号即可。 直接调用上面写的相加函数就好了。 2.被减数是正数 这时候我们要考虑被减数和减数他们的长度关系了,如果被减数长度比减数小，那么结果必然是负数。 由 a-b = –(b-a)，其中a&gt;0 得 我们将被减数和减数交换，让长的减数成为被减数，然后在结果前加上负号。 计算过程100-1计算 当前游标 借位点 计算点 a 1 0 0 b 1 a[2]-b[2]=&gt;0-1=-1,，计算点发现小于0，将自身取绝对值,，借位点借位，借位点减1; 当前游标 借位点 计算点 a 1 0-&gt;-9 0-&gt;-9-&gt;9 b 1 a[1]-b[1]=&gt;9-0=-9,，计算点发现小于0，将自身取绝对值,，借位点借位，借位点减1; 当前游标 借位点 计算点 a 1-&gt;0 -9-&gt;9 9 b 0 这个时候，发现结果的有效长度应该由3变为2，那么我们将第一个字符串元素去掉即可。 当前游标 借位点 计算点 a 9 9 b 0 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354string bigNumDel(string a,string b)&#123; //判断结果是不是负数，根据这个来判断是否在字符串前面加'-' bool isFushu=false; //情况1，被减数是负数，我们将其取正，两数相加，再加上负号 if(a[0]=='-') &#123; a.erase(a.begin()); isFushu=true; return '-'+bigNumAdd(a,b); &#125; //情况2，判断长度，如果被减数短，那么交换，结果必为负数 if(a.length()&lt;b.length()) &#123; isFushu=true; swap(a,b); &#125; //与加法的遍历方法一致 for(int i=a.length()-1,j=b.length()-1;i&gt;=0;i--,j--) &#123; //与加法的运算一致 a[i]-=(j&gt;=0?b[j]-'0':0); //如果小于0 if(a[i]&lt;'0') &#123; //取正数，为什么是加10呢？ 举个例子 //a[i]='0'-1 即 数值结果为-9 取正应该得9 //a[i]+=10 -&gt;'0'-1+10= '0'+9 ='9' a[i]=a[i]+10; //如果还在有效长度内 if(i) &#123; //借位 a[i-1]--; &#125; //否则不在有效长度内 else if(j==0) &#123; //结果为负数 isFushu=true; &#125; &#125; &#125; //开始去首位0操作 if(a[0]=='0') &#123; while(a[0]=='0') &#123; a.erase(a.begin()); &#125; &#125; //判断是否负数来加符号 return isFushu?'-'+a:a;&#125; 乘法大体思路 相信大部分人首算乘法的时候，都习惯从末尾开始乘，然后进位，但是要仔细考虑，进位之后，得到的数据应该缓存起来，最后相加而不是直接在原字符串上改变进位点的数值。也就是说 567 * 3 =21+180+1500 . 上面这种末尾相乘方法其实效率并不高，每个数字之间相乘的结果都要缓存一次，而其实我们只需要首位相乘就可以解决多次缓存的问题了，即从ab 中，对a的首位开始进行乘法运算，因为从前往后运算，计算点影响的值只会是前一位进位点，后面的都不会被影响到，所以只需要新建一个临时字符串c赋值a的元素，然后直接在c上更改就好。 也就是 567 3 =1701 计算过程计算前 乘法运算也需要和前两种运算一样，要求长度更长的置上方。 1.统计两个乘数是否为负数 负负得正，正负得负，将负号统计并且移除，在最后结果上根据情况加负号。 2.非特殊情况 新建一个字符串res，用于存储结果，然后在b的每位数字开始相乘时，新建一个临时字符串，存储这个数值对a乘法后的结果，然后加入res中。 当前游标 res a 4 5 7 b 3 4 temp 4 5 6 为了方便演示，我们从b的首位开始逐个对照a的首位开始算，3*4=12，先把2存储在temp的对应位置中。 在代码中，无论从b的首位还是末位开始遍历，只要从a的首位开始计算就行，只要加’0’的次数正确，结果不变。 当前游标 进位点 计算点 a 4 5 6 b 3 4 temp 4-&gt;2 5 6 然后12是大于10的，这时候我们需要在temp字符串前加入需要进位的数值 ，即 ‘1’。 当前游标 进位点 计算点 a 4 5 7 b 3 4 temp 1 2 5 6 接着对a的下一位进行运算，即3*5=15，对应计算点的temp数值改成5，进位点进位1。 当前游标 进位点 计算点 a 4 5 7 b 3 4 temp 1 2-&gt;3 5-&gt;5 6 同理，对a的下一位继续运算，即3*7=21，对应计算点的temp数值改成1，进位点进位2。 当前游标 进位点 计算点 a 4 5 7 b 3 4 temp 1 3 5-&gt;7 6-&gt;1 此时temp字符串的值应为’1’ ‘3’ ‘7’ ‘1‘，重点来了，我们应该记住在b字符串运算位距离末位的值，随后根据这个值，对temp末位逐个加’0’ 因为例子中b长度为2，当前从首位开始算， 所以相差1位，那么在temp末尾加1个‘0’ temp=”13710”,把他加入res,用上述的大数相加运算。 同理把4和457进行一次运算，得到的新temp也加入到res中 最后根据前面统计的负号个数，对结果进行加负号处理。 3.特殊情况 如果按照首位逐个相乘，如果遇到如699这样，即第一次运算 60 9=540 , 随后运算 9 * 9 =81 ,发现进位点4+8 超过10 这个时候怎么处理呢。 很简单，无视就好，它会在被调用大数相加运算的时候，自动向前进位的。 此时temp=’5’ ‘12’ ‘1’。 我们bigNumAdd(res,temp)。 在内循环中，因为12&gt;10 ，会把1加到5身上。结果为621 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263string bigNumMul(string a,string b)&#123; //统计负数个数 int fushu=0; string resStr; if(a[0]=='-') &#123; fushu++; a.erase(a.begin()); &#125; if(b[0]=='-') &#123; fushu++; b.erase(b.begin()); &#125; if(a.length()&lt;b.length()) &#123; swap(a,b); &#125; //面向b的末尾开始 for(int i=b.length()-1;i&gt;=0;i--) &#123; //新建临时字符串 string tempStr; //复制严肃，这里其实只要长度相等就可以了，不需要元素一致 tempStr.assign(a); //计算当前b的计算位距离末尾的长度，决定加0次数 int zeroB=b.length()-i-1; //从a的首位开始，因为这里复制了a的元素，直接从temp上索引 //如果上面的temp只复制了长度，那么就要从a本身索引 for(int j=0;j&lt;tempStr.length();j++) &#123; //相乘 int res=(tempStr[j]-'0')*(b[i]-'0'); //自身更正 tempStr[j]=res%10+'0'; //相乘结果大于10 if(res&gt;=10) &#123; //计算点在temp/a的首位，也就说进位点会超出范围 if(j==0) &#123; //在temp前加上进位的值的ascii码 tempStr=(char)((res/10)%10+'0')+tempStr; //长度加1，我们的j也要相对后移 ++j; &#125; else &#123; //否则正常进位 tempStr[j-1]+=(res/10)%10; &#125; &#125; &#125; //加'0'操作 for(int k=0;k&lt;zeroB;k++) tempStr+='0'; //与res相加 如果出现了特殊情况，会在其中被进位修正。 resStr=bigNumAdd(resStr,tempStr); &#125; //判断负数情况，加负号 return fushu==1 ? '-'+resStr:resStr;&#125; 总结 加法减法从被加/被减末尾开始算。 减法/乘法需要考虑负数情况。 乘法从被乘数的首位开始算。 加法运算要注意进位操作，减法要记得减0操作，乘法要加0操作。]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>算法学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[独立手游-19年-3月]]></title>
    <url>%2F2019%2FMyGame-19-Mar%2F</url>
    <content type="text"><![CDATA[[TOC] 本月主要开发内容放弃了帧动画，使用Anima2D制作的骨骼动画，花了不少时间写了自己的第一个开源背包框架，同时用于重构游戏里的背包系统。 成果图片以及描述Anima2D骨骼动画的简单使用可以参考我的另一篇文章Unity Anima2D编辑器的轻量骨骼动画和换装使用​ 手持武器的更换效果 棍类武器的蓄力攻击动画 长矛类武器的蓄力攻击动画 刀类武器的蓄力攻击动画 下月任务将背包系统重构完善，同时把框架的存储功能更新，把所有物品图标绘制完毕。尽可能编写怪物AI，因为还有计网课设和团队游戏开发，所以怪物AI行为树的进度可能较慢。]]></content>
      <categories>
        <category>Unity3D</category>
      </categories>
      <tags>
        <tag>独立游戏</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Unity Anima2D编辑器的轻量骨骼动画和换装使用]]></title>
    <url>%2F2019%2FMyLearn-Anima2D%2F</url>
    <content type="text"><![CDATA[[TOC] &lt;学习记录&gt;Unity Anima2D编辑器的轻量骨骼动画和换装使用前言​ 前不久觉得骨骼动画难弄而选择帧动画，现在发现，一个人制作帧动画的工作量真的大，特别是发现需要换肤功能的时候，目前没有找到可以让同一个帧动画替换特定像素达到换肤效果的简易方法（shader可以简单换色，但是如果要有特别的形状图案就很复杂了），于是乎找到了一些关于Unity5.x版本之后自带的anima2D骨骼动画系统的一些文档，决定弃用帧动画使用骨骼动画。 ​ 这篇来做一个简易演示。 图片准备​ 将精灵图拖到Unity之后设置属性，因为画的时候是以1像素为单位，所以选择了FilterMode为Point。随后通过SpriteEditor将图片切割好，注意这里一定要规定好切割区域的大小，也就是规定如所有头部、身体精灵图的共同切割大小，以便骨骼的绑定不会产生换肤的图片偏移，对碰撞体有要求的同样可以设置得精细一点。 精灵网格和骨骼设置​ 将必要的头、身体、腿的图片拖入视图后，摆好位置，创建父物体Player，对其一一设置精灵网格，右键2D Object-&gt;SpriteMesh ​ 随后可以在父物体Player下创建骨骼，右键2D Object-&gt;Bone ​ 将创建的骨骼与摆好的图片对齐，如果在骨骼下创建骨骼，会生成子骨骼，子骨骼会随着父骨骼移动。 ​ 骨骼绑定​ 设置好骨骼，图片也对应好之后，将网格与骨骼绑定，点击视图中的头，查看监视面板，创建了网格会绑定的两个组件分别是SpriteMeshInstance和SpriteMeshRenderer，本篇只讲解SpriteMeshInstance的用法，SpriteMesh是精灵网格，可以在面板上设置，也可以在代码上设置，这也是本篇换装的重要途径，随后是颜色、材质、层级、Set bones骨骼设置，我们将对应的骨骼拖入这里，注意，拖入带有子骨骼的骨骼，会将子骨骼一起绑定，若子骨骼需要与其他图片绑定，请删除掉，以免冲突。 ​ 拖入以后并没有直接绑定成功，这时候我们需要通过Anima2D编辑器绑定骨骼，菜单栏Winodws-&gt;Anima2D-&gt;SpriteMesh Editor，点击Bind按钮将自动的计算骨骼的权重。点击Apply即可绑定，也可以通过Weight Editor设置影响程度，在此之前也可以在编辑器上通过鼠标来划分你的蒙皮需求。如果一张图片上有多个骨骼，那么你就要设置每个骨骼在某些三角形上的权重，让骨骼动作时图片动作的更逼真。而个人不需要过于精细，因此本篇没有特定设置蒙皮划分。 ​ 绑定骨骼以后，可以在视图界面控制骨骼，查看是否绑定成功。 IK绑定​ 反向力学系统，一般我们是通过骨骼的动作去控制图片，设置IK并绑定骨骼的话，通过操作IK控件，骨骼也会随着移动。这样我们可以更方便的做一些动画了。（展示图没有绑定武器，所以效果并不明显，但是骨骼效果随着IK的移动而移动很直白） ​ IK动画分两种:IK CCD、IK Limb。​ IK Limb适合肢体骨骼动画。IK CCD适合更长的骨骼。本篇使用Limb，在父物体Player下创建IK，右键2D Object-&gt;IK Limb ，在视图将IK部件移动到合适的位置之后，监视面板绑定骨骼，在这里，我们可以想像IK为关节，我们人体控制关节，骨骼也会随之移动，所以将IK绑定到对应的骨骼就好了。 骨骼动画和换装​ 利用Animation编辑器，新建anim动画，对骨骼进行操作录制即可，然后播放的时候，通过改变对应SpriteMeshInstance的精灵网格即可。 ​ 注意，你要对所有提供换装的精灵网格对它对应骨骼进行单独的绑定！ ​ 以下为本篇的换装样例代码 1234567891011121314151617181920212223242526using Anima2D;using System.Collections;using System.Collections.Generic;using UnityEngine;public class DebugBone : MonoBehaviour &#123; private SpriteMeshInstance body; private Object[] clothesMesh; int key = 0; // Use this for initialization void Start () &#123; body = GameObject.Find(&quot;身体&quot;).GetComponent&lt;SpriteMeshInstance&gt;(); clothesMesh = Resources.LoadAll(&quot;SpriteMesh/clothes&quot;); &#125; // Update is called once per frame void Update () &#123; if (Input.GetKeyDown(KeyCode.A)) &#123; key++; key = key % 6; body.spriteMesh = (SpriteMesh)clothesMesh[key]; &#125; &#125;&#125; 参考文章和视频​ 视频： 【游戏美术难于上青天】 系列 ​ 文章： Anima2D官方中文使用手册（对应Anima2D1.1.4）]]></content>
      <categories>
        <category>Unity3D</category>
      </categories>
      <tags>
        <tag>问题以及解决方案</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于Unity3D引用某些DLL发布之后可能出现的错误]]></title>
    <url>%2F2018%2FMyIssue-Solution-DLL%2F</url>
    <content type="text"><![CDATA[[TOC] 目的：在肝专业课设的时候，需要用的EPPLSUE.DLL写表格文件时，以及想用IRONPYTHON调用pyhton脚本时遇到了这些问题，在这里总结一下 主要问题：1.引用第三方类库之后，无法发布。提示引用的类库不支持。 2.发布之后，使用到对应第三方类库内容时，发生错误，但是在编辑器里却没错误。 问题可能原因和解决方法：问题1：可能原因：目前遇到的大部分是都是因为Unity的NET版本和要使用的类库不一致导致的，虽然目前Unity的设置中支持3.5和4.X，但实际上使用那些4.0以上NET支持的类库，大部分就会出现VS编译器里无报错，但Unity编辑器里报错的问题，或者如问题1那样，无法发布。 解决方法：1.尽量使用非4.XNET支持的第三方类库，总能找到课替代的或者低版本(最后我还是没用上iron Python ,选择把python写成web后端了= =)。 2.在发布页面的Player Setting中设置使用的NET版本，更改Unity为.NET 4.X ，但大部分第三方库依然不支持 3.老老实实使用.NET3.5，并选择API为.NET2.0而不是它的子集2.0 Subset 据说后面4.X会支持的更好，3.5也会被移除，希望能完全支持这些类库吧。 问题2：可能原因：我遇到的是在Unity编辑器里生成表格是可以的,但是发布之后，却失败了，通过异常捕获发现出现不支持IBM347编码，其实是缺少Unity编辑器里自带的一些文件。 解决方法：把Unity\Editor\Data\Mono\lib\mono\unity下的L18N相关的所有.dll赋值到当前项目的Assets文件夹下，保存再发布就可以解决了。 以上大部分分析来源于自己，因此可能不是百分百正确，勿在意。]]></content>
      <categories>
        <category>Unity3D</category>
      </categories>
      <tags>
        <tag>问题以及解决方案</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[独立手游-11月]]></title>
    <url>%2F2018%2FMyGame-Nov%2F</url>
    <content type="text"><![CDATA[[TOC] 本月主要开发内容绘制大部分UI界面所用的素材、绘制主角样板和一些动画，然后对原来的UI布局根据像素风进行了一些修改。 成果图片以及描述板子用的是ctl672，绘制软件有PS和piskel，没有什么美术功底强上，在piskel上不支持压感，所以画主角样板的时候都是现在PS上画 再转到piskel做帧动画的。 总览 1.人物属性表每个两张，一张填满一张空，用填充分那个是控制数值 空san 2.电子表预览打算6/12min现实时间为游戏的一天，用uv动画去控制时间流动 3.人物待机图在piskel上绘制帧动画，导出xy行列的图集，然后在Unity上自己分割，拖动就可以形成动画 人物待机图* 待更新完毕]]></content>
      <categories>
        <category>Unity3D</category>
      </categories>
      <tags>
        <tag>独立游戏</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[独立手游-10月]]></title>
    <url>%2F2018%2FMyGame-Oct%2F</url>
    <content type="text"><![CDATA[[TOC] 本月主要开发内容UI框架、UI布局、美术制作、游戏物品数据json化、主角存档格式等 成果图片以及描述对于一个没有美术资源的游戏开发前期，打算先从UI入手由于截图软件问题，上面有大概0.5cm的高度矩形被截出了 但不影响观看 1.操作方式预览 左手移动 范围为2/5的左边屏幕右手攻击 范围固定 2.背包预览还没在主角数据里添加，所以暂时为空 3.合成系统预览主要用到Toggle来选择合成表点击目标物品，右侧会出现详情和合成所需的物品预览以及对应的消耗个数和已有个数 4.数据持久化JSON我也只是刚接触不久，用的litjson，因为我把所有物品都一股脑写入一个json里（手写。。。），解析不能用泛型，只好手动针对性解析(可能是我没学会其他更方便的方法)顺便加了AES加密主角的存档数据我也写了初版，并且加了脚本测试测试为：向主角数据添加物品持有、然后在背包中查阅 (在电脑上编辑器中的测试，在电脑录制的gif 比手机的更清晰顺滑一些) 本月总结 其实说是本月，不如说是9月和10月:grimacing:，这些是用了两个月的课余时间慢慢写的，但考虑到现在才开通博客记录，所以合二为一了。 设计这些低端UI还是相对容易的，因为轻量级的UI框架之前看视频学过倒是卡了摇杆设计上，EasyTouch要付费，网上找了一些别人的源码，自己照着造了一次适合的轮子，发现左右手不能同时使用，会卡住，最后知道了安卓有多点触控。。。用了Torch去判断才可以 在json数据的定义上，也许是开发经验太少，我甚至用到了伤害计算弄成数组。。。1234567891011121314&#123; "id": 304, "type": "bullet", "pose": 4, "name": "毒箭", "compose": [ 2, 1, 14, 1, 39, 1, 62, 1 ], "effect": "", "intro": "不要舔它", "isRealinjury": 1, "dT": [ 60, 0, 20, 1, 20, 1 ], "san": 0, "repair": [], "durability": 1 &#125; 就比如上面的。。。dT就是damageTime缩写，0为基础伤害，1为一秒的持续伤害:expressionless: 不在意这些细节啦，双11买了数位板，准备开肝素材，顺便贴下自己做的个人logo:yum:]]></content>
      <categories>
        <category>Unity3D</category>
      </categories>
      <tags>
        <tag>独立游戏</tag>
      </tags>
  </entry>
</search>
