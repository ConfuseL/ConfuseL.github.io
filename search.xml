<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>&lt;学习记录&gt;处理器调度</title>
      <link href="/2019/MyLearn-OS-2/"/>
      <url>/2019/MyLearn-OS-2/</url>
      
        <content type="html"><![CDATA[<h2 id="处理器调度层次"><a href="#处理器调度层次" class="headerlink" title="处理器调度层次"></a>处理器调度层次</h2><blockquote><p>本篇基于进程和线程，进程和线程的相关知识可以参考另一篇<a href="http://confusel.tech/2019/MyLearn-ProcessAndThreadAndCoroutine/">文章</a>。</p></blockquote><h3 id="1-高级调度"><a href="#1-高级调度" class="headerlink" title="1.高级调度"></a>1.高级调度</h3><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><blockquote><p>可称为作业调度、长程调度 ，简单来说，就是从后备作业(可以理解为待安排的程序)中按照一定的调度策略选择若干个作业进入内存，开始为他们创建进程和分配资源。</p><p>同时在作业完成时做好善后工作，比如回收资源。</p></blockquote><h4 id="调用时机"><a href="#调用时机" class="headerlink" title="调用时机"></a>调用时机</h4><blockquote><p>当CPU空闲时间超过一定阀值，此时系统便调用高级调度，开始安排新作业。</p></blockquote><h3 id="2-中级调度"><a href="#2-中级调度" class="headerlink" title="2.中级调度"></a>2.中级调度</h3><h4 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h4><blockquote><p>可称为平衡调度、中程调度，简单来说会把暂时不能运行的进程挂起，将它占用的资源释放，当资源充足的时候，解除这个进程的挂起状态，为它恢复资源。</p></blockquote><h4 id="调用时机-1"><a href="#调用时机-1" class="headerlink" title="调用时机"></a>调用时机</h4><blockquote><p>当内存吃紧时调用中级调度。</p></blockquote><h3 id="3-低级调度"><a href="#3-低级调度" class="headerlink" title="3.低级调度"></a>3.低级调度</h3><h4 id="作用-2"><a href="#作用-2" class="headerlink" title="作用"></a>作用</h4><blockquote><p>可称为进程调度、线程调度、短程调度，简单来说，它会根据某种原则决定在内存中所有进程使用cpu的顺序，可以说它是操作系统最核心的调度，几乎每时每刻都在被执行。</p></blockquote><h4 id="调用时机-2"><a href="#调用时机-2" class="headerlink" title="调用时机"></a>调用时机</h4><blockquote><p>当cpu空闲时，说明这个时候cpu还可以被利用。</p><p>如果有某个进程的优先级别比当前使用cpu的进程还高，而且调度算法允许被抢占时，优先的那个进程将会抢占cpu。</p></blockquote><p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1554036387852&amp;di=fadc94933d3facd8fa64d7d5ebfea650&amp;imgtype=0&amp;src=http%3A%2F%2Fupload-images.jianshu.io%2Fupload_images%2F8803909-0db744b9da1a2a2a.png" alt=""></p><h2 id="调度性能指标"><a href="#调度性能指标" class="headerlink" title="调度性能指标"></a>调度性能指标</h2><h3 id="资源利用率"><a href="#资源利用率" class="headerlink" title="资源利用率"></a>资源利用率</h3><h4 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h4><p>​    CPU利用率=CPU有效工作时间/CPU总的运行时间<br>​    CPU总的运行时间=CPU有效工作时间+CPU空闲等待时间<br>​    即CPU利用率=CPU有效工作时间/(CPU有效工作时间+CPU空闲等待时间)</p><h3 id="吞吐率"><a href="#吞吐率" class="headerlink" title="吞吐率"></a>吞吐率</h3><blockquote><p>单位时间内cpu处理作业的个数。</p><p>如果处理的作业中，长作业比较多，那么相对来说，单位时间内它能处理的作业就很少，因为长作业一直做不完。此时吞吐率低。</p><p>如果处理的作业中，短作业比较多，那么相对来说，单位时间内它能处理的作业就很多，因为短作业很容易做完。此时吞吐率高。</p><p>作业长短指的是执行这个作业的必要时间的长短。</p><p>是批处理系统的重要衡量指标之一。</p></blockquote><h3 id="公平性"><a href="#公平性" class="headerlink" title="公平性"></a>公平性</h3><blockquote><p>确保每个进程都能得到合理的CPU份额和资源份额。否则会产生进程饥饿。</p><p>进程饥饿：某个进程从创建开始到某个时间，就一直没有使用cpu的权限，那么这个进程是没有存在的意义，也就是进程饥饿。</p></blockquote><h3 id="响应时间"><a href="#响应时间" class="headerlink" title="响应时间"></a>响应时间</h3><blockquote><p>从交互式进程提交一个请求到获得响应之间的时间间隔。</p><p>是分时、实时系统的重要衡量指标之一。</p></blockquote><h3 id="周转时间"><a href="#周转时间" class="headerlink" title="周转时间"></a>周转时间</h3><blockquote><p>从系统提交作业开始到作业完成为止的时间间隔。</p></blockquote><h4 id="公式-1"><a href="#公式-1" class="headerlink" title="公式"></a>公式</h4><ol><li>第i个作业的周转时间ti=作业i的完成时刻f-作业的提交时刻s。<ol><li>ti=tf-ts;</li></ol></li><li>平均周转时间T=所有作业的周转时间相加之合/作业个数n。<ol><li>T=($\sum_{i=1}^N$ti)/n</li></ol></li><li>第i个作业的带权周转时间wi=第i个作业的周转时间ti/第i个作业的必要消耗时间tk<ol><li>wi=ti/tk</li></ol></li><li>平均带权周转时间W=所有作业的带权周转时间相加之合/作业个数n。<ol><li>W=($\sum_{i=1}^N$wi)/n</li></ol></li></ol><h2 id="作业调度和低级调度算法"><a href="#作业调度和低级调度算法" class="headerlink" title="作业调度和低级调度算法"></a>作业调度和低级调度算法</h2><h3 id="先来先服务算法-FCFS"><a href="#先来先服务算法-FCFS" class="headerlink" title="先来先服务算法(FCFS)"></a>先来先服务算法(FCFS)</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><blockquote><p>字如其名，谁先到谁先服务，也类似数据结构中的队列，不按权值，先进先出。</p><p>非抢占式。</p></blockquote><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><blockquote><p>如下标，有三个作业按1 2 3的顺序进入后备作业，这个时候因为作业1先来，所以运行它，随后是2和3。</p></blockquote><table><thead><tr><th>作业名</th><th>所需CPU时间/ms</th></tr></thead><tbody><tr><td>作业1</td><td>28</td></tr><tr><td>作业2</td><td>9</td></tr><tr><td>作业3</td><td>3</td></tr></tbody></table><table><thead><tr><th>0-28s</th><th>28-37s</th><th>37-40s</th></tr></thead><tbody><tr><td>作业1</td><td>作业2</td><td>作业3</td></tr></tbody></table><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*!***************************************************</span></span><br><span class="line"><span class="comment"> * @file: FCFS.cpp</span></span><br><span class="line"><span class="comment"> * @brief: 博客-操作系统调度算法-先来先服务</span></span><br><span class="line"><span class="comment"> * @author: ConfuseL</span></span><br><span class="line"><span class="comment"> * @date: 3,31,2019</span></span><br><span class="line"><span class="comment"> * @note:</span></span><br><span class="line"><span class="comment"> ****************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//所有作业提交到系统的时间</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> beginTime=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//系统时间</span></span><br><span class="line"><span class="keyword">double</span> systemTime=<span class="number">0</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Job</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">//作业号</span></span><br><span class="line">        <span class="keyword">int</span> id;</span><br><span class="line">    <span class="comment">//所需CPU的时间</span></span><br><span class="line">        <span class="keyword">double</span> workTime;</span><br><span class="line">    <span class="comment">//获得CPU运作权限的时间</span></span><br><span class="line">        <span class="keyword">double</span> getCount;</span><br><span class="line">    <span class="comment">//结束时间</span></span><br><span class="line">        <span class="keyword">double</span> finishTime;</span><br><span class="line">    <span class="comment">//进入内存的时间</span></span><br><span class="line">        <span class="keyword">double</span> pushTime;</span><br><span class="line">    <span class="comment">//到达系统的时间</span></span><br><span class="line">    <span class="keyword">double</span> arrival;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        Job()&#123;&#125;;</span><br><span class="line">        Job(<span class="keyword">int</span> id,<span class="keyword">double</span> wT)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>-&gt;id=id;</span><br><span class="line">            workTime=wT;</span><br><span class="line">            getCount=<span class="number">0</span>;</span><br><span class="line">            finishTime=<span class="number">0</span>;</span><br><span class="line">            pushTime=<span class="number">0</span>;</span><br><span class="line">            arrival=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; out, Job &amp;j)</span><br><span class="line">    &#123;</span><br><span class="line">            j.setFinishTime(systemTime);</span><br><span class="line">        out&lt;&lt;<span class="string">"作业"</span>&lt;&lt;j.id&lt;&lt;<span class="string">": 所需CPU时间："</span>&lt;&lt;j.workTime&lt;&lt;<span class="string">"ms，进入时间："</span>&lt;&lt;j.pushTime&lt;&lt;<span class="string">"ms，周转时间："</span>&lt;&lt;j.finishTime-j.arrival&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> out;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//是否以完成</span></span><br><span class="line">     <span class="function"><span class="keyword">bool</span> <span class="title">isDone</span><span class="params">()</span></span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line">         <span class="comment">//当获取CPU运作权限时间大于等于工作所需要的时间，即完成。</span></span><br><span class="line">         <span class="keyword">return</span> getCount&gt;=workTime;</span><br><span class="line">     &#125;</span><br><span class="line">         <span class="comment">//设置结束时间</span></span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">setFinishTime</span><span class="params">(<span class="keyword">double</span> finishTime)</span></span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;finishTime=finishTime;</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="comment">//获得CPU运作时间，一次1ms</span></span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">getCPUTime</span><span class="params">(<span class="keyword">double</span>&amp; systemTime)</span></span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line">         getCount+=<span class="number">1.0</span>;</span><br><span class="line">         systemTime+=<span class="number">1.0</span>;</span><br><span class="line">         finishTime+=<span class="number">1.0</span>;</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="comment">//设置进入内存时间</span></span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">setPushTime</span><span class="params">(<span class="keyword">double</span> pushTime)</span></span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line">         <span class="keyword">this</span>-&gt;pushTime=pushTime;</span><br><span class="line">         <span class="comment">//结束时间从进入内存时间开始累加</span></span><br><span class="line">         finishTime=pushTime;</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="comment">//获得结束时间</span></span><br><span class="line">     <span class="function"><span class="keyword">double</span> <span class="title">getFinishTime</span><span class="params">()</span></span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> finishTime;</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="comment">//获得工作时间</span></span><br><span class="line">     <span class="function"><span class="keyword">double</span> <span class="title">getWorkTime</span><span class="params">()</span></span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> workTime;</span><br><span class="line">     &#125;</span><br><span class="line">         <span class="comment">//获得提交时间</span></span><br><span class="line">     <span class="function"><span class="keyword">double</span> <span class="title">getArrivalTime</span><span class="params">()</span></span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> arrival;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//平均周转和平均带权周转</span></span><br><span class="line">    <span class="keyword">double</span> T=<span class="number">0</span>,W=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//后备作业个数个数</span></span><br><span class="line">    <span class="keyword">int</span> jobNum=<span class="number">3</span>;</span><br><span class="line">    <span class="comment">//后备作业队列</span></span><br><span class="line">    <span class="built_in">queue</span>&lt;Job&gt; JobPool;</span><br><span class="line">    <span class="comment">//当前运行的作业</span></span><br><span class="line">    Job curJob;</span><br><span class="line">    <span class="comment">//测试，后备作业中有以下几个作业</span></span><br><span class="line">    JobPool.push(*(<span class="keyword">new</span> Job(<span class="number">1</span>,<span class="number">28</span>)));</span><br><span class="line">    JobPool.push(*(<span class="keyword">new</span> Job(<span class="number">2</span>,<span class="number">9</span>)));</span><br><span class="line">    JobPool.push(*(<span class="keyword">new</span> Job(<span class="number">3</span>,<span class="number">3</span>)));</span><br><span class="line">    <span class="comment">//开始取作业，按照先进先出(队列特性)</span></span><br><span class="line">    <span class="keyword">while</span>(!JobPool.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        curJob=JobPool.front();</span><br><span class="line">        JobPool.pop();</span><br><span class="line">        curJob.setPushTime(systemTime);</span><br><span class="line">        <span class="comment">//如果作业没有完成</span></span><br><span class="line">        <span class="keyword">while</span>(!curJob.isDone())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//给它一次运行时间(1ms)</span></span><br><span class="line">            curJob.getCPUTime(systemTime);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;curJob;</span><br><span class="line">        T+=(curJob.getFinishTime()-curJob.getArrivalTime())/jobNum;</span><br><span class="line">        W+=((curJob.getFinishTime()-curJob.getArrivalTime())/curJob.getWorkTime())/jobNum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"平均周转时间："</span>&lt;&lt;T&lt;&lt;<span class="string">"ms,"</span>&lt;&lt;<span class="string">"平均带权周转时间："</span>&lt;&lt;W&lt;&lt;<span class="string">"ms"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://confusel-images.oss-cn-shenzhen.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/OS/FCFS.png" alt=""></p><h3 id="最短作业优先算法"><a href="#最短作业优先算法" class="headerlink" title="最短作业优先算法"></a>最短作业优先算法</h3><h4 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h4><blockquote><p>每次取所需时间最短的作业，当系统彻底空闲的时候取第一个，随后在第一个执行完毕后，检索等待的作业中所需CPU时间最短的作业，然后执行它。</p><p>非抢占式。</p><p>会造成进程饥饿，所需时间越多的就需要等待越久。</p></blockquote><h4 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h4><blockquote><p>如下标，有四个作业，它们同时进入后备作业，此时由于作业2所需时间最短，所以先运行作业2。</p><p>其次是作业4，1，3。</p></blockquote><table><thead><tr><th>作业名</th><th>所需CPU时间/ms</th></tr></thead><tbody><tr><td>作业1</td><td>9</td></tr><tr><td>作业2</td><td>4</td></tr><tr><td>作业3</td><td>10</td></tr><tr><td>作业4</td><td>8</td></tr></tbody></table><table><thead><tr><th>0-4s</th><th>4-12s</th><th>12-21s</th><th>21-31s</th></tr></thead><tbody><tr><td>作业2</td><td>作业4</td><td>作业1</td><td>作业3</td></tr></tbody></table><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><blockquote><p>直接把上面FCFS的队列改成最小优先队列就好了。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*!***************************************************</span></span><br><span class="line"><span class="comment"> * @file: SJF.cpp</span></span><br><span class="line"><span class="comment"> * @brief: 博客-操作系统调度算法-最短作业有限</span></span><br><span class="line"><span class="comment"> * @author: ConfuseL</span></span><br><span class="line"><span class="comment"> * @date: 3,31,2019</span></span><br><span class="line"><span class="comment"> * @note:</span></span><br><span class="line"><span class="comment"> ****************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//系统时间</span></span><br><span class="line"><span class="keyword">double</span> systemTime=<span class="number">0</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Job</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">//作业号</span></span><br><span class="line">        <span class="keyword">int</span> id;</span><br><span class="line">    <span class="comment">//所需CPU的时间</span></span><br><span class="line">        <span class="keyword">double</span> workTime;</span><br><span class="line">    <span class="comment">//获得CPU运作权限的时间</span></span><br><span class="line">        <span class="keyword">double</span> getCount;</span><br><span class="line">    <span class="comment">//结束时间</span></span><br><span class="line">        <span class="keyword">double</span> finishTime;</span><br><span class="line">    <span class="comment">//进入内存的时间</span></span><br><span class="line">        <span class="keyword">double</span> pushTime;</span><br><span class="line">    <span class="comment">//到达系统的时间</span></span><br><span class="line">    <span class="keyword">double</span> arrival;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        Job()&#123;&#125;;</span><br><span class="line">        Job(<span class="keyword">int</span> id,<span class="keyword">double</span> wT)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>-&gt;id=id;</span><br><span class="line">            workTime=wT;</span><br><span class="line">            getCount=<span class="number">0</span>;</span><br><span class="line">            finishTime=<span class="number">0</span>;</span><br><span class="line">            pushTime=<span class="number">0</span>;</span><br><span class="line">            arrival=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; out, Job &amp;j)</span><br><span class="line">    &#123;</span><br><span class="line">            j.setFinishTime(systemTime);</span><br><span class="line">        out&lt;&lt;<span class="string">"作业"</span>&lt;&lt;j.id&lt;&lt;<span class="string">": 所需CPU时间："</span>&lt;&lt;j.workTime&lt;&lt;<span class="string">"ms，进入时间："</span>&lt;&lt;j.pushTime&lt;&lt;<span class="string">"ms，周转时间："</span>&lt;&lt;j.finishTime-j.arrival&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> out;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//重载小于操作符 让时间小的优先</span></span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Job &amp; a,<span class="keyword">const</span> Job &amp;b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> a.workTime&gt;b.workTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//是否以完成</span></span><br><span class="line">     <span class="function"><span class="keyword">bool</span> <span class="title">isDone</span><span class="params">()</span></span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line">         <span class="comment">//当获取CPU运作权限时间大于等于工作所需要的时间，即完成。</span></span><br><span class="line">         <span class="keyword">return</span> getCount&gt;=workTime;</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="comment">//获得CPU运作时间，一次1ms</span></span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">getCPUTime</span><span class="params">(<span class="keyword">double</span>&amp; systemTime)</span></span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line">         getCount+=<span class="number">1.0</span>;</span><br><span class="line">         systemTime+=<span class="number">1.0</span>;</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="comment">//设置进入内存时间</span></span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">setPushTime</span><span class="params">(<span class="keyword">double</span> pushTime)</span></span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line">         <span class="keyword">this</span>-&gt;pushTime=pushTime;</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="comment">//设置结束时间</span></span><br><span class="line">     <span class="function"><span class="keyword">double</span> <span class="title">setFinishTime</span><span class="params">(<span class="keyword">double</span> finishTime)</span></span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;finishTime=finishTime;</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="comment">//获得结束时间</span></span><br><span class="line">     <span class="function"><span class="keyword">double</span> <span class="title">getFinishTime</span><span class="params">()</span></span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> finishTime;</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="comment">//获得工作时间</span></span><br><span class="line">     <span class="function"><span class="keyword">double</span> <span class="title">getWorkTime</span><span class="params">()</span></span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> workTime;</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="comment">//获得提交时间</span></span><br><span class="line">     <span class="function"><span class="keyword">double</span> <span class="title">getArrivalTime</span><span class="params">()</span></span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> arrival;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//平均周转和平均带权周转</span></span><br><span class="line">    <span class="keyword">double</span> T=<span class="number">0</span>,W=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//后备作业个数个数</span></span><br><span class="line">    <span class="keyword">int</span> jobNum=<span class="number">4</span>;</span><br><span class="line">    <span class="comment">//后备作业队列</span></span><br><span class="line">    priority_queue&lt;Job&gt; JobPool;</span><br><span class="line">    <span class="comment">//当前运行的作业</span></span><br><span class="line">    Job curJob;</span><br><span class="line">    <span class="comment">//测试，后备作业中有以下几个作业</span></span><br><span class="line">    JobPool.push(*(<span class="keyword">new</span> Job(<span class="number">1</span>,<span class="number">9</span>)));</span><br><span class="line">    JobPool.push(*(<span class="keyword">new</span> Job(<span class="number">2</span>,<span class="number">4</span>)));</span><br><span class="line">    JobPool.push(*(<span class="keyword">new</span> Job(<span class="number">3</span>,<span class="number">10</span>)));</span><br><span class="line">    JobPool.push(*(<span class="keyword">new</span> Job(<span class="number">4</span>,<span class="number">8</span>)));</span><br><span class="line">    <span class="comment">//开始取作业，按照先进先出(队列特性)</span></span><br><span class="line">    <span class="keyword">while</span>(!JobPool.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        curJob=JobPool.top();</span><br><span class="line">        JobPool.pop();</span><br><span class="line">        curJob.setPushTime(systemTime);</span><br><span class="line">        <span class="comment">//如果作业没有完成</span></span><br><span class="line">        <span class="keyword">while</span>(!curJob.isDone())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//给它一次运行时间(1ms)</span></span><br><span class="line">            curJob.getCPUTime(systemTime);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;curJob;</span><br><span class="line">        T+=(curJob.getFinishTime()-curJob.getArrivalTime())/jobNum;</span><br><span class="line">        W+=((curJob.getFinishTime()-curJob.getArrivalTime())/curJob.getWorkTime())/jobNum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"平均周转时间："</span>&lt;&lt;T&lt;&lt;<span class="string">"ms,"</span>&lt;&lt;<span class="string">"平均带权周转时间："</span>&lt;&lt;W&lt;&lt;<span class="string">"ms"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://confusel-images.oss-cn-shenzhen.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/OS/SJF.png" alt=""></p><h3 id="最短剩余时间优先算法"><a href="#最短剩余时间优先算法" class="headerlink" title="最短剩余时间优先算法"></a>最短剩余时间优先算法</h3><h4 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h4><blockquote><p>这个算法其实是上面最短作业优先算法的抢占版，最短优先算法规定了每一次执行最短需求的作业，直到它完毕，但是在最短剩余时间优先算法中，每当一个新作业进入到后备内存时，就得比较当前执行的作业和后备作业中谁的需求时间最短了。</p></blockquote><h4 id="案例-2"><a href="#案例-2" class="headerlink" title="案例"></a>案例</h4><blockquote><p>如下表，四个作业分时到达。作业1最先到达，执行了1ms，随后被到来的作业2抢占，因为作业2只需要4ms，而作业1还需要7ms。</p><p>以此类推。</p></blockquote><table><thead><tr><th>作业名</th><th>到达系统时间</th><th>所需CPU时间/ms</th></tr></thead><tbody><tr><td>作业1</td><td>0</td><td>8</td></tr><tr><td>作业2</td><td>1</td><td>4</td></tr><tr><td>作业3</td><td>2</td><td>9</td></tr><tr><td>作业4</td><td>3</td><td>5</td></tr></tbody></table><table><thead><tr><th>0-1MS</th><th>1-5MS</th><th>5-10MS</th><th>10-17MS</th><th>17-26MS</th></tr></thead><tbody><tr><td>作业1</td><td>作业2</td><td>作业4</td><td>作业1</td><td>作业3</td></tr></tbody></table><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*!***************************************************</span></span><br><span class="line"><span class="comment"> * @file: SRTF.cpp</span></span><br><span class="line"><span class="comment"> * @brief: 博客-操作系统调度算法-最短剩余时间优先</span></span><br><span class="line"><span class="comment"> * @author: ConfuseL</span></span><br><span class="line"><span class="comment"> * @date: 4,1,2019</span></span><br><span class="line"><span class="comment"> * @note:</span></span><br><span class="line"><span class="comment"> ****************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//系统时间</span></span><br><span class="line"><span class="keyword">double</span> systemTime=<span class="number">0</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Job</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">//作业号</span></span><br><span class="line">        <span class="keyword">int</span> id;</span><br><span class="line">    <span class="comment">//所需CPU的时间</span></span><br><span class="line">        <span class="keyword">double</span> workTime;</span><br><span class="line">    <span class="comment">//获得CPU运作权限的时间</span></span><br><span class="line">        <span class="keyword">double</span> getCount;</span><br><span class="line">    <span class="comment">//结束时间</span></span><br><span class="line">        <span class="keyword">double</span> finishTime;</span><br><span class="line">    <span class="comment">//第一次进入内存的时间</span></span><br><span class="line">        <span class="keyword">double</span> pushTime;</span><br><span class="line">    <span class="comment">//到达系统的时间</span></span><br><span class="line">        <span class="keyword">double</span> arrival;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        Job()&#123;&#125;;</span><br><span class="line">        Job(<span class="keyword">int</span> id,<span class="keyword">double</span> ar,<span class="keyword">double</span> wT)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>-&gt;id=id;</span><br><span class="line">            workTime=wT;</span><br><span class="line">            arrival=ar;</span><br><span class="line">            getCount=<span class="number">0</span>;</span><br><span class="line">            finishTime=<span class="number">0</span>;</span><br><span class="line">            pushTime=<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; out, Job &amp;j)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//当它结束的时候输出，这时候设置结束时间。</span></span><br><span class="line">        j.setFinishTime(systemTime);</span><br><span class="line">        out&lt;&lt;<span class="string">"作业"</span>&lt;&lt;j.id&lt;&lt;<span class="string">": 提交时间："</span>&lt;&lt;j.arrival&lt;&lt;<span class="string">"ms, 所需CPU时间："</span>&lt;&lt;j.workTime&lt;&lt;<span class="string">"ms，进入内存时间："</span>&lt;&lt;j.pushTime&lt;&lt;<span class="string">"ms，周转时间："</span>&lt;&lt;systemTime-j.arrival&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> out;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//重载小于操作符 让剩余时间小的优先</span></span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Job &amp; a,<span class="keyword">const</span> Job &amp;b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> a.getSurplusTime()&gt;b.getSurplusTime();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//是否以完成</span></span><br><span class="line">     <span class="function"><span class="keyword">bool</span> <span class="title">isDone</span><span class="params">()</span></span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line">         <span class="comment">//当获取CPU运作权限时间大于等于工作所需要的时间，即完成。</span></span><br><span class="line">         <span class="keyword">return</span> getCount&gt;=workTime;</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="comment">//设置结束时间</span></span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">setFinishTime</span><span class="params">(<span class="keyword">double</span> finishTime)</span></span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;finishTime=finishTime;</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="comment">//获得CPU运作时间，一次1ms</span></span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">getCPUTime</span><span class="params">(<span class="keyword">double</span>&amp; systemTime)</span></span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line">         getCount+=<span class="number">1.0</span>;</span><br><span class="line">         systemTime+=<span class="number">1.0</span>;</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="comment">//设置第一次进入内存时间</span></span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">setPushTime</span><span class="params">(<span class="keyword">double</span> pushTime)</span></span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line">         <span class="comment">//如果小于0代表第一次进</span></span><br><span class="line">         <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;pushTime&lt;<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">this</span>-&gt;pushTime=pushTime;</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="comment">//获得进入内存时间</span></span><br><span class="line">     <span class="function"><span class="keyword">double</span> <span class="title">getPushTime</span><span class="params">()</span></span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> pushTime;</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="comment">//获得结束时间</span></span><br><span class="line">     <span class="function"><span class="keyword">double</span> <span class="title">getFinishTime</span><span class="params">()</span></span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> finishTime;</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="comment">//获得提交时间</span></span><br><span class="line">     <span class="function"><span class="keyword">double</span> <span class="title">getArrivalTime</span><span class="params">()</span></span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> arrival;</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="comment">//获得工作时间</span></span><br><span class="line">     <span class="function"><span class="keyword">double</span> <span class="title">getWorkTime</span><span class="params">()</span></span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> workTime;</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="comment">//获得剩余工作时间</span></span><br><span class="line">     <span class="function"><span class="keyword">double</span>  <span class="title">getSurplusTime</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> workTime-getCount;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当前运行的作业，在这里用静态指针的原因是因为我们需要对每一次进来的作业和当前的作业进行对比甚至替换，如果在传参中声明并不能更改原来的地址，而引用做为传参却无法指向引用(队列top返回的是引用)。</span></span><br><span class="line">Job *curJob=<span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">judge</span><span class="params">(priority_queue&lt;Job&gt; &amp;jobPool,Job &amp;newJob)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//如果为空并且当前没有作业 代表第一个作业 不用推入队列 直接变成当前作业</span></span><br><span class="line">    <span class="keyword">if</span>(jobPool.empty()&amp;&amp;curJob==<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        curJob=&amp;newJob;</span><br><span class="line">        <span class="keyword">if</span>(curJob-&gt;getPushTime()&lt;<span class="number">1e8</span>)</span><br><span class="line">            curJob-&gt;setPushTime(systemTime);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//否则推入</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    jobPool.push(newJob);</span><br><span class="line">    <span class="comment">//判断当前和队列头部的那个剩余时间最少，然后替换</span></span><br><span class="line">    <span class="keyword">if</span>(jobPool.top().getSurplusTime()&lt;curJob-&gt;getSurplusTime())</span><br><span class="line">    &#123;</span><br><span class="line">        jobPool.push(*curJob);</span><br><span class="line">        *(curJob)=jobPool.top();</span><br><span class="line">        jobPool.pop();</span><br><span class="line">        <span class="keyword">if</span>(curJob-&gt;getPushTime()&lt;<span class="number">1e8</span>)</span><br><span class="line">        curJob-&gt;setPushTime(systemTime);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//平均周转和平均带权周转</span></span><br><span class="line">    <span class="keyword">double</span> T=<span class="number">0</span>,W=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//后备作业个数个数</span></span><br><span class="line">    <span class="keyword">int</span> jobNum=<span class="number">4</span>;</span><br><span class="line">    <span class="comment">//后备作业队列</span></span><br><span class="line">    priority_queue&lt;Job&gt; JobPool;</span><br><span class="line">    <span class="comment">//开始取作业，按照先进先出(队列特性)</span></span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//因为知道是四个作业 所以直接打表了 如果作业很多 就要另写了</span></span><br><span class="line">        <span class="keyword">switch</span>((<span class="keyword">int</span>)systemTime)</span><br><span class="line">        &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                            judge(JobPool,*(<span class="keyword">new</span> Job(<span class="number">1</span>,<span class="number">0</span>,<span class="number">8</span>)));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                            judge(JobPool,*(<span class="keyword">new</span> Job(<span class="number">2</span>,<span class="number">1</span>,<span class="number">4</span>)));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                            judge(JobPool,*(<span class="keyword">new</span> Job(<span class="number">3</span>,<span class="number">2</span>,<span class="number">9</span>)));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                            judge(JobPool,*(<span class="keyword">new</span> Job(<span class="number">4</span>,<span class="number">3</span>,<span class="number">5</span>)));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//给它一次运行时间(1ms)</span></span><br><span class="line">        curJob-&gt;getCPUTime(systemTime);</span><br><span class="line">        <span class="comment">//如果作业完成</span></span><br><span class="line">        <span class="keyword">if</span>(curJob-&gt;isDone())</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="comment">//输出相关信息</span></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;*curJob;</span><br><span class="line">        T+=(curJob-&gt;getFinishTime()-curJob-&gt;getArrivalTime())/jobNum;</span><br><span class="line">        W+=((curJob-&gt;getFinishTime()-curJob-&gt;getArrivalTime())/curJob-&gt;getWorkTime())/jobNum;</span><br><span class="line">        <span class="comment">//读取新作业</span></span><br><span class="line">        <span class="keyword">if</span>(!JobPool.empty())</span><br><span class="line">        &#123;</span><br><span class="line">        *(curJob)=JobPool.top();</span><br><span class="line">        JobPool.pop();</span><br><span class="line">        curJob-&gt;setPushTime(systemTime);</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(!curJob-&gt;isDone()||!JobPool.empty());</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"平均周转时间："</span>&lt;&lt;T&lt;&lt;<span class="string">"ms,"</span>&lt;&lt;<span class="string">"平均带权周转时间："</span>&lt;&lt;W&lt;&lt;<span class="string">"ms"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://confusel-images.oss-cn-shenzhen.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/OS/SRTF.png" alt=""></p><hr><blockquote><p>下面的算法后面更新。</p></blockquote><h3 id="最高响应比优先算法"><a href="#最高响应比优先算法" class="headerlink" title="最高响应比优先算法"></a>最高响应比优先算法</h3><h4 id="概述-3"><a href="#概述-3" class="headerlink" title="概述"></a>概述</h4><h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><h3 id="优先级调度算法"><a href="#优先级调度算法" class="headerlink" title="优先级调度算法"></a>优先级调度算法</h3><h4 id="概述-4"><a href="#概述-4" class="headerlink" title="概述"></a>概述</h4><h4 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h4><h3 id="轮转调度算法"><a href="#轮转调度算法" class="headerlink" title="轮转调度算法"></a>轮转调度算法</h3><h4 id="概述-5"><a href="#概述-5" class="headerlink" title="概述"></a>概述</h4><h4 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h4>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识总结 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>&lt;学习记录&gt;《图解TCP/IP》之网络基础知识</title>
      <link href="/2019/MyLearn-ComputerNetwork-1/"/>
      <url>/2019/MyLearn-ComputerNetwork-1/</url>
      
        <content type="html"><![CDATA[<h2 id="计算机中的协议"><a href="#计算机中的协议" class="headerlink" title="计算机中的协议"></a>计算机中的协议</h2><h3 id="什么是协议"><a href="#什么是协议" class="headerlink" title="什么是协议"></a>什么是协议</h3><blockquote><p>简单来说，协议就是计算机与计算机之间通过网络实现通信时事先达成的一种约定。</p><p>书中有一段例子，即：</p><ul><li>人们沟通用的语言当作“协议”</li><li>聊天当作“通信”</li><li>说话的内容当作“数据”</li></ul><p>但是计算机并没有人类那么智能  ，人类在聊天(通信)时不需要特别注意就能自然的吐字、发音(写数据)和听懂对方的语言(数据解析)。但是计算机不会，因此需要我们提前指定好这个协议。让计算机根据这个协议，去正确的读取和发送数据。</p></blockquote><p><img src="http://confusel-images.oss-cn-shenzhen.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%8D%8F%E8%AE%AE%E4%B8%BE%E4%BE%8B.png" alt=""></p><h3 id="协议的作用"><a href="#协议的作用" class="headerlink" title="协议的作用"></a>协议的作用</h3><blockquote><p>让不同的设备、CPU以及不同的操作系统组成的计算机之间遵循相同的协议以能够实现通信。可以理解为通信时，两个计算机的语言，只有语言相同，两个计算机太能听懂(此语言只是举例，不指编程语言)。</p></blockquote><h3 id="分组交换技术"><a href="#分组交换技术" class="headerlink" title="分组交换技术"></a>分组交换技术</h3><blockquote><p>分组交换是指把大数据分割成多个小的包裹(packet)，随后再进行传输。</p><p>就类似于邮局发货，对于每一个包，都需要标识好发送人的信息和接受人的信息（源地址和目的地址），这样才能保证货物能够在正确的路线上传递。</p><p>原文中翻译为分组交换协议，感觉称为技术更合适，因为觉得这个 协议 两字有一点容易让人把后面学习的TCP/IP协议的 协议 混淆，因为TCP/IP使用的正是分组交换技术，所以在这里改为技术。</p></blockquote><p><img src="https://confusel-images.oss-cn-shenzhen.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%88%86%E7%BB%84%E4%BA%A4%E6%8D%A2.png" alt=""></p><h2 id="协议分层与OSI参考模型"><a href="#协议分层与OSI参考模型" class="headerlink" title="协议分层与OSI参考模型"></a>协议分层与OSI参考模型</h2><h3 id="协议分层"><a href="#协议分层" class="headerlink" title="协议分层"></a>协议分层</h3><blockquote><p>国际标准化组织，根据通信协议中必要的功能分层了7个层次，而这个7个层次组成了一个模型。即OSI模型。</p><p>在这个模型中，每一层次都要接受它下一层提供的服务，同时为自己上一层提供服务。</p><p>不同层次交互时遵行的约定叫做“接口”，相同层次交互式的约定叫做“协议”。</p></blockquote><p><img src="https://confusel-images.oss-cn-shenzhen.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E6%8E%A5%E5%8F%A3%E4%B8%8E%E5%8D%8F%E8%AE%AE.png" alt=""></p><h3 id="OSI参考模型"><a href="#OSI参考模型" class="headerlink" title="OSI参考模型"></a>OSI参考模型</h3><blockquote><p>如上所述，国际标准化组织将协议分为了7个层次，从底层到上层，为别是：</p><p>物理层-&gt;数据链路层-&gt;网络层层-&gt;传输层-&gt;会话层-&gt;表示层-&gt;应用层。</p><p>其中七层的作用如下图。</p></blockquote><p><img src="http://confusel-images.oss-cn-shenzhen.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/OSI%E4%B8%83%E5%B1%82%E4%BD%9C%E7%94%A8.png" alt=""></p><blockquote><p>发送方调用的顺序是从上到下，接受方则相反，从下到上。</p><p>以发送邮件简单举例，发送方A想对接受方B发送一封信，那么发送方在写完信，在邮箱网页上点击了发送按钮的那一刻，我们的信件便进入了应用层。</p><ol><li>应用层：我们的应用层知道这是一封电子邮件，选择一个适合的应用层协议:SMTP协议(先不用管它，知道它是一个发送邮件的协议就好了)，然后把这封电子邮件变成一个包裹，包的首部写了邮件的信息以及收件人。随后开始调用下一层的接口。</li><li>表示层：接受到应用层的调用，表示层先将包裹分析一边，为了保证数据格式一致性，把邮件中的信息转换为网络通用的标准数据格式，同时加上一段首部信息，标识这个数据原来的格式。转换好之后，调用下一层的接口。</li><li>会话层：会话层拿到包裹后，开始决定采用哪一种链接方式，对多个邮件是连续发呢还是一次性发完呢。在首部也添加了该层的信息：数据传输的顺序。随后调用下一层的接口。</li><li>传输层：这应该就是这本书的重点啦，这一层有TCP和UDP协议，如果选择了TCP协议，我们将建立起双方的可靠链接，反之UDP将不面向连接。此外还要进行传输前的错误检测和流控。随后数据开始经过网络层。</li><li>网络层：网络层的主要功能即是提供路由，即选择到达目标主机的最佳路径，并沿该路径传送数据包。除此之外，网络层还要能够消除网络拥挤，具有流量控制和拥挤控制的能力。选择了最佳的线路之后，开始进入数据链路层。</li><li>数据链路层：该层的数据传输单位是帧，将经过上面五层操作后的邮件的数据组合成一帧一帧的数据，开始传递给物理层。</li><li>物理层：这是最低的一层了，在这里我们把帧数据编程0101的比特，然后经过光纤啊、电缆啊、wifi啊等物理设施传输到对方对应的物理设施中。</li></ol><p>在发送方A点击发送后的几秒内，以上操作很可能已经完成了，而接受方B的物理层也开始接受到0101的比特数据，然后从下层到上层逐个分析，在传输层使用了对应的TCP/UDP接受数据，在会话层按顺序排序数据，在表示层解码数据，在应用层把邮件放到接受方B的邮箱中，如果邮箱满了，这时候我们又会发送一条错误给发送方A，这个时候又类似发送了一封邮件，只不过发送者不再是A而是B了。</p></blockquote><h2 id="传输方式的种类"><a href="#传输方式的种类" class="headerlink" title="传输方式的种类"></a>传输方式的种类</h2><h3 id="面向连接与面向无连接"><a href="#面向连接与面向无连接" class="headerlink" title="面向连接与面向无连接"></a>面向连接与面向无连接</h3><h4 id="面向连接"><a href="#面向连接" class="headerlink" title="面向连接"></a>面向连接</h4><blockquote><p>即双方的通信要建立在连接上。比如打电话，需要向对方拨号，而对方也必须在接通之后，两个人才能通话，这个过程就是建立连接。如果两个人其中一个人挂了电话，那么就无法在通讯，也就是连接被切断了。</p><p>TCP协议就是面向链接。</p></blockquote><h4 id="面向无连接"><a href="#面向无连接" class="headerlink" title="面向无连接"></a>面向无连接</h4><blockquote><p>双方的通信不需要连接。比如寄快递，我只需要将货物给邮寄公司，填写好对方信息就好了，当包裹到对方地址的时候，对方去查收就好。</p><p>UDP协议就是面向无连接。</p></blockquote><h3 id="电路交换与分组交换"><a href="#电路交换与分组交换" class="headerlink" title="电路交换与分组交换"></a>电路交换与分组交换</h3><h4 id="电路交换"><a href="#电路交换" class="headerlink" title="电路交换"></a>电路交换</h4><blockquote><p>从名字上很容易理解，也就是发送方和接受方通过一条电路传递数据，如果停止传递，那么电路断开（不要和上面的面向连接搞混了，这里的电路是单独的物理通路)。</p><p>及时通信电路空闲，其他用户无法使用。</p><p>举个例子，看过一些记录背景为上时代的电影，会有过打电话的不少镜头，主角打电话给某人，然后某中继接通了电话，主角说，帮我接通B，然后中继将线路搭给了B，这时候两个人才能通话。</p></blockquote><h4 id="分组交换"><a href="#分组交换" class="headerlink" title="分组交换"></a>分组交换</h4><blockquote><p>上面介绍过分组交换，这里不再介绍，在此说一下它的好处。</p><p>电路交换缺点很明显，两个人只要通信就占用一条物理道路，多不方便啊。但是分组交换的话，让每个人的通信数据变成一段一段的，大家一起使用一条或者多条物理道路(分组流水线)，这样道路的利用率就大大提高了。</p></blockquote><h3 id="单播，广播，多播，任播"><a href="#单播，广播，多播，任播" class="headerlink" title="单播，广播，多播，任播"></a>单播，广播，多播，任播</h3><h4 id="单播"><a href="#单播" class="headerlink" title="单播"></a>单播</h4><blockquote><p>一对一的通信，就如上面的固定电话。</p></blockquote><h4 id="广播"><a href="#广播" class="headerlink" title="广播"></a>广播</h4><blockquote><p>一对多的通信，比如电视观看节目，信号源向各家各户发送。</p></blockquote><h4 id="多播"><a href="#多播" class="headerlink" title="多播"></a>多播</h4><blockquote><p>和广播类似，但是接受方是指定的，不是广播距离的看电视一样，想看就能看，在多播中，是被规定好接受方的。比如群内视频，是由群里的成员可以加入。</p></blockquote><h4 id="任播"><a href="#任播" class="headerlink" title="任播"></a>任播</h4><blockquote><p>一台发送方主机从台接受方主机中选择接送方。与多播不同的是，它只能选择一个而不是多个。</p><p>看似一对多，其实还是一对一，只不过拥有了选择的对象。</p><p>就像老师(发送方)叫同学们(多个主机)回答问题，一般选择睡觉(指定的接受方)的那个。。。</p><p>域名解析就是任播，我们解析域名，从ip表中找到它真正对应的ip地址。</p></blockquote><h2 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h2><h3 id="什么是地址"><a href="#什么是地址" class="headerlink" title="什么是地址"></a>什么是地址</h3><blockquote><p>地址当然是记录某个事物当前处于的位置啦，在通信传输中，地址是具有唯一性的，一个地址只能指明一个事物，这其实和变成里的指针一个性质。</p><p>但是指名的事物并不代表只是一个个体，也有可能是一个团体，就像C++中某个指针指向了一个类的对象，而这个对象中又有各个成员变量。这个指针指向了一个对象，尽管这个对象中有多个成员，但这个对象依然是唯一的。</p><p>如下图，书上举了一个老师点名的例子。虽然地址指向的都可能是个群体，但是这些群体依然是唯一的。</p></blockquote><p><img src="https://confusel-images.oss-cn-shenzhen.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%9C%B0%E5%9D%80%E5%94%AF%E4%B8%80%E6%80%A7.png" alt=""></p><h3 id="地址的分类"><a href="#地址的分类" class="headerlink" title="地址的分类"></a>地址的分类</h3><blockquote><p>这里的分类不是编程中的int指针、char指针，而是不同协议的使用的地址。</p></blockquote><h4 id="MAC地址"><a href="#MAC地址" class="headerlink" title="MAC地址"></a>MAC地址</h4><blockquote><p>简单理解为电脑里网卡的唯一标识符。</p></blockquote><h4 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h4><blockquote><p>一个网络对应一台主机的地址，一个ip对应一个主机。各运营商有各自的ip范围。</p></blockquote><h4 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a>端口号</h4><blockquote><p>你的电脑分配给某个进程的通信号，其他电脑可以通过端口号，与你电脑中对应的进程进行通信。</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>第一章主要是介绍了通信的协议、还有数据传输的几种类型以及地址。</p><p>其实还有网关和中继器、交换机等一些偏物理的知识，只不过我就不总结了，因为做软件比较偏向传输层以上，这里仅仅看过当作了解。</p><p>这一章只是进入计网世界的预热。下一章的内容是TCP/IP的基础知识，即将进入这本书的正题。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识总结 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>&lt;学习记录&gt;线程、 协程、 进程的简单理解</title>
      <link href="/2019/MyLearn-ProcessAndThreadAndCoroutine/"/>
      <url>/2019/MyLearn-ProcessAndThreadAndCoroutine/</url>
      
        <content type="html"><![CDATA[<h2 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h2><blockquote><p>​    在了解协程之前，我们先了解一下操作系统中的堆、 栈。</p><p>​    再谈谈进程和线程。其中暂不介绍上下文。</p></blockquote><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><blockquote><p>​    在数据结构中，栈具有先进后出的特性，也就是说，将1,2,3按顺序添加到栈结构中，再依次取出数据时，数据顺序是这样的：3,2,1。</p><p>​    而在操作系统中，它是内存分配的一种方式，即动态分配内存。它由编译器自动分配和释放，主要用于存放函数的参数值，局部变量等等，而它的性质也遵循先进后出。</p><p>​    栈存放在一级缓存中，在被调用结束后会被立即释放。</p></blockquote><hr><h3 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h3><blockquote><p>​    在数据结构中，是一种树形结构，即完全二叉树，它的特性是某节点的值都不会比父节点的值大或者小，所以常常用来实现优先队列。</p><p>​    而在操作系统中，它和栈一样是动态分配内存，不同的是，它由我们分配和释放，如果我们没有主动释放，会在程序结束时被回收。</p><p>​    <strong>重点来了，它与数据结构的堆并不具有同种特性，它的性质更接近于链表。</strong></p><p>​    堆存放在二级缓存中，调用完毕并不会被系统直接回收。</p></blockquote><hr><h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><blockquote><p>​    进程即可并发执行的程序在某个数据集合上的一切计算活动。</p><p>​    可以简单的认为，在电脑上打开了一个软件，运行了一款游戏，就是开启了一个进程。</p></blockquote><h4 id="进程性质"><a href="#进程性质" class="headerlink" title="进程性质"></a>进程性质</h4><blockquote><ol><li>有生命周期</li><li><strong>拥有系统资源的基本单位</strong></li><li>进程之间可以对等的，也可以是父子结构。</li></ol></blockquote><h4 id="进程属性"><a href="#进程属性" class="headerlink" title="进程属性"></a>进程属性</h4><blockquote><ol><li>动态性：拥有生命周期</li><li>共享性：多个进程可以执行同个程序</li><li>独立性：每个进程都是OS中的一个操作实体，拥有自己的独立栈、 堆</li><li>制约性：共享资源的制约关系</li><li>并发性：单处理器可并发执行，多处理器可并行执行</li></ol></blockquote><h4 id="进程结构"><a href="#进程结构" class="headerlink" title="进程结构"></a>进程结构</h4><blockquote><ol><li>控制块：英文缩写PCB，每一个进程捆绑一个，用来存储进程的标识、 现场、 控制信息 ，同进程创建、 回收。</li><li>程序块：即进程执行的程序</li><li>核心栈： 进程在内核模式下运行时使用的堆栈， 中断或系统过程使用；</li><li>数据块：进程处理的数据空间， 包括数据、 处理函数的用户栈（用户态）和可修改的程序；</li></ol></blockquote><h4 id="进程的创建过程"><a href="#进程的创建过程" class="headerlink" title="进程的创建过程"></a>进程的创建过程</h4><blockquote><p>​    在进程列表中增加一项，然后从PCB池里申请一个空闲的PCB然后为新进程分配唯一的标识符，同时分配地址空间等等各种资源。随后初始化PCB，如标识符、 进程优先级等，然后设置就绪态，加入就绪队列。</p></blockquote><h4 id="进程的撤销过程"><a href="#进程的撤销过程" class="headerlink" title="进程的撤销过程"></a>进程的撤销过程</h4><blockquote><p>​    可分为正常和非正常撤销，也就是类似进程运行结束、 执行非法命令、 被中断等</p><p>​    根据被撤销进程的标识符从相应的队列中查找并移除，并把资源归还给上一级（父进程或者是OS），如果这个进程拥有子进程，那么先对子进程同样的操作，最后将PCB回收。</p></blockquote><h4 id="进程拥有的进程状态"><a href="#进程拥有的进程状态" class="headerlink" title="进程拥有的进程状态"></a>进程拥有的进程状态</h4><h5 id="三态"><a href="#三态" class="headerlink" title="三态"></a>三态</h5><p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1554482916&amp;di=e7971789a22228da570fc73db668aee5&amp;imgtype=jpg&amp;er=1&amp;src=http%3A%2F%2Fupload-images.jianshu.io%2Fupload_images%2F14257988-35ecc363f4919af0.png" alt=""></p><h5 id="七态"><a href="#七态" class="headerlink" title="七态"></a>七态</h5><p><img src="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=839532373,3126445145&amp;fm=26&amp;gp=0.jpg" alt=""></p><h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><blockquote><p>​    上面介绍了进程，可以看出进程的功能十分强大，那么为什么还需要线程呢？</p><p>​    首先需要明确一个概念，Linux系统中甚至没有真正的线程。不过，可以认为Linux是系统的线程是内核线程，所以调度是基于线程的。</p></blockquote><h4 id="引入线程的原因"><a href="#引入线程的原因" class="headerlink" title="引入线程的原因"></a>引入线程的原因</h4><blockquote><ol><li>进程切换开销大</li><li>进程通信代价大</li><li>进程间的并发性力度较粗，并发度不高，并发的本质是在时间上重叠的多个逻辑流，也就是说同时运行的多个逻辑流。并发编程要解决的一个很重要的问题就是对资源的并发访问的问题，也就是共享资源的问题。而两个进程恰恰很难在逻辑上表示共享资源。</li><li>不适应并行计算和分部并行的计算需求</li><li>不适合C/S计算的要求</li></ol></blockquote><h4 id="线程性质"><a href="#线程性质" class="headerlink" title="线程性质"></a>线程性质</h4><blockquote><ol><li>在引入线程这个概念之后，线程成为了CPU<strong>调度和分配的最小单位</strong>。</li><li>线程是进程的组成部分，是能够并发的实体。</li><li>线程<strong>不是拥有资源</strong>的单位，所以挂起状态对于线程没有任何意义。因此挂起操作不是线程级而是进程级状态。</li><li>线程可以创建另一个线程。但都是对等结构不是父子结构。</li></ol></blockquote><h4 id="线程结构"><a href="#线程结构" class="headerlink" title="线程结构"></a>线程结构</h4><blockquote><ol><li>线程控制块：英文缩写TCB，与进程的控制块相似，但是由进程操控。</li><li>线程用户栈</li><li>线程核心栈</li></ol></blockquote><hr><h4 id="线程与进程的关系"><a href="#线程与进程的关系" class="headerlink" title="线程与进程的关系"></a>线程与进程的关系</h4><h4 id=""><a href="#" class="headerlink" title=""></a><img src="https://gss0.bdstatic.com/94o3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike80%2C5%2C5%2C80%2C26/sign=9832170bbc315c60579863bdecd8a076/b8014a90f603738dd1bbb73cb31bb051f819ec3f.jpg" alt="img"></h4><blockquote><p>​    可以理解为线程是进程的一部分。一个线程只能属于一个进程，而一个进程可以有多个线程。线程是进程的一部分，所以线程有的时候被称为是轻权进程或者<a href="https://baike.baidu.com/item/%E8%BD%BB%E9%87%8F%E7%BA%A7%E8%BF%9B%E7%A8%8B" target="_blank" rel="noopener">轻量级进程</a>。</p><p>​    线程可以分为两部分：<strong>资源集合</strong>和<strong>线程集合</strong>。进程要支持线程的运行，并为线程提供虚拟地址空间和各种资源。</p></blockquote><h4 id="线程与进程的区别"><a href="#线程与进程的区别" class="headerlink" title="线程与进程的区别"></a>线程与进程的区别</h4><blockquote><ol><li>进程之间的通信，只能通过管道、 信号的方式通信。而线程使用的资源来源于进程的共享，通信起来并没有进程这么麻烦。</li><li>一个线程只能属于一个进程，但是一个进程可以拥有多个线程。多线程处理就是允许一个进程中在同一时刻执行多个任务。</li><li>进程有自己的不共享堆，不共享栈，线程有自己的不共享栈和共享堆。</li><li>进程是拥有资源的单位，线程是调度和分配的最小单位。</li></ol></blockquote><h4 id="多线程容易引发的问题"><a href="#多线程容易引发的问题" class="headerlink" title="多线程容易引发的问题"></a>多线程容易引发的问题</h4><h5 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h5><blockquote><p>​    我们都知道线程共享使用的是来自进程的资源，那么在多个线程同时访问资源时，同时对某个资源进行操作，就会发生一些错误。</p><p>​    比如买票，就剩最后一张票了，两个线程同时买票，都发现了最后一张，都买掉了它，那么这个时候，系统还剩-1张票。</p><p>​    显然这不是我们想看到的情况。</p><p>​    为了解决这种问题，出现了互斥锁、信号量的等等解决方案。因为介绍这些内容篇幅过长可以自行百度。</p></blockquote><h5 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h5><blockquote><p>​    死锁是指多个线程因竞争资源而造成的一种僵局（互相等待），经典的问题如<a href="https://baike.baidu.com/item/%E5%93%B2%E5%AD%A6%E5%AE%B6%E5%B0%B1%E9%A4%90%E9%97%AE%E9%A2%98/10929794?fr=aladdin" target="_blank" rel="noopener">哲学家就餐问题</a>,因为死锁问题可以另开篇幅，在这里同样不再描述。</p></blockquote><h3 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h3><h4 id="引入协程的原因"><a href="#引入协程的原因" class="headerlink" title="引入协程的原因"></a>引入协程的原因</h4><blockquote><p>​    线程其实并没有提高CPU的运行速率，而只是提高了运行效率，同时会很吃CPU的性能。</p><ol><li><p>涉及到同步、异步、互斥锁。</p></li><li><p>涉及到线程阻塞状态和可运行状态之间的切换。</p></li><li><p>涉及到线程上下文的切换。</p><p>可见一个进程内多个线程运作的时候进行以上操作会非常消耗性能。</p></li></ol></blockquote><p><img src="http://5b0988e595225.cdn.sohucs.com/images/20180622/6765e36cc4604fba897976638af03524.jpeg" alt=""></p><h4 id="协程性质"><a href="#协程性质" class="headerlink" title="协程性质"></a>协程性质</h4><blockquote><ol><li>如同操作系统拥有多个进程，进程拥有多个线程一样，线程拥有多个协程。</li><li>协程不是被操作系统内核所管理，而完全是由程序所控制（也就是在用户态执行）。</li><li>协程是在一个线程中，每个协程对CPU进行分时处理。</li><li>协程即与多线程情况下的线程比较类似：有自己的堆栈，自己的局部变量，有自己的指令指针，但与其它协同程序共享全局变量等很多信息。</li><li>协程造成阻塞是，会影响整个线程。</li></ol></blockquote><h4 id="线程和协程的区别"><a href="#线程和协程的区别" class="headerlink" title="线程和协程的区别"></a>线程和协程的区别</h4><blockquote><ol><li>协程 :同一时间只能执行某个协程。开辟多个协程开销不大。协程适合对某任务进行分时处理。</li><li>线程: 同一时间可以同时执行多个线程。开辟多条线程开销很大。线程适合多任务同时处理。</li><li>线程和协同程序的主要不同在于：在多处理器情况下，从概念上来讲多线程程序同时运行多个线程；而协同程序是通过协作来完成，在任一指定时刻只有一个协同程序在运行，并且这个正在运行的协同程序只在必要时才会被挂起。</li><li>协程需要保证是非堵塞的且没有相互依赖，协程基本上不能同步通讯，多采用一步的消息通讯，效率比较高。</li></ol></blockquote><h3 id="Unity3D中的线程、协程"><a href="#Unity3D中的线程、协程" class="headerlink" title="Unity3D中的线程、协程"></a>Unity3D中的线程、协程</h3><h4 id="创建的线程无法调用UnityAPI"><a href="#创建的线程无法调用UnityAPI" class="headerlink" title="创建的线程无法调用UnityAPI"></a>创建的线程无法调用UnityAPI</h4><blockquote><p>​    Unity是单线程设计的游戏引擎(很多都是，因为游戏大部分都是主循环结构)，它有一个负责主循环的主线程。基于MonoBehavior，因此游戏脚本拥有严格的生命周期。</p><p>​    尝试在Unity中创建线程后，很容易发现，在我们创建的线程运行函数中，无法调用Unity引擎提供的各种API，以及它提供的特殊对象。例如组件，但是常用的如int、struct类型是允许使用的。</p></blockquote><h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><blockquote><p>​    为了保证逻辑和画面按照严格的顺序更新。</p></blockquote><h4 id="无法使用UnityAPI，那么创建线程还有什么用"><a href="#无法使用UnityAPI，那么创建线程还有什么用" class="headerlink" title="无法使用UnityAPI，那么创建线程还有什么用"></a>无法使用UnityAPI，那么创建线程还有什么用</h4><blockquote><p>​    如果不是画面更新，也不是常规的逻辑更新（指包括AI、物理碰撞、角色控制这些），而是一些其他后台任务，比如网络传输：</p><p>​    正如TCP或者UDP协议的传输，在TCP中，我们需要确保长链接，需要一直接受发送端发送过来的数据，如果我们把它写在主线程下，会发生什么。我们在游戏拥有聊天服务这个功能，假设使用阻塞式TCP协议，那么我们打开与某玩家的聊天窗口，向其发送数据，然后就没有然后了，因为我们必须等待对方的回复。</p><p>​    而我们使用多线程就可以解决了。新增线程专门用于网络通讯，而主线程根据接受到的信息负责更新逻辑以及画面。</p></blockquote><h4 id="可我想对我的游戏进行调用UnityAPI的并发或者异步操作，怎么办——使用协程"><a href="#可我想对我的游戏进行调用UnityAPI的并发或者异步操作，怎么办——使用协程" class="headerlink" title="可我想对我的游戏进行调用UnityAPI的并发或者异步操作，怎么办——使用协程"></a>可我想对我的游戏进行调用UnityAPI的并发或者异步操作，怎么办——使用协程</h4><blockquote><p>​    协程，即协作式程序，其思想是一系列互相依赖的协程间依次使用CPU，每次只有一个协程工作，而其他协程处于休眠状态。协程实际上是在一个线程中，只不过每个协程对CUP进行分时，协程可以访问和使用unity的所有方法和component.</p><p>​    协程一般都是在一次Update之后被使用，协程在每次使用后会被挂起，等待下一次的使用。那么它的作用是什么呢。</p><p>​    比如，我们需要异步加载场景上的所有预置体，比如制作了一款关卡场景中物体比较多的游戏，我们需要在关卡开始前加载所有预置体(为了更能提现协程的作用，在这里先不考虑缓存池优化)，假设预置体真的很多，把加载都放在Start中执行，那么玩家可能会卡顿一段时间才能进入到游戏循环中，而我们使用协程，协程每次加载部分预置体，在Start中开启协程，那么协程会被执行一次，这个时候加载了部分预置体，再进行一次Update循环后，协程又一次被调用，又加载了部分预置体，而一秒中调用的Update次数足够多，所以并不会产生卡顿的感觉。</p></blockquote><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote><p>进程是操作系统拥有资源的单位，一个操作系统可拥有多个进程，拥有独立的栈和堆。通常对应一个运行的程序。</p><p>线程是CPU调度和分配的最小单位，一个进程可以拥有多个线程。拥有独立的栈和共享的堆(来自进程)。通常对应一个程序中的主要功能和并发功能。</p><p>协程可以说是用户态的轻量级线程，一个线程可以拥有多个协程。拥有用户栈和共享的堆(来自线程)。通常应用于异步中。</p></blockquote><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识总结 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>&lt;常用算法的C++实现&gt;图论</title>
      <link href="/2019/MyAlgorithm-edge/"/>
      <url>/2019/MyAlgorithm-edge/</url>
      
        <content type="html"><![CDATA[<h1 id="最短路径问题"><a href="#最短路径问题" class="headerlink" title="最短路径问题"></a>最短路径问题</h1><blockquote><p>从文字上理解，就是求哪到哪儿的路径最短，题目会给多个点，点与点之间是否相连，权值是多少。一般来说需要我们计算一个节点到其他所有节点的最短路径。然后输出源点到某点的最短路径。</p></blockquote><h2 id="Dijkstra算法"><a href="#Dijkstra算法" class="headerlink" title="Dijkstra算法"></a>Dijkstra算法</h2><blockquote><p>能解决的问题：无负边的单源最短路</p></blockquote><blockquote><p>在带权图 G = (V, E) 中，每条边都有一个权值w[i]。路径的长度为路径上所有边权之和。</p><p>求源点 s到图中其余各顶点的最短路径。</p></blockquote><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote><p>解决单源最短路径问题常用 Dijkstra 算法，用于计算一个顶点到其他所有顶点的最短路径。Dijkstra 算法的主要特点是以起点为中心，逐层向外扩展，每次都会取一个最近点继续扩展，直到取完所有点为止。</p></blockquote><h3 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h3><blockquote><p>我们定义带权图 G所有顶点的集合为V，接着我们再定义已确定从源点出发的最短路径的顶点集合为 U，初始集合 U 为空，记从源点 s 出发到每个顶点 vv 的距离为 dist_v，初始 dist_s=0。接着执行以下操作：</p><ol><li>从 V-U 中找出一个距离源点最近的顶点 v，将 v 加入集合 U，并用 dist_v 和顶点 v 连出的边来更新和 v 相邻的、不在集合 U 中的顶点的 dist；</li><li>重复第一步操作，直到 V=U或找不出一个从 s出发有路径到达的顶点，算法结束。<br>如果最后V≠U，说明有顶点无法从源点到达；否则每个 dist_i表示从 出发到顶点i 的最短距离。</li></ol></blockquote><h3 id="算法优化"><a href="#算法优化" class="headerlink" title="算法优化"></a>算法优化</h3><blockquote><p>Dijkstra最简单的版本就是使用一个数组当作上述的集合U，每一次遍历，找出目前最新且最短的边权，以它为新的源点，同时更新与它相关的最短路径的值。</p><p>我们可以使用一个优先队列去代替数组承担集合U，这样可以保证每次取出队列头部的边权当前最小的。省去了遍历和对比的时间。</p></blockquote><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><p><img src="http://wiki.mbalib.com/w/images/6/65/Dijkstra%E7%AE%97%E6%B3%95%E5%9B%BE.jpg" alt=""></p><blockquote><p>如上图 ，源点为左上角，黄色点内的数字代表源点到他们的距离。初始值都是无穷大99。</p><p>先push源点，然后开始探索图，取得队列头，即源点，开始遍历，源点到右边的点边权为2，比之前的99要小，那么更新距离，同时把这个点push进去，同理对其他连接的两个点进行操作。更新后的最新距离分别为9和6，当前优先队列的值为：2,6,9。这个时候发现没有连接其他点了，结束当前循环。此时的图为第一行第二列。</p><p>因为是优先队列，我们取得的头部是源点距离为2的点，也是除了源点到自身以外当前最短的点。同样进行上述操作。</p><p>因为每一次循环，已经确定过最短路径的点不会再被push到优先队列中，所以在优先队列为空的时候，我们已经获得了源点到各点的最短距离。</p><p>如果发现到某点的最短距离为99(无穷大)，说明无法到达这个点。</p></blockquote><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e4</span>+<span class="number">1</span>;</span><br><span class="line"><span class="comment">//存储from点,to点,和权值</span></span><br><span class="line"><span class="comment">//pair是std中的一种数据结构，存储两个数据，分别用first、second取得。</span></span><br><span class="line"><span class="comment">//可以用结构体代替</span></span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt;Edge[maxn];</span><br><span class="line"><span class="comment">//存储路径长度。</span></span><br><span class="line"><span class="keyword">int</span> s[maxn];</span><br><span class="line"><span class="comment">//根据节点数初始化。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Edge[i].clear();</span><br><span class="line">        <span class="comment">//因为求的是最小，所以初始值应该是无穷大，方便对比</span></span><br><span class="line">        s[i]=<span class="number">1e9</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstraByQueue</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//点数目，边数目，源点</span></span><br><span class="line">    <span class="keyword">int</span> n,e,sourse;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;e&gt;&gt;sourse;</span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    init(n);</span><br><span class="line">    <span class="comment">//from,to,worth</span></span><br><span class="line">    <span class="keyword">int</span> x,y,w;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;e;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y&gt;&gt;w;</span><br><span class="line">        <span class="comment">//x-&gt;y=w</span></span><br><span class="line">        Edge[x].push_back(make_pair(y,w));</span><br><span class="line">        <span class="comment">//如果是无向图，那么反过来添加一次。</span></span><br><span class="line">        <span class="comment">//Edge[y].push_back(make_pair(x,w));</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//源点到自身的路径肯定为0</span></span><br><span class="line">    s[sourse]=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//优先队列 ，存储边权，目标点(to)，优先队列会默认按照边权从大到小排序</span></span><br><span class="line">    priority_queue&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt; Q;</span><br><span class="line">    <span class="comment">//把源点到自身的距离(0)，以及自己的节点push到优先队列中</span></span><br><span class="line">    Q.push(make_pair(<span class="number">0</span>,sourse));</span><br><span class="line">    <span class="comment">//开始探索地图</span></span><br><span class="line">    <span class="keyword">while</span>(!Q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//获取当前相对最新点，然后从优先队列中弹出</span></span><br><span class="line">        <span class="keyword">int</span> cur=Q.top().second; Q.pop();</span><br><span class="line">        <span class="comment">//遍历当前点所连接的点(to)，判断他们之间的边权</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;Edge[cur].size();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//取得点</span></span><br><span class="line">            <span class="keyword">int</span> target=Edge[cur][i].first;</span><br><span class="line">            <span class="comment">//判断当前记录的 源点到目标点的距离s[target] 和当前最新点与目标点的距离Edge[cur][i].second+s[cur]长度关系</span></span><br><span class="line">            <span class="keyword">if</span>(s[target]&gt;Edge[cur][i].second+s[cur])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//如果发现当前记录并不是最短距离，那么就更新它</span></span><br><span class="line">                s[target]=Edge[cur][i].second+s[cur];</span><br><span class="line">                <span class="comment">//把到达这个点的边权和点下标push到优先队列中，因为优先队列默认是按大到小排序，我们的需求是小到大，所以推入-1*边权就可以了。</span></span><br><span class="line">                <span class="comment">//如果使用自定义的结构体，可以另写一个cmp。</span></span><br><span class="line">                Q.push(make_pair(<span class="number">-1</span>*s[target],target));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//当上面的队列为空的时候，说明我们以及探索完整个图了，此时我们的s[]储存的就是源点到其他点的最短距离了。</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;s[i]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="SPFA算法"><a href="#SPFA算法" class="headerlink" title="SPFA算法"></a>SPFA算法</h2><blockquote><p>能解决的问题：有负边的单源最短路</p></blockquote><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><blockquote><p>其实 SPFA 本质是 Bellman-ford 算法的队列优化。由国内段凡丁教授发表，大家可以自行百度查阅相关信息。</p><p>如果没有负权边的情况下还是使用堆/优先队列优化的dijkstra吧。</p></blockquote><h3 id="算法流程-1"><a href="#算法流程-1" class="headerlink" title="算法流程"></a>算法流程</h3><blockquote><p>在 SPFA 算法中，使用 d_i表示从源点到顶点 i 的最短路，额外用一个队列来保存即将进行拓展的顶点列表，并用 inq_i 来标识顶点 i是不是在队列中。</p><ol><li>初始队列中仅包含源点，且源点 s 的 d_s=0。</li><li>取出队列头顶点 u，扫描从顶点 u 出发的每条边，设每条边的另一端为 v，边 &lt;u,v&gt; 权值为 w，若 d_u+w&lt;d_v，则</li></ol><ul><li>将 d_v修改为 d_u+w</li><li>若 vv不在队列中，则将 v入队</li></ul><ol><li>重复步骤 2 直到队列为空<br>最终 dd数组就是从源点出发到每个顶点的最短路距离。如果一个顶点从没有入队，则说明没有从源点到该顶点的路径。</li></ol></blockquote><h3 id="负环判断"><a href="#负环判断" class="headerlink" title="负环判断"></a>负环判断</h3><blockquote><p>在进行 SPFA 时，用一个数组 cnt_i 来标记每个顶点入队次数。如果一个顶点入队次数 cnt_i大于顶点总数 n，则表示该图中包含负环。</p></blockquote><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><blockquote><p>在这里贴下最简单的spfa实现，至于lll和slf优化在日后了解后再更新。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt;Edge[maxn];</span><br><span class="line"><span class="comment">//多出的inQueue是为了判断某点是否在队列中。</span></span><br><span class="line"><span class="keyword">int</span> s[maxn],inQueue[maxn];</span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Edge[i].clear();</span><br><span class="line">        s[i]=<span class="number">1e9</span>;</span><br><span class="line">        inQueue[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spfa</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,e,source;</span><br><span class="line">    <span class="keyword">int</span> x,y,w;</span><br><span class="line">    <span class="comment">//记录被推入队列的次数，如果超过点数目n，说明有负环。</span></span><br><span class="line">    <span class="keyword">int</span> pushCount[maxn];</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;e&gt;&gt;source;</span><br><span class="line">    init(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;e;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y&gt;&gt;w;</span><br><span class="line">        Edge[x].push_back(make_pair(y,w));</span><br><span class="line">        <span class="comment">//初始化推入次数为0</span></span><br><span class="line">        pushCount[x]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//在这里使用的是队列不是优先队列，lll和slf优化可以使用deque</span></span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line">    <span class="comment">//到自身距离为0</span></span><br><span class="line">    s[source]=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//推入次数更新</span></span><br><span class="line">    pushCount[source]=<span class="number">1</span>;</span><br><span class="line">    <span class="comment">//推入</span></span><br><span class="line">    Q.push(source);</span><br><span class="line">    <span class="comment">//开始探索</span></span><br><span class="line">    <span class="keyword">while</span>(!Q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//取队头</span></span><br><span class="line">        <span class="keyword">int</span> cur=Q.front();</span><br><span class="line">        Q.pop();</span><br><span class="line">        <span class="comment">//此时队头对应的点已经不在队列里了。</span></span><br><span class="line">        inQueue[cur]=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">//和上面的dijkstra算法一样进行松弛处理</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;Edge[cur].size();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> target=Edge[cur][i].first;</span><br><span class="line">            <span class="keyword">if</span>(s[target]&gt;Edge[cur][i].second+s[cur])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//更新最短路径</span></span><br><span class="line">                s[target]=Edge[cur][i].second+s[cur];</span><br><span class="line">                <span class="comment">//如果这个点依然在队列里，那么就不需要推入</span></span><br><span class="line">                <span class="keyword">if</span>(inQueue[target])</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">               <span class="comment">//如果推入此时大于点的数目n，说明有负环</span></span><br><span class="line">                <span class="keyword">if</span>(++pushCount[target]&gt;=n)</span><br><span class="line">                &#123;</span><br><span class="line">                                     <span class="built_in">cout</span>&lt;&lt;<span class="string">"-1"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                                     <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//再此将它推入</span></span><br><span class="line">                inQueue[target]=<span class="number">1</span>;</span><br><span class="line">                Q.push(target);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//输出最短距离</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;s[i]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Floyd算法"><a href="#Floyd算法" class="headerlink" title="Floyd算法"></a>Floyd算法</h2><blockquote><p>能解决的问题：多源点最短路径</p><p>时间复杂度很高，毕竟要求出所有点到其他点的最短距离。</p></blockquote><h3 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h3><blockquote><p>Floyd 算法是一种利用动态规划的思想、计算给定的带权图中任意两个顶点之间最短路径的算法。相比于重复执行多次单源最短路算法，Floyd 具有高效、代码简短的优势，在解决图论最短路题目时比较常用。</p></blockquote><h3 id="算法流程-2"><a href="#算法流程-2" class="headerlink" title="算法流程"></a>算法流程</h3><blockquote><p>Floyd 的基本思想是：对于一个顶点个数为 n 的有向图，并有一个n×n 的E[][]，其中矩阵横列下标相等，代表自身到自身，对应的值应为0<br>对于其余任意两个顶点 i,j若它们之间存在有向边，则以此边权上的权值作为E[i][j]=w；<br>若两个顶点i,j 之间不存在有向边，则E[i][j]=INF。<br>对于循环阶段 ，尝试增加一个中继点 k，如果通过中间顶点使得最短路径变短了，就更新结果。<br>累加 k，重复遍历所有可能成为中继的点下标，直到 k=n。<br>算法结束后，矩阵 E[][]中的元素就代表着图中任意两点之间的最短路径长度。</p></blockquote><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e4</span>+<span class="number">1</span>;</span><br><span class="line"><span class="comment">//用矩阵存储距离</span></span><br><span class="line"><span class="keyword">int</span> g[maxn][maxn]; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == j) &#123;</span><br><span class="line">                <span class="comment">//到自身的距离为0</span></span><br><span class="line">                g[i][j] = <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//初始化为无穷大</span></span><br><span class="line">                g[i][j] = inf;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">floyd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,e;</span><br><span class="line">    <span class="keyword">int</span> x,y,w;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;e;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;e;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y&gt;&gt;w;</span><br><span class="line">        <span class="comment">//x到y的边权为w</span></span><br><span class="line">        g[x][y]=w;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//三重循环，分别代表中继点k、当前点i(from)，目标点j(to)</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; ++k) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">                <span class="comment">//如果i到k+k到j的距离比原来i直接到j的距离还短，就更新</span></span><br><span class="line">                <span class="keyword">if</span> (g[i][k] + g[k][j] &lt; g[i][j]) &#123;</span><br><span class="line">                    g[i][j] = g[i][k] + g[k][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="最小生成树问题"><a href="#最小生成树问题" class="headerlink" title="最小生成树问题"></a>最小生成树问题</h1><blockquote><p>一个有 n 个结点的<a href="https://baike.baidu.com/item/%E8%BF%9E%E9%80%9A%E5%9B%BE/6460995" target="_blank" rel="noopener">连通图</a>的生成树是原图的极小连通子图，且包含原图中的所有 n 个结点，并且有保持图连通的最少的边。</p><p>一般常见题目是求道路如何建设，使得各个位置能够互通，并且花费最少。</p></blockquote><h2 id="prim算法"><a href="#prim算法" class="headerlink" title="prim算法"></a>prim算法</h2><h3 id="概述-3"><a href="#概述-3" class="headerlink" title="概述"></a>概述</h3><blockquote><p>Prim算法求最小生成树的时候和边数无关，和顶点数有关，所以适合求解稠密网的最小生成树。</p><p>每一次从已经纳入最小生成树的点出发，找到所连接的未纳入的最短边权点，将其纳入生成树中，直到遍历所有点。</p></blockquote><h3 id="算法流程-3"><a href="#算法流程-3" class="headerlink" title="算法流程"></a>算法流程</h3><blockquote><ol><li><p>将一个图分为两部分，一部分归为点集U，一部分归为点集V，U的初始集合为{V1}，V的初始集合为{ALL-V1}。</p></li><li><p>针对U开始找U中各节点的所有关联的边的权值最小的那个，然后将关联的节点Vi加入到U中，并且从V中删除（注意不能形成环）。</p></li><li><p>递归执行步骤2，直到V中的集合为空。</p></li><li><p>U中所有节点构成的树就是最小生成树。</p></li></ol></blockquote><h3 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h3><p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1553341419376&amp;di=6ec4836b72efa5b6776dbb8bd54b0e37&amp;imgtype=0&amp;src=http%3A%2F%2Fpic002.cnblogs.com%2Fimages%2F2011%2F282432%2F2011052215540276.jpg" alt=""></p><blockquote><p>如上图，我们以点为单位，从V1点出发，找到它连接的点V2、V3、V4，其中最短边权为V1-&gt;V3=1，所以我们将V3纳入最小生成树(算法流程所述的集合U)，此时U为{V1、V3}。</p><p>然后从V1、V3这个最小生成树所连接的点继续寻找，找到V3-&gt;V6的边权最小，为4，那么纳入最小生成树，继续以上操作，直到遍历完毕。</p><p>如果遍历结束后，发现有些点没被访问，就说明无法构成生成树。</p></blockquote><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">4e+1</span>;</span><br><span class="line"><span class="comment">//和前面的算法一样使用vector&lt;pair&lt;int,int&gt; &gt;</span></span><br><span class="line"><span class="comment">//pair存储to,value</span></span><br><span class="line"><span class="comment">//G[i]的i代表from</span></span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt;G[maxn];</span><br><span class="line"><span class="keyword">int</span> vis[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">Prim</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,e,x,y,z;</span><br><span class="line">    <span class="comment">//最小生成树的权值</span></span><br><span class="line"><span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//输入点、边的数目</span></span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;e;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;e;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y&gt;&gt;z;</span><br><span class="line">        <span class="comment">//一般都是求无向图的最小生成树，有向图可以使用最小树形图。</span></span><br><span class="line">        <span class="comment">//-1*z 是因为优先队列默认从大到小，我们需要从小到大，随意推入取负的值。</span></span><br><span class="line">        <span class="comment">//自己实现结构体可以自己另写cmp</span></span><br><span class="line">G[x].push_back(make_pair(y,<span class="number">-1</span>*z));</span><br><span class="line">G[y].push_back(make_pair(x,<span class="number">-1</span>*z));</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//从第一个点开始，下标为0，或者定义为1，后面也要从1开始。</span></span><br><span class="line">vis[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">priority_queue&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt; Q;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;G[<span class="number">0</span>].size();i++)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="comment">//遍历连接到的点，推入优先队列中，会自动按边权值排序。</span></span><br><span class="line">Q.push(G[<span class="number">0</span>][i]);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//开始探索</span></span><br><span class="line"><span class="keyword">while</span>(!Q.empty())</span><br><span class="line">&#123;</span><br><span class="line">        <span class="comment">//取得队头的点的连接目标点to和权值value</span></span><br><span class="line"><span class="keyword">int</span> to=Q.top().first;</span><br><span class="line"><span class="keyword">int</span> value=Q.top().second;</span><br><span class="line">        <span class="comment">///弹出</span></span><br><span class="line">Q.pop();</span><br><span class="line">        <span class="comment">//如果已经访问过，也就是说，已经在当前的生成树中/集合U中</span></span><br><span class="line"><span class="keyword">if</span>(vis[to])</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">        <span class="comment">//否则标记以访问/纳入</span></span><br><span class="line">vis[to]=<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//加入最小生成树的权值，因为之前我们把每条边的权值当作负数推入，这里减到而不是加上，--得+</span></span><br><span class="line">res-=value;</span><br><span class="line">        <span class="comment">//遍历当前点可以到达的所有点，推入优先队列。</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;G[to].size();i++)</span><br><span class="line">&#123;</span><br><span class="line">Q.push(G[to][i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//如果有点没访问，说明无法构成最小生成树</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line"><span class="keyword">if</span>(vis[i]==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="number">-1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//输出花费</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;res&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Kruskal算法"><a href="#Kruskal算法" class="headerlink" title="Kruskal算法"></a>Kruskal算法</h2><h3 id="概述-4"><a href="#概述-4" class="headerlink" title="概述"></a>概述</h3><blockquote><p>与prim相反，kruskal算法的注重点是边而不是点，它每次取图中相对权值最小的边，然后将边的两端点纳入集合中。而它基于并查集的思想。（<a href="https://blog.csdn.net/qq_41593380/article/details/81146850" target="_blank" rel="noopener">什么是并查集</a>)</p></blockquote><h3 id="算法流程-4"><a href="#算法流程-4" class="headerlink" title="算法流程"></a>算法流程</h3><blockquote><p>创建一个数组，为每个节点存储自身的父节点，初始化为自身。也就是刚开始，每个人只指向自己。</p><p>我们将边权按从小到大的顺序，排序好边权和对应的两端点。</p><p>我们取当前最小边权，把其两端点合并，也就是让他们的存储父节点的数组对应的值指向同一个节点，换句话说，这就是一个两个点组合成的子树了。</p><p>一直到所有点都纳入那个子树。</p><p>注意的是，合并两个点时，不是简单的赋值点下标，而是应该找到点的最终父节点，再把其赋值给另一端点的数组索引中。</p></blockquote><h3 id="例子-2"><a href="#例子-2" class="headerlink" title="例子"></a>例子</h3><p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1553341419376&amp;di=6ec4836b72efa5b6776dbb8bd54b0e37&amp;imgtype=0&amp;src=http%3A%2F%2Fpic002.cnblogs.com%2Fimages%2F2011%2F282432%2F2011052215540276.jpg" alt=""></p><p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1553344343733&amp;di=3c4090aa5fbe76c7819d0577bcc38f64&amp;imgtype=0&amp;src=http%3A%2F%2Fwww.xdwy.com.cn%2FDOWN%2Fcourse%2Fsffxysj%2Fmnst%2Fmnst1.files%2Fimage011.gif" alt=""></p><blockquote><p>下图是kruskal算法，因为和prim算法用的是同一个原图，所以一起展示。</p><p>将边权排序得：1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;5-&gt;5-&gt;6-&gt;6</p><p>这里采用按秩合并。</p><p>我们取1，它的两端点是V1、V3 ，将他们合并 {V1,V3}，他们此时记录父节点的数组f[V1]=f[V3]=V1;</p><p>同理取2，它的两端点是V4、V6， 将他们合并{V4，V6},他们此时记录父节点的数组f[V4]=f[V6]=V4;</p><p>同理取3，它的两端点是V2、V5， 将他们合并{V2，V5},他们此时记录父节点的数组f[V2]=f[V5]=V2;</p><p>同理取4，它的两端点是V3、V6， 将他们合并{V3，V6},注意，这时候，V3的父节点即f[V3]的值为V1，而V6的父节点即f[V6]的值为V4，将其赋值，得f[V3]=f[V4]=V1,而V6的父节点依然为V4，但是V6的祖父节点f[V4]是V1了。合并的集合也成{V1、V3 、V6、V4}</p><p>此时树为：V1-&gt;V3</p><p>​            \-&gt;V4-&gt;V6</p><p>同理取5，把端点V3的祖父节点赋值给另一个断点的祖父节点f[V2]，最后得树：</p><p>V1-&gt;V3-&gt;V2-&gt;V5</p><p>​     \-&gt;V4-&gt;V6</p></blockquote><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">1</span>;</span><br><span class="line"><span class="comment">//记录父亲节点</span></span><br><span class="line"><span class="keyword">int</span> father[maxn];</span><br><span class="line"><span class="comment">//因为我们需要对边权排序，并且需要获得两端点的下标，那么之前的vector&lt;pair&lt;,&gt;&gt; 在这里就用处不大了。</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> from, to;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> value;</span><br><span class="line">    <span class="comment">//重写操作符，让它进入优先队列时自动按从小到大排序</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> Edge x,<span class="keyword">const</span> Edge y)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> x.value&gt;y.value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment">//初始化，让所有点的父节点为自身</span></span><br><span class="line">        father[i]=i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查找组父节点</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findRoot</span><span class="params">(<span class="keyword">int</span> target)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//如果父节点是自身，说明已经到头了，也就是找到祖父了。</span></span><br><span class="line">    <span class="keyword">return</span> father[target]==target ?target:findRoot(father[target]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断两个点x和y是不是指向同一个父亲节点，也就是是否在同一个集合中</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isUnion</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> findRoot(x)==findRoot(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//整合</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">comeTogeter</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(isUnion(x,y)) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="comment">//把x的祖父节点的父节点设置为y的祖父节点。</span></span><br><span class="line">    father[findRoot(x)]=findRoot(y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">kruskal</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//点、边</span></span><br><span class="line">    <span class="keyword">int</span> n,e;</span><br><span class="line"><span class="comment">//to from worth</span></span><br><span class="line">    <span class="keyword">int</span> x,y,w;</span><br><span class="line">    <span class="comment">//花费</span></span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//临时Edge对象</span></span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;e;</span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    init(n);</span><br><span class="line">    priority_queue&lt;Edge&gt; Q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;e;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y&gt;&gt;w;</span><br><span class="line">        Edge temp;</span><br><span class="line">        temp.from=x;</span><br><span class="line">        temp.to=y;</span><br><span class="line">        temp.value=w;</span><br><span class="line">        Q.push(temp);</span><br><span class="line">    &#125;</span><br><span class="line">    Edge temp;</span><br><span class="line">    <span class="keyword">while</span>(!Q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment">//取队列头，C++提供浅拷贝，直接赋值就好了</span></span><br><span class="line">        temp=Q.top();</span><br><span class="line">        Q.pop();</span><br><span class="line">        <span class="comment">//判断是否在同个集合里，如果在就跳过</span></span><br><span class="line">        <span class="keyword">if</span>(isUnion(temp.from,temp.to))</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">         <span class="comment">//不在，那么整合</span></span><br><span class="line">        comeTogeter(temp.from,temp.to);</span><br><span class="line">        <span class="comment">//加入边权</span></span><br><span class="line">        res+=temp.value;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//判断是不是所有点都在一个集合/生成树中</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">        <span class="keyword">if</span>(!isUnion(<span class="number">0</span>,i))</span><br><span class="line">    &#123;</span><br><span class="line">        res=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;res&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="最大匹配问题"><a href="#最大匹配问题" class="headerlink" title="最大匹配问题"></a>最大匹配问题</h1><blockquote><p>把所有点分成两个左右集合，左右集合里的点可以与对面集合的多个点有边，但不与同集合的点有边。</p><p>那么一般会问你求最大匹配和完美匹配。</p><p>什么是最大匹配？</p><p>​    上面谈到一个点可以与对面多个点有边，所以有可能出现左集合中的两点与对面集合的某点都有一条边，那么怎么分配，才能尽量让左右集合里的点一一对应且不重复呢。</p><p>​    网上很多都是拿男女生牵手的例子，每个男生都对自己心仪的女生们发出牵手请求，如何安排使得尽量满足每个男生都能牵到心仪女生的手，并且不会出现两个男生抢一个女生的 情况。求能牵手成功的最大数量，就是最大匹配。</p><p>​        </p><p>什么时完美匹配？</p><p>​    基于最大匹配，左右集合的所有点都与对面集合有且只有一条边。</p><p>​    如图Fig.4 ，1-7；2-5；3-6‘4-8；一一对应且不占用同个右边的点。</p></blockquote><p><img src="https://img.renfei.org/2013/08/2.png" alt=""></p><p><img src="https://img.renfei.org/2013/08/4.png" alt="Maximum Matching"></p><h2 id="匈牙利算法"><a href="#匈牙利算法" class="headerlink" title="匈牙利算法"></a>匈牙利算法</h2><h3 id="概述-5"><a href="#概述-5" class="headerlink" title="概述"></a>概述</h3><blockquote><p>发现概述不起来，直接看算法流程吧0 0</p></blockquote><h3 id="算法流程-5"><a href="#算法流程-5" class="headerlink" title="算法流程"></a>算法流程</h3><blockquote><p>假设有集合UX、UY，其中UX有多个点连接UY中的n个点，n&gt;=1</p><p>从UX的点xi开始遍历，找到它连接的第一个对面点yj，如果这个对面点yj没有被连接，那么我们将该点xi和对面点yi连接。</p><p>如果对面点yj被连接了，这时候并不是直接放弃，我们获取对面点yj所连接的点xk,这时候我们对xk进行上述操作，也就是说，我们要找到xk能连接的下一个对面点(抛开yj)</p><p>​    1.如果找不到，说明xk只能连接yj，那么xi只能找它的下一个可连接点。</p><p>​    2.如果找得到，那么让xk放弃yj，连接其他的点，让xi与yj连接。</p><p>OK，这就是主要流程，我们对所有UX中的点按顺序进行上述操作，直到最后一个点，我们就可以找出最大匹配的数量了。</p></blockquote><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//邻接矩阵 值为1 代表i和j可以连接</span></span><br><span class="line"><span class="keyword">int</span> e[maxn][maxn];</span><br><span class="line"><span class="comment">//记录当前X集合和Y集合里某点连接的点下标</span></span><br><span class="line"><span class="keyword">int</span> fromX[maxn],fromY[maxn];</span><br><span class="line"><span class="comment">//是否访问过</span></span><br><span class="line"><span class="keyword">int</span> vis[maxn];</span><br><span class="line"><span class="comment">//X集合的数目和Y的</span></span><br><span class="line"><span class="keyword">int</span> nX,nY;</span><br><span class="line"></span><br><span class="line"><span class="comment">//尝试搜寻连接 </span></span><br><span class="line"><span class="comment">//x：尝试连接的点下标</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">line</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//从1到nY遍历，也可以从0到ny-1，看输入情况</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> y=<span class="number">1</span>;y&lt;=nY;y++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//如果他们可以连接 并且 Y集合的y点没有被访问过(被连接过)</span></span><br><span class="line">        <span class="keyword">if</span>(e[x][y]&amp;&amp;!vis[y])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//访问y</span></span><br><span class="line">            vis[y]=<span class="number">1</span>;</span><br><span class="line">            <span class="comment">//如果y连接的点=-1，-1代表还没和任何点连接</span></span><br><span class="line">            <span class="comment">//或者连接了某点 调用line为这个点递归查找是否可以连接其他点</span></span><br><span class="line">            <span class="keyword">if</span>(fromY[y]==<span class="number">-1</span>||line(fromY[y]))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//让x和y连接，并在fromX/Y中登记连接对象的下标</span></span><br><span class="line">                fromX[x]=y;</span><br><span class="line">                fromY[y]=x;</span><br><span class="line">                <span class="comment">//返回可以连接</span></span><br><span class="line">                <span class="comment">//注意 如果这个点y是第一次被访问，此时返回true代表它第一次被连接</span></span><br><span class="line">                <span class="comment">//如果是被递归调用，则代表它以被允许连接的下一个点连接</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回不可以连接||不可以被下一个点连接</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//最大匹配</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxMatch</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//连接数n x集合数 y集合数</span></span><br><span class="line">    <span class="keyword">int</span> n,x,y;</span><br><span class="line">    <span class="comment">//最大匹配的数值</span></span><br><span class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(fromX,<span class="number">-1</span>,<span class="keyword">sizeof</span>(fromX));</span><br><span class="line">    <span class="built_in">memset</span>(fromY,<span class="number">-1</span>,<span class="keyword">sizeof</span>(fromY));</span><br><span class="line">    <span class="built_in">memset</span>(e,<span class="number">0</span>,<span class="keyword">sizeof</span>(e));</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;nX&gt;&gt;xY;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y;</span><br><span class="line">        <span class="comment">//可以连接 为1</span></span><br><span class="line">        e[x][y]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=nX;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//如果x集合中的i还没有和对面连接</span></span><br><span class="line">        <span class="keyword">if</span>(fromX[i]==<span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//格式化访问数组vis 这个是精髓 因为每一次调用line，都可能造成第一次连接的那个点的重新连接，所以vis数组是要被格式化的。</span></span><br><span class="line">            <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">            <span class="comment">//如果可以连接 那么数目加1</span></span><br><span class="line">            <span class="keyword">if</span>(line(i)) sum++;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果sum=nX||sum=nY  （看题目要求，以X集合为主还是Y集合为主）</span></span><br><span class="line">    <span class="comment">//如果X/Y集合的所有点都成功连接了唯一的对面集合的点 那么就是完美匹配~</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;sum&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法学习 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>&lt;常用算法的C++实现&gt;大整数字符串的加减乘(含负数)</title>
      <link href="/2019/MyAlgorithm-bigNum/"/>
      <url>/2019/MyAlgorithm-bigNum/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是大数"><a href="#什么是大数" class="headerlink" title="什么是大数"></a>什么是大数</h2><blockquote><p>首先计算机的数据类型所能表示的范围都是有限的。</p></blockquote><center>表数据来源于网络</center><table><thead><tr><th>Type</th><th>Size</th><th>数值范围</th></tr></thead><tbody><tr><td>无值型void</td><td>0 byte</td><td>无值域</td></tr><tr><td>布尔型bool</td><td>1 byte</td><td>true   false</td></tr><tr><td>有符号短整型short [int] /signed short [int]</td><td>2 byte</td><td>-32768~32767</td></tr><tr><td>无符号短整型unsigned short [int]</td><td>2 byte</td><td>0~65535</td></tr><tr><td>有符号整型int /signed [int]</td><td>4 byte</td><td>-2147483648~2147483647</td></tr><tr><td>无符号整型unsigned [int]</td><td>4 byte</td><td>0~4294967295</td></tr><tr><td>有符号长整型long [int]/signed long [int]</td><td>4 byte</td><td>-2147483648~2147483647</td></tr><tr><td>无符号长整型unsigned long [int]</td><td>4 byte</td><td>0~4294967295</td></tr><tr><td>long long</td><td>8 byte</td><td>0~18446744073709552000</td></tr><tr><td>有符号字符型char/signed char</td><td>1 byte</td><td>-128~127</td></tr><tr><td>无符号字符型unsigned char</td><td>1 byte</td><td>0~255</td></tr><tr><td>宽字符型wchar_t (unsigned short.)</td><td>2 byte</td><td>0~65535</td></tr><tr><td>单精度浮点型float</td><td>4 byte</td><td>-3.4E-38~3.4E+38</td></tr><tr><td>双精度浮点型double</td><td>8 byte</td><td>1.7E-308~1.7E+308</td></tr><tr><td>long double</td><td>8 byte</td></tr></tbody></table><blockquote><p>而比这些数值范围更大、或者是计算之后超出数值范围的数值都可以成为大数，当我们要对位数达到上百位的大整数进行计算，这些数据类型显然不能满足我们的要求，因此我们需要通过算法来实现这些功能。</p></blockquote><h2 id="正数加法"><a href="#正数加法" class="headerlink" title="正数加法"></a>正数加法</h2><h3 id="大体思路"><a href="#大体思路" class="headerlink" title="大体思路"></a>大体思路</h3><blockquote><p>思想是采用用字符串表示大数。末尾逐位相加，超十进位。</p></blockquote><h4 id="计算前"><a href="#计算前" class="headerlink" title="计算前"></a>计算前</h4><h5 id="被加数比加数长度短"><a href="#被加数比加数长度短" class="headerlink" title="被加数比加数长度短"></a>被加数比加数长度短</h5><blockquote><p>为了方便计算，我们在接受到两个需要相加的正整数时，应该将更长位数的大数置上，短的置下。</p></blockquote><h4 id="计算过程"><a href="#计算过程" class="headerlink" title="计算过程"></a>计算过程</h4><h5 id="1-长度不扩充情况"><a href="#1-长度不扩充情况" class="headerlink" title="1.长度不扩充情况"></a>1.长度不扩充情况</h5><center>197+13计算</center><blockquote><p>面向下面的大数，从末位开始与上置位的每一位对应数值相加。即表中的下标2。</p></blockquote><table><thead><tr><th>当前游标</th><th></th><th></th><th></th></tr></thead><tbody><tr><td>a</td><td>1</td><td>9</td><td>7</td></tr><tr><td>b</td><td></td><td>1</td><td>3</td></tr></tbody></table><blockquote><p>​    a[2]+b[2] =&gt; 7+3=10，发现计算点相加后大于等于10而造成了进位，那么我们应该自身减10，通过为上置位的进位点加1，即9+1=10。至于处理后进位点是否也大于10，我们无需处理，因为我们只需要关心当前位的运算，以及对前一位的影响（即表中的计算点和进位点）。 假设进位点同时也大于10，那么我们在它变成当前点时再进行计算进位就好了。</p></blockquote><table><thead><tr><th>当前游标</th><th></th><th>进位点</th><th>计算点</th></tr></thead><tbody><tr><td>a</td><td>1</td><td>9-&gt;10</td><td>7-&gt;10-&gt;0</td></tr><tr><td>b</td><td></td><td>1</td><td>3</td></tr></tbody></table><blockquote><p>​    计算点计算，10+1=11，  计算点自身减10，发现需要进位，进位点加1。得到结果210。</p><p>如果进位时，发现进位点不存在，那么意味着相加后，长度发生了变化，这个时候，如果只是相加运算，我们只需要在上置位字符串a前方加一个’1’就好了，<strong>为什么就是’1’呢，因为保证计算点的数值是个数位，无论再怎么大也不会产生进位点进2位的情况。</strong></p><p><strong>但是，如果需要被大数相乘的函数调用，就不能简单的加1了，因为相乘后可能出现进位点的数值超过1.当然是为了以防万一，但感觉似乎不会产生进位+2以上的情况。。。</strong></p></blockquote><table><thead><tr><th>当前游标</th><th>进位点</th><th>计算点</th><th></th></tr></thead><tbody><tr><td>a</td><td>1-&gt;2</td><td>10-&gt;11-&gt;1</td><td>0</td></tr><tr><td>b</td><td></td><td>1</td><td>3</td></tr></tbody></table><h5 id="2-长度扩充情况"><a href="#2-长度扩充情况" class="headerlink" title="2.长度扩充情况"></a>2.长度扩充情况</h5><center>99+1计算</center><table><thead><tr><th>当前游标</th><th>进位点</th><th>计算点</th></tr></thead><tbody><tr><td>a</td><td>9</td><td>9</td></tr><tr><td>b</td><td></td><td>1</td></tr></tbody></table><blockquote><p>a[1]+b[1]=&gt;9+1=10，计算点自身减10，进位点进位，9+1=10，10-10=0</p></blockquote><table><thead><tr><th>当前游标</th><th>进位点</th><th>计算点</th></tr></thead><tbody><tr><td>a</td><td>9-&gt;10</td><td>9-&gt;10-&gt;0</td></tr><tr><td>b</td><td></td><td>1</td></tr><tr><td></td></tr></tbody></table><blockquote><p>计算点a[0]+b[0]=&gt; 10+0=0,，计算点自身减10，10-10=0,进位点进位，发现超出长度，此时在字符串首加’1’，得到结果100。</p></blockquote><table><thead><tr><th>当前游标</th><th>进位点</th><th>计算点</th><th></th></tr></thead><tbody><tr><td>a</td><td>1</td><td>10-&gt;0</td><td>0</td></tr><tr><td>b</td><td></td><td></td><td>1</td></tr></tbody></table><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">bigNumAdd</span><span class="params">(<span class="built_in">string</span> a,<span class="built_in">string</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//把长的字符串上置位，即换成a</span></span><br><span class="line">    <span class="keyword">if</span>(a.length()&lt;b.length())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//交换</span></span><br><span class="line">        swap(a,b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//计算点下标从长度-1开始，取两个i、j变量指向计算点，是为了判断是否结束以及是否超出</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=a.length()<span class="number">-1</span>,j=b.length()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--,j--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//j是字符串b的计算点下标，如果依然大于0，说明还在长度内，可以正常计算</span></span><br><span class="line">        <span class="comment">//正常计算的时候利用ascii码性质-'0'获得实际上增加的数值</span></span><br><span class="line">        <span class="comment">//如果超出了就加0，即不变</span></span><br><span class="line">        a[i]+=(j&gt;=<span class="number">0</span>?b[j]-<span class="string">'0'</span>:<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//发现计算点大于10，需要进位</span></span><br><span class="line">        <span class="keyword">if</span>(a[i]-<span class="string">'0'</span>&gt;=<span class="number">10</span>)</span><br><span class="line">        &#123;           </span><br><span class="line">            </span><br><span class="line">            <span class="comment">//如果计算点在a中的位置不是首位，那么进位点正常加上进位数</span></span><br><span class="line">            <span class="keyword">if</span>(i)</span><br><span class="line">                a[i<span class="number">-1</span>]+=((a[i]-<span class="string">'0'</span>)/<span class="number">10</span>);</span><br><span class="line">            <span class="comment">//如果是首位，也就是说，进位点超出了原本的长度，那么我们在a字符串这里加上进位的值就好了</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                a=(<span class="keyword">char</span>)(((a[i]-<span class="string">'0'</span>)/<span class="number">10</span>)+<span class="string">'0'</span>)+a;</span><br><span class="line">             <span class="comment">//自身余10</span></span><br><span class="line">            a[i]=((a[i]-<span class="string">'0'</span>)%<span class="number">10</span>)+<span class="string">'0'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="减法"><a href="#减法" class="headerlink" title="减法"></a>减法</h2><h3 id="大体思路-1"><a href="#大体思路-1" class="headerlink" title="大体思路"></a>大体思路</h3><blockquote><p>关键思路和加法差别不大，只需要在对应的操作更改以下就好了，当然，在这之前需要对被减数和减数。</p></blockquote><h4 id="计算前-1"><a href="#计算前-1" class="headerlink" title="计算前"></a>计算前</h4><h5 id="1-被减数为负数"><a href="#1-被减数为负数" class="headerlink" title="1.被减数为负数"></a>1.被减数为负数</h5><blockquote><p>由 -a-b = -(a+b) ，其中a&gt;0 得</p><p>我们将被减数的负号去掉，然后把被减数和减数当作两个正整数相加，得到的结果加上符号即可。</p><p>直接调用上面写的相加函数就好了。</p></blockquote><h5 id="2-被减数是正数"><a href="#2-被减数是正数" class="headerlink" title="2.被减数是正数"></a>2.被减数是正数</h5><blockquote><p>这时候我们要考虑被减数和减数他们的长度关系了,如果被减数长度比减数小，那么结果必然是负数。</p><p>由 a-b = –(b-a)，其中a&gt;0 得</p><p>我们将被减数和减数交换，让长的减数成为被减数，然后在结果前加上负号。</p></blockquote><h4 id="计算过程-1"><a href="#计算过程-1" class="headerlink" title="计算过程"></a>计算过程</h4><center>100-1计算</center><table><thead><tr><th>当前游标</th><th></th><th>借位点</th><th>计算点</th></tr></thead><tbody><tr><td>a</td><td>1</td><td>0</td><td>0</td></tr><tr><td>b</td><td></td><td></td><td>1</td></tr></tbody></table><blockquote><p>a[2]-b[2]=&gt;0-1=-1,，计算点发现小于0，将自身取绝对值,，借位点借位，借位点减1;</p></blockquote><table><thead><tr><th>当前游标</th><th></th><th>借位点</th><th>计算点</th></tr></thead><tbody><tr><td>a</td><td>1</td><td>0-&gt;-9</td><td>0-&gt;-9-&gt;9</td></tr><tr><td>b</td><td></td><td></td><td>1</td></tr></tbody></table><blockquote><p>a[1]-b[1]=&gt;9-0=-9,，计算点发现小于0，将自身取绝对值,，借位点借位，借位点减1;</p></blockquote><table><thead><tr><th>当前游标</th><th>借位点</th><th>计算点</th><th></th></tr></thead><tbody><tr><td>a</td><td>1-&gt;0</td><td>-9-&gt;9</td><td>9</td></tr><tr><td>b</td><td></td><td></td><td>0</td></tr></tbody></table><blockquote><p>这个时候，发现结果的有效长度应该由3变为2，那么我们将第一个字符串元素去掉即可。</p></blockquote><table><thead><tr><th>当前游标</th><th>借位点</th><th>计算点</th></tr></thead><tbody><tr><td>a</td><td>9</td><td>9</td></tr><tr><td>b</td><td></td><td>0</td></tr></tbody></table><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">bigNumDel</span><span class="params">(<span class="built_in">string</span> a,<span class="built_in">string</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//判断结果是不是负数，根据这个来判断是否在字符串前面加'-'</span></span><br><span class="line">    <span class="keyword">bool</span> isFushu=<span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//情况1，被减数是负数，我们将其取正，两数相加，再加上负号</span></span><br><span class="line">    <span class="keyword">if</span>(a[<span class="number">0</span>]==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        a.erase(a.begin());</span><br><span class="line">        isFushu=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'-'</span>+bigNumAdd(a,b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//情况2，判断长度，如果被减数短，那么交换，结果必为负数</span></span><br><span class="line">    <span class="keyword">if</span>(a.length()&lt;b.length())</span><br><span class="line">    &#123;</span><br><span class="line">        isFushu=<span class="literal">true</span>;</span><br><span class="line">        swap(a,b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//与加法的遍历方法一致</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=a.length()<span class="number">-1</span>,j=b.length()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--,j--)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment">//与加法的运算一致</span></span><br><span class="line">        a[i]-=(j&gt;=<span class="number">0</span>?b[j]-<span class="string">'0'</span>:<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//如果小于0</span></span><br><span class="line">        <span class="keyword">if</span>(a[i]&lt;<span class="string">'0'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//取正数，为什么是加10呢？ 举个例子</span></span><br><span class="line">            <span class="comment">//a[i]='0'-1 即 数值结果为-9  取正应该得9</span></span><br><span class="line">            <span class="comment">//a[i]+=10 -&gt;'0'-1+10= '0'+9 ='9'</span></span><br><span class="line">             a[i]=a[i]+<span class="number">10</span>;</span><br><span class="line">        <span class="comment">//如果还在有效长度内</span></span><br><span class="line">            <span class="keyword">if</span>(i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//借位</span></span><br><span class="line">                a[i<span class="number">-1</span>]--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//否则不在有效长度内</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(j==<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//结果为负数</span></span><br><span class="line">                isFushu=<span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//开始去首位0操作</span></span><br><span class="line">    <span class="keyword">if</span>(a[<span class="number">0</span>]==<span class="string">'0'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">while</span>(a[<span class="number">0</span>]==<span class="string">'0'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        a.erase(a.begin());</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断是否负数来加符号</span></span><br><span class="line">        <span class="keyword">return</span> isFushu?<span class="string">'-'</span>+a:a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="乘法"><a href="#乘法" class="headerlink" title="乘法"></a>乘法</h2><h3 id="大体思路-2"><a href="#大体思路-2" class="headerlink" title="大体思路"></a>大体思路</h3><blockquote><p>相信大部分人首算乘法的时候，都习惯从末尾开始乘，然后进位，但是要仔细考虑，进位之后，得到的数据应该缓存起来，最后相加而不是直接在原字符串上改变进位点的数值。也就是说 567 * 3 =21+180+1500 . </p><p>上面这种末尾相乘方法其实效率并不高，每个数字之间相乘的结果都要缓存一次，而其实我们只需要首位相乘就可以解决多次缓存的问题了，即从a<em>b 中，对a的首位开始进行乘法运算，因为从前往后运算，计算点影响的值只会是前一位进位点，后面的都不会被影响到，所以只需要新建一个临时字符串c赋值a的元素，然后直接在c上更改就好。 也就是 567 </em> 3 =1701</p></blockquote><h3 id="计算过程-2"><a href="#计算过程-2" class="headerlink" title="计算过程"></a>计算过程</h3><h4 id="计算前-2"><a href="#计算前-2" class="headerlink" title="计算前"></a>计算前</h4><blockquote><p> 乘法运算也需要和前两种运算一样，要求长度更长的置上方。</p></blockquote><h5 id="1-统计两个乘数是否为负数"><a href="#1-统计两个乘数是否为负数" class="headerlink" title="1.统计两个乘数是否为负数"></a>1.统计两个乘数是否为负数</h5><blockquote><p>负负得正，正负得负，将负号统计并且移除，在最后结果上根据情况加负号。</p></blockquote><h5 id="2-非特殊情况"><a href="#2-非特殊情况" class="headerlink" title="2.非特殊情况"></a>2.非特殊情况</h5><blockquote><p>新建一个字符串res，用于存储结果，然后在b的每位数字开始相乘时，新建一个临时字符串，存储这个数值对a乘法后的结果，然后加入res中。</p></blockquote><table><thead><tr><th>当前游标</th><th></th><th></th><th></th></tr></thead><tbody><tr><td>res</td><td></td><td></td><td></td></tr><tr><td>a</td><td>4</td><td>5</td><td>7</td></tr><tr><td>b</td><td>3</td><td>4</td><td></td></tr><tr><td>temp</td><td>4</td><td>5</td><td>6</td></tr></tbody></table><blockquote><p>为了方便演示，我们从b的首位开始逐个对照a的首位开始算，3*4=12，先把2存储在temp的对应位置中。</p><p>在代码中，无论从b的首位还是末位开始遍历，只要从a的首位开始计算就行，只要加’0’的次数正确，结果不变。</p></blockquote><table><thead><tr><th>当前游标</th><th>进位点</th><th>计算点</th><th></th><th></th></tr></thead><tbody><tr><td>a</td><td></td><td>4</td><td>5</td><td>6</td></tr><tr><td>b</td><td></td><td>3</td><td>4</td><td></td></tr><tr><td>temp</td><td></td><td>4-&gt;2</td><td>5</td><td>6</td></tr></tbody></table><blockquote><p>然后12是大于10的，这时候我们需要在temp字符串前加入需要进位的数值 ，即 ‘1’。</p></blockquote><table><thead><tr><th>当前游标</th><th></th><th>进位点</th><th>计算点</th><th></th></tr></thead><tbody><tr><td>a</td><td></td><td>4</td><td>5</td><td>7</td></tr><tr><td>b</td><td></td><td>3</td><td>4</td><td></td></tr><tr><td>temp</td><td>1</td><td>2</td><td>5</td><td>6</td></tr></tbody></table><blockquote><p>接着对a的下一位进行运算，即3*5=15，对应计算点的temp数值改成5，进位点进位1。</p></blockquote><table><thead><tr><th>当前游标</th><th></th><th>进位点</th><th>计算点</th><th></th></tr></thead><tbody><tr><td>a</td><td></td><td>4</td><td>5</td><td>7</td></tr><tr><td>b</td><td></td><td>3</td><td>4</td><td></td></tr><tr><td>temp</td><td>1</td><td>2-&gt;3</td><td>5-&gt;5</td><td>6</td></tr></tbody></table><blockquote><p>同理，对a的下一位继续运算，即3*7=21，对应计算点的temp数值改成1，进位点进位2。</p></blockquote><table><thead><tr><th>当前游标</th><th></th><th></th><th>进位点</th><th>计算点</th></tr></thead><tbody><tr><td>a</td><td></td><td>4</td><td>5</td><td>7</td></tr><tr><td>b</td><td></td><td>3</td><td>4</td><td></td></tr><tr><td>temp</td><td>1</td><td>3</td><td>5-&gt;7</td><td>6-&gt;1</td></tr></tbody></table><blockquote><p>此时temp字符串的值应为’1’ ‘3’ ‘7’ ‘1‘，重点来了，我们应该记住在b字符串运算位距离末位的值，随后根据这个值，对temp末位逐个加’0’</p><p>因为例子中b长度为2，当前从首位开始算， 所以相差1位，那么在temp末尾加1个‘0’</p><p>temp=”13710”,把他加入res,用上述的大数相加运算。</p></blockquote><blockquote><p>同理把4和457进行一次运算，得到的新temp也加入到res中</p><p>最后根据前面统计的负号个数，对结果进行加负号处理。</p></blockquote><h5 id="3-特殊情况"><a href="#3-特殊情况" class="headerlink" title="3.特殊情况"></a>3.特殊情况</h5><blockquote><p>如果按照首位逐个相乘，如果遇到如69<em>9这样，即第一次运算  60 </em> 9=540  , 随后运算 9 * 9 =81 ,发现进位点4+8 超过10 这个时候怎么处理呢。</p><p>很简单，无视就好，它会在被调用大数相加运算的时候，自动向前进位的。</p><p>此时temp=’5’ ‘12’ ‘1’。</p><p>我们bigNumAdd(res,temp)。</p><p>在内循环中，因为12&gt;10 ，会把1加到5身上。结果为621</p></blockquote><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">bigNumMul</span><span class="params">(<span class="built_in">string</span> a,<span class="built_in">string</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//统计负数个数</span></span><br><span class="line">    <span class="keyword">int</span> fushu=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">string</span> resStr;</span><br><span class="line">    <span class="keyword">if</span>(a[<span class="number">0</span>]==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        fushu++;</span><br><span class="line">        a.erase(a.begin());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(b[<span class="number">0</span>]==<span class="string">'-'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        fushu++;</span><br><span class="line">        b.erase(b.begin());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(a.length()&lt;b.length())</span><br><span class="line">    &#123;</span><br><span class="line">        swap(a,b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//面向b的末尾开始</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=b.length()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//新建临时字符串</span></span><br><span class="line">        <span class="built_in">string</span> tempStr;</span><br><span class="line">        <span class="comment">//复制严肃，这里其实只要长度相等就可以了，不需要元素一致</span></span><br><span class="line">        tempStr.assign(a);</span><br><span class="line">        <span class="comment">//计算当前b的计算位距离末尾的长度，决定加0次数</span></span><br><span class="line">        <span class="keyword">int</span> zeroB=b.length()-i<span class="number">-1</span>;</span><br><span class="line">        <span class="comment">//从a的首位开始，因为这里复制了a的元素，直接从temp上索引</span></span><br><span class="line">        <span class="comment">//如果上面的temp只复制了长度，那么就要从a本身索引</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;tempStr.length();j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//相乘</span></span><br><span class="line">            <span class="keyword">int</span> res=(tempStr[j]-<span class="string">'0'</span>)*(b[i]-<span class="string">'0'</span>);</span><br><span class="line">            <span class="comment">//自身更正</span></span><br><span class="line">            tempStr[j]=res%<span class="number">10</span>+<span class="string">'0'</span>;</span><br><span class="line">            <span class="comment">//相乘结果大于10</span></span><br><span class="line">            <span class="keyword">if</span>(res&gt;=<span class="number">10</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                <span class="comment">//计算点在temp/a的首位，也就说进位点会超出范围</span></span><br><span class="line">                    <span class="keyword">if</span>(j==<span class="number">0</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">//在temp前加上进位的值的ascii码</span></span><br><span class="line">                        tempStr=(<span class="keyword">char</span>)((res/<span class="number">10</span>)%<span class="number">10</span>+<span class="string">'0'</span>)+tempStr;</span><br><span class="line">                        <span class="comment">//长度加1，我们的j也要相对后移</span></span><br><span class="line">                        ++j;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">//否则正常进位</span></span><br><span class="line">                        tempStr[j<span class="number">-1</span>]+=(res/<span class="number">10</span>)%<span class="number">10</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//加'0'操作</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;zeroB;k++)</span><br><span class="line">            tempStr+=<span class="string">'0'</span>;</span><br><span class="line">        <span class="comment">//与res相加 如果出现了特殊情况，会在其中被进位修正。</span></span><br><span class="line">        resStr=bigNumAdd(resStr,tempStr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断负数情况，加负号</span></span><br><span class="line">    <span class="keyword">return</span> fushu==<span class="number">1</span> ? <span class="string">'-'</span>+resStr:resStr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><ol><li>加法减法从被加/被减末尾开始算。</li><li>减法/乘法需要考虑负数情况。</li><li>乘法从被乘数的首位开始算。</li><li>加法运算要注意进位操作，减法要记得减0操作，乘法要加0操作。</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法学习 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>&lt;开发记录&gt;独立手游-19年-3月</title>
      <link href="/2019/MyGame-19-Mar/"/>
      <url>/2019/MyGame-19-Mar/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h3 id="本月主要开发内容"><a href="#本月主要开发内容" class="headerlink" title="本月主要开发内容"></a>本月主要开发内容</h3><p>放弃了帧动画，使用Anima2D制作的骨骼动画，花了不少时间写了自己的第一个<a href="https://github.com/ConfuseL/RookiesGoods" target="_blank" rel="noopener">开源背包框架</a>，同时用于重构游戏里的背包系统。</p><h3 id="成果图片以及描述"><a href="#成果图片以及描述" class="headerlink" title="成果图片以及描述"></a>成果图片以及描述</h3><p>Anima2D骨骼动画的简单使用可以参考我的另一篇文章<a href="http://confusel.tech/2019/MyLearn-Anima2D/">Unity Anima2D编辑器的轻量骨骼动画和换装使用</a>​            </p><p><img src="http://confusel-images.oss-cn-shenzhen.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/3%E6%9C%88/%E9%AA%A8%E9%AA%BC%E5%8A%A8%E7%94%BB%2B%E6%8D%A2%E8%A3%85%2B%E8%9E%8D%E5%90%88.gif" alt=""><br><em>手持武器的更换效果</em></p><p><img src="https://confusel-images.oss-cn-shenzhen.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/3%E6%9C%88/%E8%93%84%E5%8A%9B%E6%94%BB%E5%87%BB%E5%88%B6%E4%BD%9C.gif" alt=""></p><p><em>棍类武器的蓄力攻击动画</em></p><p><img src="https://confusel-images.oss-cn-shenzhen.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/3%E6%9C%88/%E7%9F%9B%E7%B1%BB%E8%93%84%E5%8A%9B%E6%94%BB%E5%87%BB%E6%BC%94%E7%A4%BA.gif" alt=""></p><p><em>长矛类武器的蓄力攻击动画</em></p><p><img src="https://confusel-images.oss-cn-shenzhen.aliyuncs.com/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%93/3%E6%9C%88/%E5%88%80%E7%B1%BB%E8%93%84%E5%8A%9B%E6%94%BB%E5%87%BB%E6%BC%94%E7%A4%BA.gif" alt=""></p><p><em>刀类武器的蓄力攻击动画</em></p><h3 id="下月任务"><a href="#下月任务" class="headerlink" title="下月任务"></a>下月任务</h3><p>将背包系统重构完善，同时把框架的存储功能更新，把所有物品图标绘制完毕。尽可能编写怪物AI，因为还有计网课设和团队游戏开发，所以怪物AI行为树的进度可能较慢。</p>]]></content>
      
      
      <categories>
          
          <category> Unity3D </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 独立游戏 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>&lt;学习记录&gt;Unity Anima2D编辑器的轻量骨骼动画和换装使用</title>
      <link href="/2019/MyLearn-Anima2D/"/>
      <url>/2019/MyLearn-Anima2D/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h3 id="lt-学习记录-gt-Unity-Anima2D编辑器的轻量骨骼动画和换装使用"><a href="#lt-学习记录-gt-Unity-Anima2D编辑器的轻量骨骼动画和换装使用" class="headerlink" title="&lt;学习记录&gt;Unity Anima2D编辑器的轻量骨骼动画和换装使用"></a>&lt;学习记录&gt;Unity Anima2D编辑器的轻量骨骼动画和换装使用</h3><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>​    前不久觉得骨骼动画难弄而选择帧动画，现在发现，一个人制作帧动画的工作量真的大，特别是发现需要换肤功能的时候，目前没有找到可以让同一个帧动画替换特定像素达到换肤效果的简易方法（<del>shader可以简单换色，但是如果要有特别的形状图案就很复杂了</del>），于是乎找到了一些关于Unity5.x版本之后自带的anima2D骨骼动画系统的一些文档，决定弃用帧动画使用骨骼动画。</p><p><img src="http://confusel-images.oss-cn-shenzhen.aliyuncs.com/19-2-25/9150e4e5gy1fygz3nlw8bj20qo0qo3zr.jpg" alt=""></p><p>​    这篇来做一个简易演示。</p><h4 id="图片准备"><a href="#图片准备" class="headerlink" title="图片准备"></a>图片准备</h4><p>​    将精灵图拖到Unity之后设置属性，因为画的时候是以1像素为单位，所以选择了FilterMode为Point。随后通过SpriteEditor将图片切割好，注意这里一定要<strong>规定好切割区域的大小</strong>，也就是规定如所有头部、身体精灵图的共同切割大小，以便骨骼的绑定不会产生换肤的图片偏移，对碰撞体有要求的同样可以设置得精细一点。</p><p><img src="http://confusel-images.oss-cn-shenzhen.aliyuncs.com/19-2-26/%E5%9B%BE%E7%89%87%E8%AE%BE%E7%BD%AE.png" alt=""></p><h4 id="精灵网格和骨骼设置"><a href="#精灵网格和骨骼设置" class="headerlink" title="精灵网格和骨骼设置"></a>精灵网格和骨骼设置</h4><p>​    将必要的头、身体、腿的图片拖入视图后，摆好位置，创建父物体Player，对其一一设置精灵网格，右键2D Object-&gt;SpriteMesh</p><p><img src="http://confusel-images.oss-cn-shenzhen.aliyuncs.com/19-2-26/%E8%AE%BE%E7%BD%AE%E7%B2%BE%E7%81%B5%E5%9B%BE%E5%B1%82.png" alt=""></p><p>​    随后可以在父物体Player下创建骨骼，右键2D Object-&gt;Bone</p><p><img src="https://confusel-images.oss-cn-shenzhen.aliyuncs.com/19-2-26/%E8%AE%BE%E7%BD%AE%E9%AA%A8%E9%AA%BC.png" alt=""></p><p>​    将创建的骨骼与摆好的图片对齐，如果在骨骼下创建骨骼，会生成子骨骼，子骨骼会随着父骨骼移动。</p><p><img src="https://confusel-images.oss-cn-shenzhen.aliyuncs.com/19-2-26/%E5%8F%B3%E6%89%8B%E9%AA%A8%E9%AA%BC.png" alt=""></p><p>​    </p><h4 id="骨骼绑定"><a href="#骨骼绑定" class="headerlink" title="骨骼绑定"></a>骨骼绑定</h4><p>​    设置好骨骼，图片也对应好之后，将网格与骨骼绑定，点击视图中的头，查看监视面板，创建了网格会绑定的两个组件分别是SpriteMeshInstance和SpriteMeshRenderer，本篇只讲解SpriteMeshInstance的用法，SpriteMesh是精灵网格，可以在面板上设置，也可以在代码上设置，这也是本篇换装的重要途径，随后是颜色、材质、层级、Set bones骨骼设置，我们将对应的骨骼拖入这里，<strong>注意，拖入带有子骨骼的骨骼，会将子骨骼一起绑定，若子骨骼需要与其他图片绑定，请删除掉，以免冲突。</strong></p><p><img src="https://confusel-images.oss-cn-shenzhen.aliyuncs.com/19-2-26/%E7%BB%91%E5%AE%9A%E9%AA%A8%E9%AA%BC.png" alt=""></p><p>​    拖入以后并没有直接绑定成功，这时候我们需要通过Anima2D编辑器绑定骨骼，菜单栏Winodws-&gt;Anima2D-&gt;SpriteMesh Editor，点击Bind按钮将自动的计算骨骼的权重。点击Apply即可绑定，也可以通过Weight Editor设置影响程度，在此之前也可以在编辑器上通过鼠标来划分你的蒙皮需求。如果一张图片上有多个骨骼，那么你就要设置每个骨骼在某些三角形上的权重，让骨骼动作时图片动作的更逼真。而个人不需要过于精细，因此本篇没有特定设置蒙皮划分。</p><p><img src="https://confusel-images.oss-cn-shenzhen.aliyuncs.com/19-2-26/%E5%BA%94%E7%94%A8%E9%AA%A8%E9%AA%BC.png" alt=""></p><p>​    绑定骨骼以后，可以在视图界面控制骨骼，查看是否绑定成功。</p><p><img src="https://confusel-images.oss-cn-shenzhen.aliyuncs.com/19-2-26/%E9%AA%A8%E9%AA%BC%E7%A7%BB%E5%8A%A8%E9%A2%84%E8%A7%88.gif" alt=""></p><h4 id="IK绑定"><a href="#IK绑定" class="headerlink" title="IK绑定"></a>IK绑定</h4><p>​    反向力学系统，一般我们是通过骨骼的动作去控制图片，设置IK并绑定骨骼的话，通过操作IK控件，骨骼也会随着移动。这样我们可以更方便的做一些动画了。（展示图没有绑定武器，所以效果并不明显，但是骨骼效果随着IK的移动而移动很直白）</p><p><img src="https://confusel-images.oss-cn-shenzhen.aliyuncs.com/19-2-26/IK%E7%A7%BB%E5%8A%A8%E9%A2%84%E8%A7%88.gif" alt=""></p><p>​    IK动画分两种:IK CCD、IK Limb。<br>​    IK Limb适合肢体骨骼动画。IK CCD适合更长的骨骼。本篇使用Limb，在父物体Player下创建IK，右键2D Object-&gt;IK Limb ，在视图将IK部件移动到合适的位置之后，监视面板绑定骨骼，在这里，我们可以想像IK为关节，我们人体控制关节，骨骼也会随之移动，所以将IK绑定到对应的骨骼就好了。</p><p><img src="https://confusel-images.oss-cn-shenzhen.aliyuncs.com/19-2-26/%E5%8F%B3%E6%89%8BIK.png" alt=""></p><p><img src="https://confusel-images.oss-cn-shenzhen.aliyuncs.com/19-2-26/IK%E7%BB%91%E5%AE%9A%E9%AA%A8%E9%AA%BC.png" alt=""></p><h4 id="骨骼动画和换装"><a href="#骨骼动画和换装" class="headerlink" title="骨骼动画和换装"></a>骨骼动画和换装</h4><p>​    利用Animation编辑器，新建anim动画，对骨骼进行操作录制即可，然后播放的时候，通过改变对应SpriteMeshInstance的精灵网格即可。</p><p><img src="https://confusel-images.oss-cn-shenzhen.aliyuncs.com/19-2-26/%E6%8D%A2%E8%82%A4%E9%A2%84%E8%A7%88.gif" alt=""></p><p>​    <strong>注意，你要对所有提供换装的精灵网格对它对应骨骼进行单独的绑定！</strong></p><p>​    以下为本篇的换装样例代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">using Anima2D;</span><br><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class DebugBone : MonoBehaviour &#123;</span><br><span class="line"></span><br><span class="line">    private SpriteMeshInstance body;</span><br><span class="line">    private Object[] clothesMesh;</span><br><span class="line">    int key = 0;</span><br><span class="line">    // Use this for initialization</span><br><span class="line">    void Start () &#123;</span><br><span class="line">        body = GameObject.Find(&quot;身体&quot;).GetComponent&lt;SpriteMeshInstance&gt;();</span><br><span class="line">        clothesMesh = Resources.LoadAll(&quot;SpriteMesh/clothes&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">// Update is called once per frame</span><br><span class="line">void Update () &#123;</span><br><span class="line">        if (Input.GetKeyDown(KeyCode.A))</span><br><span class="line">        &#123;</span><br><span class="line">            key++;</span><br><span class="line">            key = key % 6;</span><br><span class="line">            body.spriteMesh = (SpriteMesh)clothesMesh[key];</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="参考文章和视频"><a href="#参考文章和视频" class="headerlink" title="参考文章和视频"></a>参考文章和视频</h4><p>​    视频： <a href="https://www.bilibili.com/video/av20868780/?spm_id_from=333.788.videocard.0" target="_blank" rel="noopener">【游戏美术难于上青天】 系列</a></p><p>​    文章： <a href="https://blog.csdn.net/hibernateplus/article/details/79060311" target="_blank" rel="noopener">Anima2D官方中文使用手册（对应Anima2D1.1.4）</a></p>]]></content>
      
      
      <categories>
          
          <category> Unity3D </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 问题以及解决方案 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>关于Unity3D引用某些DLL发布之后可能出现的错误</title>
      <link href="/2018/MyIssue-Solution-DLL/"/>
      <url>/2018/MyIssue-Solution-DLL/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h5 id="目的："><a href="#目的：" class="headerlink" title="目的："></a>目的：</h5><p>在肝专业课设的时候，需要用的EPPLSUE.DLL写表格文件时，以及想用IRONPYTHON调用pyhton脚本时遇到了这些问题，在这里总结一下</p><h4 id="主要问题："><a href="#主要问题：" class="headerlink" title="主要问题："></a>主要问题：</h4><p>1.引用第三方类库之后，无法发布。提示引用的类库不支持。</p><p>2.发布之后，使用到对应第三方类库内容时，发生错误，但是在编辑器里却没错误。</p><h4 id="问题可能原因和解决方法："><a href="#问题可能原因和解决方法：" class="headerlink" title="问题可能原因和解决方法："></a>问题可能原因和解决方法：</h4><h5 id="问题1："><a href="#问题1：" class="headerlink" title="问题1："></a>问题1：</h5><h6 id="可能原因："><a href="#可能原因：" class="headerlink" title="可能原因："></a>可能原因：</h6><p>目前遇到的大部分是都是因为Unity的NET版本和要使用的类库不一致导致的，虽然目前Unity的设置中支持3.5和4.X，但实际上使用那些4.0以上NET支持的类库，大部分就会出现VS编译器里无报错，但Unity编辑器里报错的问题，或者如问题1那样，无法发布。</p><h6 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h6><p>1.尽量使用非4.XNET支持的第三方类库，总能找到课替代的或者低版本(最后我还是没用上iron Python ,选择把python写成web后端了= =)。</p><p>2.在发布页面的Player Setting中设置使用的NET版本，更改Unity为.NET 4.X ，但大部分第三方库依然不支持</p><p>3.老老实实使用.NET3.5，并选择API为.NET2.0而不是它的子集2.0 Subset</p><p><img src="http://confusel-images.oss-cn-shenzhen.aliyuncs.com/18-12-31/57526107.jpg" alt="1546254086424"></p><p><em>据说后面4.X会支持的更好，3.5也会被移除，希望能完全支持这些类库吧。</em></p><h5 id="问题2："><a href="#问题2：" class="headerlink" title="问题2："></a>问题2：</h5><h6 id="可能原因：-1"><a href="#可能原因：-1" class="headerlink" title="可能原因："></a>可能原因：</h6><p>我遇到的是在Unity编辑器里生成表格是可以的,但是发布之后，却失败了，通过异常捕获发现出现不支持IBM347编码，其实是缺少Unity编辑器里自带的一些文件。</p><p><img src="http://confusel-images.oss-cn-shenzhen.aliyuncs.com/18-12-31/93937234.jpg" alt="1546253003361"></p><h6 id="解决方法：-1"><a href="#解决方法：-1" class="headerlink" title="解决方法："></a>解决方法：</h6><p>把Unity\Editor\Data\Mono\lib\mono\unity下的L18N相关的所有.dll赋值到当前项目的Assets文件夹下，保存再发布就可以解决了。</p><p><img src="http://confusel-images.oss-cn-shenzhen.aliyuncs.com/18-12-31/26360741.jpg" alt="1546254852807"></p><p><img src="http://confusel-images.oss-cn-shenzhen.aliyuncs.com/18-12-31/87144357.jpg" alt="1546253429555"></p><p>以上大部分分析来源于自己，因此可能不是百分百正确，勿在意。</p>]]></content>
      
      
      <categories>
          
          <category> Unity3D </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 问题以及解决方案 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>&lt;开发记录&gt;独立手游-11月</title>
      <link href="/2018/MyGame-Nov/"/>
      <url>/2018/MyGame-Nov/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h3 id="本月主要开发内容"><a href="#本月主要开发内容" class="headerlink" title="本月主要开发内容"></a>本月主要开发内容</h3><p>绘制大部分UI界面所用的素材、绘制主角样板和一些动画，然后对原来的UI布局根据像素风进行了一些修改。</p><h3 id="成果图片以及描述"><a href="#成果图片以及描述" class="headerlink" title="成果图片以及描述"></a>成果图片以及描述</h3><p>板子用的是ctl672，绘制软件有PS和piskel，没有什么美术功底强上，在piskel上不支持压感，所以画主角样板的时候都是现在PS上画 再转到piskel做帧动画的。</p><p><img src="http://confusel-images.oss-cn-shenzhen.aliyuncs.com/18-11-30/69300899.jpg" alt=""><br><em>总览</em><br><a id="more"></a></p><h4 id="1-人物属性表"><a href="#1-人物属性表" class="headerlink" title="1.人物属性表"></a><strong>1.人物属性表</strong></h4><p><img src="http://confusel-images.oss-cn-shenzhen.aliyuncs.com/18-11-30/55821958.jpg" alt=""><br><em>每个两张，一张填满一张空，用填充分那个是控制数值</em></p><p><img src="http://confusel-images.oss-cn-shenzhen.aliyuncs.com/18-11-30/62814793.jpg" alt=""><br><em>空san</em></p><hr><h4 id="2-电子表预览"><a href="#2-电子表预览" class="headerlink" title="2.电子表预览"></a><strong>2.电子表预览</strong></h4><p><img src="http://confusel-images.oss-cn-shenzhen.aliyuncs.com/18-11-30/28929937.jpg" alt=""><br><em>打算6/12min现实时间为游戏的一天，用uv动画去控制时间流动</em></p><hr><h4 id="3-人物待机图"><a href="#3-人物待机图" class="headerlink" title="3.人物待机图"></a><strong>3.人物待机图</strong></h4><p><img src="http://confusel-images.oss-cn-shenzhen.aliyuncs.com/18-11-30/5299326.jpg" alt=""><br><em>在piskel上绘制帧动画，导出x</em>y行列的图集，然后在Unity上自己分割，拖动就可以形成动画<em><br><img src="http://confusel-images.oss-cn-shenzhen.aliyuncs.com/18-11-30/27537244.jpg" alt=""></em>人物待机图*</p><hr><p><em>待更新完毕</em></p>]]></content>
      
      
      <categories>
          
          <category> Unity3D </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 独立游戏 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>&lt;开发记录&gt;独立手游-10月</title>
      <link href="/2018/MyGame-Oct/"/>
      <url>/2018/MyGame-Oct/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h3 id="本月主要开发内容"><a href="#本月主要开发内容" class="headerlink" title="本月主要开发内容"></a>本月主要开发内容</h3><p>UI框架、UI布局、美术制作、游戏物品数据json化、主角存档格式等</p><h3 id="成果图片以及描述"><a href="#成果图片以及描述" class="headerlink" title="成果图片以及描述"></a>成果图片以及描述</h3><p>对于一个没有美术资源的游戏开发前期，打算先从UI入手<br>由于截图软件问题，上面有大概0.5cm的高度矩形被截出了 但不影响观看</p><a id="more"></a><h4 id="1-操作方式预览"><a href="#1-操作方式预览" class="headerlink" title="1.操作方式预览"></a><strong>1.操作方式预览</strong></h4><p><img src="http://confusel-images.oss-cn-shenzhen.aliyuncs.com/18-11-30/82185343.jpg" alt=""></p><p><em>左手移动 范围为2/5的左边屏幕<br>右手攻击 范围固定</em></p><hr><h4 id="2-背包预览"><a href="#2-背包预览" class="headerlink" title="2.背包预览"></a><strong>2.背包预览</strong></h4><p><img src="http://confusel-images.oss-cn-shenzhen.aliyuncs.com/18-11-30/48181651.jpg" alt=""><br><em>还没在主角数据里添加，所以暂时为空</em></p><hr><h4 id="3-合成系统预览"><a href="#3-合成系统预览" class="headerlink" title="3.合成系统预览"></a><strong>3.合成系统预览</strong></h4><p><img src="http://confusel-images.oss-cn-shenzhen.aliyuncs.com/18-11-30/7190698.jpg" alt=""><br><em>主要用到Toggle来选择合成表<br>点击目标物品，右侧会出现详情和合成所需的物品预览以及对应的消耗个数和已有个数</em></p><hr><h4 id="4-数据持久化"><a href="#4-数据持久化" class="headerlink" title="4.数据持久化"></a><strong>4.数据持久化</strong></h4><p>JSON我也只是刚接触不久，用的litjson，因为我把所有物品都一股脑写入一个json里（手写。。。），解析不能用泛型，只好手动针对性解析(可能是我没学会其他更方便的方法)<br>顺便加了AES加密<br>主角的存档数据我也写了初版，并且加了脚本测试<br>测试为：向主角数据添加物品持有、然后在背包中查阅</p><p><img src="http://confusel-images.oss-cn-shenzhen.aliyuncs.com/18-11-30/35071897.jpg" alt=""><br><em>(在电脑上编辑器中的测试，在电脑录制的gif 比手机的更清晰顺滑一些)</em></p><hr><h3 id="本月总结"><a href="#本月总结" class="headerlink" title="本月总结"></a>本月总结</h3><ol><li>其实说是本月，不如说是9月和10月:grimacing:，这些是用了两个月的课余时间慢慢写的，但考虑到现在才开通博客记录，所以合二为一了。</li><li>设计这些低端UI还是相对容易的，因为轻量级的UI框架之前看视频学过<br>倒是卡了摇杆设计上，EasyTouch要付费，网上找了一些别人的源码，自己照着造了一次适合的轮子，发现左右手不能同时使用，会卡住，最后知道了安卓有多点触控。。。用了Torch去判断才可以</li><li>在json数据的定义上，也许是开发经验太少，我甚至用到了伤害计算弄成数组。。。<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"id"</span>: <span class="number">304</span>,</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"bullet"</span>,</span><br><span class="line">    <span class="attr">"pose"</span>: <span class="number">4</span>,</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"毒箭"</span>,</span><br><span class="line">    <span class="attr">"compose"</span>: [ <span class="number">2</span>, <span class="number">1</span>, <span class="number">14</span>, <span class="number">1</span>, <span class="number">39</span>, <span class="number">1</span>, <span class="number">62</span>, <span class="number">1</span> ],</span><br><span class="line">    <span class="attr">"effect"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"intro"</span>: <span class="string">"不要舔它"</span>,</span><br><span class="line">    <span class="attr">"isRealinjury"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"dT"</span>: [ <span class="number">60</span>, <span class="number">0</span>, <span class="number">20</span>, <span class="number">1</span>, <span class="number">20</span>, <span class="number">1</span> ],</span><br><span class="line">    <span class="attr">"san"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"repair"</span>: [],</span><br><span class="line">    <span class="attr">"durability"</span>: <span class="number">1</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ol><p>就比如上面的。。。dT就是damageTime缩写，0为基础伤害，1为一秒的持续伤害:expressionless:</p><p>不在意这些细节啦，双11买了数位板，准备开肝素材，顺便贴下自己做的个人logo:yum:<br><img src="http://47.106.99.0/blog/wp-content/uploads/2018/11/My-LOGO.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Unity3D </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 独立游戏 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
