<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Unity Animation动画编辑器的轻量使用]]></title>
    <url>%2F2018%2FLearningRecords-AnimationEditor%2F</url>
    <content type="text"><![CDATA[[TOC] 前言对个人来说，帧动画和ik动画制作起来都是有难度的，简易的帧动画还好说，复杂的没有良好的美术功底，画出来费了很长时间也很难达到预期效果，而IK动画也同样需要大量时间去学习。 用现有的美术资源去制作一些简易的动画，其实Unity的Animation是足以应付的。 这篇来做一个简易演示，也是我独立游戏里要用到的一个徒手攻击动画。 Animation编辑器简易介绍​ Animation组件就不介绍了，网上有很多写的很好，这里简单说一下编辑器吧 Unity上方Windows-&gt;Animation-&gt;Animation 或者 Ctrl+6 既可打开 打开编辑器之后，在你没有选择带有animator或者animation组件的物体之前，编辑器是不会显示的。 在我们选择有效物体之后，左侧会显示动画使用的属性，右侧则是动画帧。 面板属性： preview: 预览，你点击这个按钮以后，当前选择的帧的所有属性会同步到Inspector上，其实也可以不用点按钮，你在animation编辑器动画帧上方的时间轴点击的时候会自动预览并同步的。 红点：个人也不清楚这啥作用 首帧、前一个关键帧、播放、下一个关键帧，尾帧：看图标就很容易理解了。 当前帧下标：返回你现在选择的动画帧在这个动画中的是属于第几帧，同样的，你可以手动输入来选择动画帧。 动画选择按钮：可以创建或选择这个物体的动画，图中为待机动画idle Samples：没理解错的话，是设定这个动画一秒播放多少帧。 添加关键帧：略 添加帧事件：可以让动画在某帧触发某个事件，比如攻击动画播放到某帧对周围的敌人进行伤害判断等。 AddProperty：添加属性，可以添加 Transofrm组件、SpriteRenderer组件中的属性，然后在每帧中控制这些属性。 Dopesheet：点击后右侧变简报栏，个人理解是能显示每帧是否使用了那些属性，可以拖动动画帧，新增、删除动画帧，并在底部显示使用的精灵图。 Curves：点击后右侧变成曲线编辑器，这个也是值得去研究的东西，个人没有深入研究就不多说明了，对于目前的认知来说，可以很直观的看到物体对象的某些属性上的曲线变化，也可以直接调整，比较抽象。 右侧的时间轴：根据你设置的samples，时间轴的最小单位会自动设置成对应的时间，比如samples为60，那么时间轴成为伪60进制（会出现0.01到0.59 ，随后到1.00）。 简易实战：制作一个简单地跳跃攻击动画第一步： 确定素材。演示的素材如下： 一张站立腿部，一张抬起腿部，一张站立上半身。 第二步： 从仅有的素材设想预期效果。 1）跳跃：我们让人物跳跃，到制高点以后，更改腿部动画。 2）攻击：人物制高点的时候，整个身体应该向前倾，给人一种出拳的感觉（虽然我没有画出来拳头=-=） 第三步： 新建动画。 事先说明：演示的人物物体中，有分为上下两半身的子物体，每一个子物体有独自的Animator。 打开动画编辑器，分别为两个身体子物体添加两个对应的attack动画。 我们规定这个动画的播放频率是一秒60帧，然后这个动画共有20帧。 那么，在下半身的动画编辑器中，samples那里输入60，分别在右侧的0.00帧拖入站立腿部图片，0.10帧拖入抬起腿部图片，0.20帧拖入站立腿部图片，并在左侧加属性Transform的Position和Rotation 在上半身的动画编辑器中，samples那里输入60，分别在右侧的0.00帧、0.10帧和0.20帧拖入站立上半身图片，并在左侧添加属性Transform的Position和Rotation 第四步： 上半身动画。 在Scene面板上手动测试出跳跃最佳效果的position。经过测试，人物上半身的y坐标值从0变为0.05、以及x轴为0.08效果最好，随后对上半身进行旋转，即转动rotation，发现z轴为-30时，头部向前位置最佳。 我们记住这些值，并在动画编辑器中，第0.10帧手动输入这些值 其余不变，我们点击播放按钮，发现效果已经出来了 第五步： 下半身动画。 大体步骤和第四步一样，不过在这之前，我们先把制高点上半身的位置信息输入到inspector面板上，让上半身在Scene保持制高点状态不动，因为这样，我们才能获得准确的 下半身在播放动画时能够接上上半身的 位置信息。（如果没有分为两个子物体动画就可以忽略了。） 我们同样用第四步的流程，获得下半身在制高点的位置信息，并手动输入到第0.10帧，其余不变。我们播放看看效果。 录制帧率有点低，其实效果更好。 第六步： 测试。 在上下两半身的动画状态机上把这个动画和待机动画链接，然后新建一个int的attack值，并设定值为1时，从待机转到次动画。然后运行游戏，让两个动画状态机的attack值同时设置为1，就能看到效果了。 总结：动画编辑器可以让大家减轻很多在美术资源上的负担，如果真要一帧一帧画，效果固然客观，但是在时间和精力上难免花上大量时间，特别对于主编程的个人开发来说，有效的利用别人给的轮子最好不过了XD，当然我对这个动画编辑器还只是半通水的理解，或许在某些设计方法上是不值得提倡的。 至于动画帧事件，我也会更新一篇简易使用的记录文章。 至于Curve…]]></content>
      <categories>
        <category>Unity3D</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[独立手游-11月]]></title>
    <url>%2F2018%2FMyGame-Nov%2F</url>
    <content type="text"><![CDATA[[TOC] 本月主要开发内容绘制大部分UI界面所用的素材、绘制主角样板和一些动画，然后对原来的UI布局根据像素风进行了一些修改。 成果图片以及描述板子用的是ctl672，绘制软件有PS和piskel，没有什么美术功底强上，在piskel上不支持压感，所以画主角样板的时候都是现在PS上画 再转到piskel做帧动画的。 总览 1.人物属性表每个两张，一张填满一张空，用填充分那个是控制数值 空san 2.电子表预览打算6/12min现实时间为游戏的一天，用uv动画去控制时间流动 3.人物待机图在piskel上绘制帧动画，导出xy行列的图集，然后在Unity上自己分割，拖动就可以形成动画 人物待机图* 待更新完毕]]></content>
      <categories>
        <category>Unity3D</category>
      </categories>
      <tags>
        <tag>独立游戏</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[独立手游-10月]]></title>
    <url>%2F2018%2FMyGame-Oct%2F</url>
    <content type="text"><![CDATA[[TOC] 本月主要开发内容UI框架、UI布局、美术制作、游戏物品数据json化、主角存档格式等 成果图片以及描述对于一个没有美术资源的游戏开发前期，打算先从UI入手由于截图软件问题，上面有大概0.5cm的高度矩形被截出了 但不影响观看 1.操作方式预览 左手移动 范围为2/5的左边屏幕右手攻击 范围固定 2.背包预览还没在主角数据里添加，所以暂时为空 3.合成系统预览主要用到Toggle来选择合成表点击目标物品，右侧会出现详情和合成所需的物品预览以及对应的消耗个数和已有个数 4.数据持久化JSON我也只是刚接触不久，用的litjson，因为我把所有物品都一股脑写入一个json里（手写。。。），解析不能用泛型，只好手动针对性解析(可能是我没学会其他更方便的方法)顺便加了AES加密主角的存档数据我也写了初版，并且加了脚本测试测试为：向主角数据添加物品持有、然后在背包中查阅 (在电脑上编辑器中的测试，在电脑录制的gif 比手机的更清晰顺滑一些) 本月总结 其实说是本月，不如说是9月和10月:grimacing:，这些是用了两个月的课余时间慢慢写的，但考虑到现在才开通博客记录，所以合二为一了。 设计这些低端UI还是相对容易的，因为轻量级的UI框架之前看视频学过倒是卡了摇杆设计上，EasyTouch要付费，网上找了一些别人的源码，自己照着造了一次适合的轮子，发现左右手不能同时使用，会卡住，最后知道了安卓有多点触控。。。用了Torch去判断才可以 在json数据的定义上，也许是开发经验太少，我甚至用到了伤害计算弄成数组。。。1234567891011121314&#123; "id": 304, "type": "bullet", "pose": 4, "name": "毒箭", "compose": [ 2, 1, 14, 1, 39, 1, 62, 1 ], "effect": "", "intro": "不要舔它", "isRealinjury": 1, "dT": [ 60, 0, 20, 1, 20, 1 ], "san": 0, "repair": [], "durability": 1 &#125; 就比如上面的。。。dT就是damageTime缩写，0为基础伤害，1为一秒的持续伤害:expressionless: 不在意这些细节啦，双11买了数位板，准备开肝素材，顺便贴下自己做的个人logo:yum:]]></content>
      <categories>
        <category>Unity3D</category>
      </categories>
      <tags>
        <tag>独立游戏</tag>
      </tags>
  </entry>
</search>
