<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[大整数字符串的加减乘(含负数)]]></title>
    <url>%2F2019%2FMyAlgorithm-bigNum%2F</url>
    <content type="text"><![CDATA[什么是大数 首先计算机的数据类型所能表示的范围都是有限的。 表数据来源于网络 Type Size 数值范围 无值型void 0 byte 无值域 布尔型bool 1 byte true false 有符号短整型short [int] /signed short [int] 2 byte -32768~32767 无符号短整型unsigned short [int] 2 byte 0~65535 有符号整型int /signed [int] 4 byte -2147483648~2147483647 无符号整型unsigned [int] 4 byte 0~4294967295 有符号长整型long [int]/signed long [int] 4 byte -2147483648~2147483647 无符号长整型unsigned long [int] 4 byte 0~4294967295 long long 8 byte 0~18446744073709552000 有符号字符型char/signed char 1 byte -128~127 无符号字符型unsigned char 1 byte 0~255 宽字符型wchar_t (unsigned short.) 2 byte 0~65535 单精度浮点型float 4 byte -3.4E-38~3.4E+38 双精度浮点型double 8 byte 1.7E-308~1.7E+308 long double 8 byte 而比这些数值范围更大、或者是计算之后超出数值范围的数值都可以成为大数，当我们要对位数达到上百位的大整数进行计算，这些数据类型显然不能满足我们的要求，因此我们需要通过算法来实现这些功能。 正数加法大体思路 思想是采用用字符串表示大数。末尾逐位相加，超十进位。 计算前被加数比加数长度短 为了方便计算，我们在接受到两个需要相加的正整数时，应该将更长位数的大数置上，短的置下。 计算过程1.长度不扩充情况197+13计算 面向下面的大数，从末位开始与上置位的每一位对应数值相加。即表中的下标2。 当前游标 a 1 9 7 b 1 3 ​ a[2]+b[2] =&gt; 7+3=10，发现计算点相加后大于等于10而造成了进位，那么我们应该自身减10，通过为上置位的进位点加1，即9+1=10。至于处理后进位点是否也大于10，我们无需处理，因为我们只需要关心当前位的运算，以及对前一位的影响（即表中的计算点和进位点）。 假设进位点同时也大于10，那么我们在它变成当前点时再进行计算进位就好了。 当前游标 进位点 计算点 a 1 9-&gt;10 7-&gt;10-&gt;0 b 1 3 ​ 计算点计算，10+1=11， 计算点自身减10，发现需要进位，进位点加1。得到结果210。 如果进位时，发现进位点不存在，那么意味着相加后，长度发生了变化，这个时候，如果只是相加运算，我们只需要在上置位字符串a前方加一个’1’就好了，为什么就是’1’呢，因为保证计算点的数值是个数位，无论再怎么大也不会产生进位点进2位的情况。 但是，如果需要被大数相乘的函数调用，就不能简单的加1了，因为相乘后可能出现进位点的数值超过1.当然是为了以防万一，但感觉似乎不会产生进位+2以上的情况。。。 当前游标 进位点 计算点 a 1-&gt;2 10-&gt;11-&gt;1 0 b 1 3 2.长度扩充情况99+1计算 当前游标 进位点 计算点 a 9 9 b 1 a[1]+b[1]=&gt;9+1=10，计算点自身减10，进位点进位，9+1=10，10-10=0 当前游标 进位点 计算点 a 9-&gt;10 9-&gt;10-&gt;0 b 1 计算点a[0]+b[0]=&gt; 10+0=0,，计算点自身减10，10-10=0,进位点进位，发现超出长度，此时在字符串首加’1’，得到结果100。 当前游标 进位点 计算点 a 1 10-&gt;0 0 b 1 代码12345678910111213141516171819202122232425262728293031string bigNumAdd(string a,string b)&#123; //把长的字符串上置位，即换成a if(a.length()&lt;b.length()) &#123; //交换 swap(a,b); &#125; //计算点下标从长度-1开始，取两个i、j变量指向计算点，是为了判断是否结束以及是否超出 for(int i=a.length()-1,j=b.length()-1;i&gt;=0;i--,j--) &#123; //j是字符串b的计算点下标，如果依然大于0，说明还在长度内，可以正常计算 //正常计算的时候利用ascii码性质-'0'获得实际上增加的数值 //如果超出了就加0，即不变 a[i]+=(j&gt;=0?b[j]-'0':0); //发现计算点大于10，需要进位 if(a[i]-'0'&gt;=10) &#123; //如果计算点在a中的位置不是首位，那么进位点正常加上进位数 if(i) a[i-1]+=((a[i]-'0')/10); //如果是首位，也就是说，进位点超出了原本的长度，那么我们在a字符串这里加上进位的值就好了 else a=(char)(((a[i]-'0')/10)+'0')+a; //自身余10 a[i]=((a[i]-'0')%10)+'0'; &#125; &#125; return a;&#125; 减法大体思路 关键思路和加法差别不大，只需要在对应的操作更改以下就好了，当然，在这之前需要对被减数和减数。 计算前1.被减数为负数 由 -a-b = -(a+b) ，其中a&gt;0 得 我们将被减数的负号去掉，然后把被减数和减数当作两个正整数相加，得到的结果加上符号即可。 直接调用上面写的相加函数就好了。 2.被减数是正数 这时候我们要考虑被减数和减数他们的长度关系了,如果被减数长度比减数小，那么结果必然是负数。 由 a-b = –(b-a)，其中a&gt;0 得 我们将被减数和减数交换，让长的减数成为被减数，然后在结果前加上负号。 计算过程100-1计算 当前游标 借位点 计算点 a 1 0 0 b 1 a[2]-b[2]=&gt;0-1=-1,，计算点发现小于0，将自身取绝对值,，借位点借位，借位点减1; 当前游标 借位点 计算点 a 1 0-&gt;-9 0-&gt;-9-&gt;9 b 1 a[1]-b[1]=&gt;9-0=-9,，计算点发现小于0，将自身取绝对值,，借位点借位，借位点减1; 当前游标 借位点 计算点 a 1-&gt;0 -9-&gt;9 9 b 0 这个时候，发现结果的有效长度应该由3变为2，那么我们将第一个字符串元素去掉即可。 当前游标 借位点 计算点 a 9 9 b 0 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354string bigNumDel(string a,string b)&#123; //判断结果是不是负数，根据这个来判断是否在字符串前面加'-' bool isFushu=false; //情况1，被减数是负数，我们将其取正，两数相加，再加上负号 if(a[0]=='-') &#123; a.erase(a.begin()); isFushu=true; return '-'+bigNumAdd(a,b); &#125; //情况2，判断长度，如果被减数短，那么交换，结果必为负数 if(a.length()&lt;b.length()) &#123; isFushu=true; swap(a,b); &#125; //与加法的遍历方法一致 for(int i=a.length()-1,j=b.length()-1;i&gt;=0;i--,j--) &#123; //与加法的运算一致 a[i]-=(j&gt;=0?b[j]-'0':0); //如果小于0 if(a[i]&lt;'0') &#123; //取正数，为什么是加10呢？ 举个例子 //a[i]='0'-1 即 数值结果为-9 取正应该得9 //a[i]+=10 -&gt;'0'-1+10= '0'+9 ='9' a[i]=a[i]+10; //如果还在有效长度内 if(i) &#123; //借位 a[i-1]--; &#125; //否则不在有效长度内 else if(j==0) &#123; //结果为负数 isFushu=true; &#125; &#125; &#125; //开始去首位0操作 if(a[0]=='0') &#123; while(a[0]=='0') &#123; a.erase(a.begin()); &#125; &#125; //判断是否负数来加符号 return isFushu?'-'+a:a;&#125; 乘法大体思路 相信大部分人首算乘法的时候，都习惯从末尾开始乘，然后进位，但是要仔细考虑，进位之后，得到的数据应该缓存起来，最后相加而不是直接在原字符串上改变进位点的数值。也就是说 567 * 3 =21+180+1500 . 上面这种末尾相乘方法其实效率并不高，每个数字之间相乘的结果都要缓存一次，而其实我们只需要首位相乘就可以解决多次缓存的问题了，即从ab 中，对a的首位开始进行乘法运算，因为从前往后运算，计算点影响的值只会是前一位进位点，后面的都不会被影响到，所以只需要新建一个临时字符串c赋值a的元素，然后直接在c上更改就好。 也就是 567 3 =1701 计算过程计算前 乘法运算也需要和前两种运算一样，要求长度更长的置上方。 1.统计两个乘数是否为负数 负负得正，正负得负，将负号统计并且移除，在最后结果上根据情况加负号。 2.非特殊情况 新建一个字符串res，用于存储结果，然后在b的每位数字开始相乘时，新建一个临时字符串，存储这个数值对a乘法后的结果，然后加入res中。 当前游标 res a 4 5 7 b 3 4 temp 4 5 6 为了方便演示，我们从b的首位开始逐个对照a的首位开始算，3*4=12，先把2存储在temp的对应位置中。 在代码中，无论从b的首位还是末位开始遍历，只要从a的首位开始计算就行，只要加’0’的次数正确，结果不变。 当前游标 进位点 计算点 a 4 5 6 b 3 4 temp 4-&gt;2 5 6 然后12是大于10的，这时候我们需要在temp字符串前加入需要进位的数值 ，即 ‘1’。 当前游标 进位点 计算点 a 4 5 7 b 3 4 temp 1 2 5 6 接着对a的下一位进行运算，即3*5=15，对应计算点的temp数值改成5，进位点进位1。 当前游标 进位点 计算点 a 4 5 7 b 3 4 temp 1 2-&gt;3 5-&gt;5 6 同理，对a的下一位继续运算，即3*7=21，对应计算点的temp数值改成1，进位点进位2。 当前游标 进位点 计算点 a 4 5 7 b 3 4 temp 1 3 5-&gt;7 6-&gt;1 此时temp字符串的值应为’1’ ‘3’ ‘7’ ‘1‘，重点来了，我们应该记住在b字符串运算位距离末位的值，随后根据这个值，对temp末位逐个加’0’ 因为例子中b长度为2，当前从首位开始算， 所以相差1位，那么在temp末尾加1个‘0’ temp=”13710”,把他加入res,用上述的大数相加运算。 同理把4和457进行一次运算，得到的新temp也加入到res中 最后根据前面统计的负号个数，对结果进行加负号处理。 3.特殊情况 如果按照首位逐个相乘，如果遇到如699这样，即第一次运算 60 9=540 , 随后运算 9 * 9 =81 ,发现进位点4+8 超过10 这个时候怎么处理呢。 很简单，无视就好，它会在被调用大数相加运算的时候，自动向前进位的。 此时temp=’5’ ‘12’ ‘1’。 我们bigNumAdd(res,temp)。 在内循环中，因为12&gt;10 ，会把1加到5身上。结果为621 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263string bigNumMul(string a,string b)&#123; //统计负数个数 int fushu=0; string resStr; if(a[0]=='-') &#123; fushu++; a.erase(a.begin()); &#125; if(b[0]=='-') &#123; fushu++; b.erase(b.begin()); &#125; if(a.length()&lt;b.length()) &#123; swap(a,b); &#125; //面向b的末尾开始 for(int i=b.length()-1;i&gt;=0;i--) &#123; //新建临时字符串 string tempStr; //复制严肃，这里其实只要长度相等就可以了，不需要元素一致 tempStr.assign(a); //计算当前b的计算位距离末尾的长度，决定加0次数 int zeroB=b.length()-i-1; //从a的首位开始，因为这里复制了a的元素，直接从temp上索引 //如果上面的temp只复制了长度，那么就要从a本身索引 for(int j=0;j&lt;tempStr.length();j++) &#123; //相乘 int res=(tempStr[j]-'0')*(b[i]-'0'); //自身更正 tempStr[j]=res%10+'0'; //相乘结果大于10 if(res&gt;=10) &#123; //计算点在temp/a的首位，也就说进位点会超出范围 if(j==0) &#123; //在temp前加上进位的值的ascii码 tempStr=(char)((res/10)%10+'0')+tempStr; //长度加1，我们的j也要相对后移 ++j; &#125; else &#123; //否则正常进位 tempStr[j-1]+=(res/10)%10; &#125; &#125; &#125; //加'0'操作 for(int k=0;k&lt;zeroB;k++) tempStr+='0'; //与res相加 如果出现了特殊情况，会在其中被进位修正。 resStr=bigNumAdd(resStr,tempStr); &#125; //判断负数情况，加负号 return fushu==1 ? '-'+resStr:resStr;&#125; 总结 加法减法从被加/被减末尾开始算。 减法/乘法需要考虑负数情况。 乘法从被乘数的首位开始算。 加法运算要注意进位操作，减法要记得减0操作，乘法要加0操作。]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>算法学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[独立手游-19年-3月]]></title>
    <url>%2F2019%2FMyGame-19-Mar%2F</url>
    <content type="text"><![CDATA[[TOC] 本月主要开发内容放弃了帧动画，使用Anima2D制作的骨骼动画，花了不少时间写了自己的第一个开源背包框架，同时用于重构游戏里的背包系统。 成果图片以及描述Anima2D骨骼动画的简单使用可以参考我的另一篇文章Unity Anima2D编辑器的轻量骨骼动画和换装使用​ 手持武器的更换效果 棍类武器的蓄力攻击动画 长矛类武器的蓄力攻击动画 刀类武器的蓄力攻击动画 下月任务将背包系统重构完善，同时把框架的存储功能更新，把所有物品图标绘制完毕。尽可能编写怪物AI，因为还有计网课设和团队游戏开发，所以怪物AI行为树的进度可能较慢。]]></content>
      <categories>
        <category>Unity3D</category>
      </categories>
      <tags>
        <tag>独立游戏</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Unity Anima2D编辑器的轻量骨骼动画和换装使用]]></title>
    <url>%2F2019%2FMyLearn-Anima2D%2F</url>
    <content type="text"><![CDATA[[TOC] &lt;学习记录&gt;Unity Anima2D编辑器的轻量骨骼动画和换装使用前言​ 前不久觉得骨骼动画难弄而选择帧动画，现在发现，一个人制作帧动画的工作量真的大，特别是发现需要换肤功能的时候，目前没有找到可以让同一个帧动画替换特定像素达到换肤效果的简易方法（shader可以简单换色，但是如果要有特别的形状图案就很复杂了），于是乎找到了一些关于Unity5.x版本之后自带的anima2D骨骼动画系统的一些文档，决定弃用帧动画使用骨骼动画。 ​ 这篇来做一个简易演示。 图片准备​ 将精灵图拖到Unity之后设置属性，因为画的时候是以1像素为单位，所以选择了FilterMode为Point。随后通过SpriteEditor将图片切割好，注意这里一定要规定好切割区域的大小，也就是规定如所有头部、身体精灵图的共同切割大小，以便骨骼的绑定不会产生换肤的图片偏移，对碰撞体有要求的同样可以设置得精细一点。 精灵网格和骨骼设置​ 将必要的头、身体、腿的图片拖入视图后，摆好位置，创建父物体Player，对其一一设置精灵网格，右键2D Object-&gt;SpriteMesh ​ 随后可以在父物体Player下创建骨骼，右键2D Object-&gt;Bone ​ 将创建的骨骼与摆好的图片对齐，如果在骨骼下创建骨骼，会生成子骨骼，子骨骼会随着父骨骼移动。 ​ 骨骼绑定​ 设置好骨骼，图片也对应好之后，将网格与骨骼绑定，点击视图中的头，查看监视面板，创建了网格会绑定的两个组件分别是SpriteMeshInstance和SpriteMeshRenderer，本篇只讲解SpriteMeshInstance的用法，SpriteMesh是精灵网格，可以在面板上设置，也可以在代码上设置，这也是本篇换装的重要途径，随后是颜色、材质、层级、Set bones骨骼设置，我们将对应的骨骼拖入这里，注意，拖入带有子骨骼的骨骼，会将子骨骼一起绑定，若子骨骼需要与其他图片绑定，请删除掉，以免冲突。 ​ 拖入以后并没有直接绑定成功，这时候我们需要通过Anima2D编辑器绑定骨骼，菜单栏Winodws-&gt;Anima2D-&gt;SpriteMesh Editor，点击Bind按钮将自动的计算骨骼的权重。点击Apply即可绑定，也可以通过Weight Editor设置影响程度，在此之前也可以在编辑器上通过鼠标来划分你的蒙皮需求。如果一张图片上有多个骨骼，那么你就要设置每个骨骼在某些三角形上的权重，让骨骼动作时图片动作的更逼真。而个人不需要过于精细，因此本篇没有特定设置蒙皮划分。 ​ 绑定骨骼以后，可以在视图界面控制骨骼，查看是否绑定成功。 IK绑定​ 反向力学系统，一般我们是通过骨骼的动作去控制图片，设置IK并绑定骨骼的话，通过操作IK控件，骨骼也会随着移动。这样我们可以更方便的做一些动画了。（展示图没有绑定武器，所以效果并不明显，但是骨骼效果随着IK的移动而移动很直白） ​ IK动画分两种:IK CCD、IK Limb。​ IK Limb适合肢体骨骼动画。IK CCD适合更长的骨骼。本篇使用Limb，在父物体Player下创建IK，右键2D Object-&gt;IK Limb ，在视图将IK部件移动到合适的位置之后，监视面板绑定骨骼，在这里，我们可以想像IK为关节，我们人体控制关节，骨骼也会随之移动，所以将IK绑定到对应的骨骼就好了。 骨骼动画和换装​ 利用Animation编辑器，新建anim动画，对骨骼进行操作录制即可，然后播放的时候，通过改变对应SpriteMeshInstance的精灵网格即可。 ​ 注意，你要对所有提供换装的精灵网格对它对应骨骼进行单独的绑定！ ​ 以下为本篇的换装样例代码 1234567891011121314151617181920212223242526using Anima2D;using System.Collections;using System.Collections.Generic;using UnityEngine;public class DebugBone : MonoBehaviour &#123; private SpriteMeshInstance body; private Object[] clothesMesh; int key = 0; // Use this for initialization void Start () &#123; body = GameObject.Find(&quot;身体&quot;).GetComponent&lt;SpriteMeshInstance&gt;(); clothesMesh = Resources.LoadAll(&quot;SpriteMesh/clothes&quot;); &#125; // Update is called once per frame void Update () &#123; if (Input.GetKeyDown(KeyCode.A)) &#123; key++; key = key % 6; body.spriteMesh = (SpriteMesh)clothesMesh[key]; &#125; &#125;&#125; 参考文章和视频​ 视频： 【游戏美术难于上青天】 系列 ​ 文章： Anima2D官方中文使用手册（对应Anima2D1.1.4）]]></content>
      <categories>
        <category>Unity3D</category>
      </categories>
      <tags>
        <tag>问题以及解决方案</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于Unity3D引用某些DLL发布之后可能出现的错误]]></title>
    <url>%2F2018%2FMyIssue-Solution-DLL%2F</url>
    <content type="text"><![CDATA[[TOC] 目的：在肝专业课设的时候，需要用的EPPLSUE.DLL写表格文件时，以及想用IRONPYTHON调用pyhton脚本时遇到了这些问题，在这里总结一下 主要问题：1.引用第三方类库之后，无法发布。提示引用的类库不支持。 2.发布之后，使用到对应第三方类库内容时，发生错误，但是在编辑器里却没错误。 问题可能原因和解决方法：问题1：可能原因：目前遇到的大部分是都是因为Unity的NET版本和要使用的类库不一致导致的，虽然目前Unity的设置中支持3.5和4.X，但实际上使用那些4.0以上NET支持的类库，大部分就会出现VS编译器里无报错，但Unity编辑器里报错的问题，或者如问题1那样，无法发布。 解决方法：1.尽量使用非4.XNET支持的第三方类库，总能找到课替代的或者低版本(最后我还是没用上iron Python ,选择把python写成web后端了= =)。 2.在发布页面的Player Setting中设置使用的NET版本，更改Unity为.NET 4.X ，但大部分第三方库依然不支持 3.老老实实使用.NET3.5，并选择API为.NET2.0而不是它的子集2.0 Subset 据说后面4.X会支持的更好，3.5也会被移除，希望能完全支持这些类库吧。 问题2：可能原因：我遇到的是在Unity编辑器里生成表格是可以的,但是发布之后，却失败了，通过异常捕获发现出现不支持IBM347编码，其实是缺少Unity编辑器里自带的一些文件。 解决方法：把Unity\Editor\Data\Mono\lib\mono\unity下的L18N相关的所有.dll赋值到当前项目的Assets文件夹下，保存再发布就可以解决了。 以上大部分分析来源于自己，因此可能不是百分百正确，勿在意。]]></content>
      <categories>
        <category>Unity3D</category>
      </categories>
      <tags>
        <tag>问题以及解决方案</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[独立手游-11月]]></title>
    <url>%2F2018%2FMyGame-Nov%2F</url>
    <content type="text"><![CDATA[[TOC] 本月主要开发内容绘制大部分UI界面所用的素材、绘制主角样板和一些动画，然后对原来的UI布局根据像素风进行了一些修改。 成果图片以及描述板子用的是ctl672，绘制软件有PS和piskel，没有什么美术功底强上，在piskel上不支持压感，所以画主角样板的时候都是现在PS上画 再转到piskel做帧动画的。 总览 1.人物属性表每个两张，一张填满一张空，用填充分那个是控制数值 空san 2.电子表预览打算6/12min现实时间为游戏的一天，用uv动画去控制时间流动 3.人物待机图在piskel上绘制帧动画，导出xy行列的图集，然后在Unity上自己分割，拖动就可以形成动画 人物待机图* 待更新完毕]]></content>
      <categories>
        <category>Unity3D</category>
      </categories>
      <tags>
        <tag>独立游戏</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[独立手游-10月]]></title>
    <url>%2F2018%2FMyGame-Oct%2F</url>
    <content type="text"><![CDATA[[TOC] 本月主要开发内容UI框架、UI布局、美术制作、游戏物品数据json化、主角存档格式等 成果图片以及描述对于一个没有美术资源的游戏开发前期，打算先从UI入手由于截图软件问题，上面有大概0.5cm的高度矩形被截出了 但不影响观看 1.操作方式预览 左手移动 范围为2/5的左边屏幕右手攻击 范围固定 2.背包预览还没在主角数据里添加，所以暂时为空 3.合成系统预览主要用到Toggle来选择合成表点击目标物品，右侧会出现详情和合成所需的物品预览以及对应的消耗个数和已有个数 4.数据持久化JSON我也只是刚接触不久，用的litjson，因为我把所有物品都一股脑写入一个json里（手写。。。），解析不能用泛型，只好手动针对性解析(可能是我没学会其他更方便的方法)顺便加了AES加密主角的存档数据我也写了初版，并且加了脚本测试测试为：向主角数据添加物品持有、然后在背包中查阅 (在电脑上编辑器中的测试，在电脑录制的gif 比手机的更清晰顺滑一些) 本月总结 其实说是本月，不如说是9月和10月:grimacing:，这些是用了两个月的课余时间慢慢写的，但考虑到现在才开通博客记录，所以合二为一了。 设计这些低端UI还是相对容易的，因为轻量级的UI框架之前看视频学过倒是卡了摇杆设计上，EasyTouch要付费，网上找了一些别人的源码，自己照着造了一次适合的轮子，发现左右手不能同时使用，会卡住，最后知道了安卓有多点触控。。。用了Torch去判断才可以 在json数据的定义上，也许是开发经验太少，我甚至用到了伤害计算弄成数组。。。1234567891011121314&#123; "id": 304, "type": "bullet", "pose": 4, "name": "毒箭", "compose": [ 2, 1, 14, 1, 39, 1, 62, 1 ], "effect": "", "intro": "不要舔它", "isRealinjury": 1, "dT": [ 60, 0, 20, 1, 20, 1 ], "san": 0, "repair": [], "durability": 1 &#125; 就比如上面的。。。dT就是damageTime缩写，0为基础伤害，1为一秒的持续伤害:expressionless: 不在意这些细节啦，双11买了数位板，准备开肝素材，顺便贴下自己做的个人logo:yum:]]></content>
      <categories>
        <category>Unity3D</category>
      </categories>
      <tags>
        <tag>独立游戏</tag>
      </tags>
  </entry>
</search>
